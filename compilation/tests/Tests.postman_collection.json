{
	"info": {
		"_postman_id": "5e05cf9f-a27d-479d-8ead-904782e44f04",
		"name": "Tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Basic",
			"item": [
				{
					"name": "basic use case resource POST and GET",
					"item": [
						{
							"name": "predefined AutomationPlan 0",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "061d61ed-5a4f-4d37-a861-10e856448e8b",
										"exec": [
											"var serverAddr = pm.variables.get(\"server_address\");",
											"",
											"pm.test(\"Response code should be 200 (OK)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body should match the expected AutomationPlan\", function () {",
											"    pm.expect(pm.response.text()).to.include(\":AutomationPlan rdf:about=\\\"\" + serverAddr + \"/AnacondaOSLC/services/Automation/A0/resources/automationPlans/0\");",
											"    pm.expect(pm.response.text()).to.include(\"<oslc:serviceProvider rdf:resource=\\\"\" + serverAddr + \"/AnacondaOSLC/services/Automation/A0\\\"/>\");",
											"    ",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:title rdf:parseType=\\\"Literal\\\">Run Analysis of a Single File Program</dcterms:title>\");",
											"    ",
											"    pm.expect(pm.response.text()).to.include(\":ParameterDefinition rdf:about=\\\"\" + serverAddr + \"/AnacondaOSLC/services/Automation/A0/resources/parameterDefinitions/0-0\");",
											"    pm.expect(pm.response.text()).to.include(\":ParameterDefinition rdf:about=\\\"\" + serverAddr + \"/AnacondaOSLC/services/Automation/A0/resources/parameterDefinitions/0-1\");",
											"    pm.expect(pm.response.text()).to.include(\":ParameterDefinition rdf:about=\\\"\" + serverAddr + \"/AnacondaOSLC/services/Automation/A0/resources/parameterDefinitions/0-2\");",
											"    pm.expect(pm.response.text()).to.include(\":ParameterDefinition rdf:about=\\\"\" + serverAddr + \"/AnacondaOSLC/services/Automation/A0/resources/parameterDefinitions/0-3\");",
											"    pm.expect(pm.response.text()).to.include(\":ParameterDefinition rdf:about=\\\"\" + serverAddr + \"/AnacondaOSLC/services/Automation/A0/resources/parameterDefinitions/0-4\");",
											"    ",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:created\");",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:modified\");",
											"    ",
											"    pm.expect(pm.response.text()).to.include(\"<oslc:name>Analyser</oslc:name>\");",
											"    pm.expect(pm.response.text()).to.include(\"<oslc:name>Program</oslc:name>\");",
											"    pm.expect(pm.response.text()).to.include(\"<oslc:name>ProgramDefinition</oslc:name>\");",
											"    pm.expect(pm.response.text()).to.include(\"<oslc:name>CompilationParameters</oslc:name>\");",
											"    pm.expect(pm.response.text()).to.include(\"<oslc:name>ExecutionParameters</oslc:name>\");",
											"    ",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:creator rdf:resource=\\\"https://pajda.fit.vutbr.cz/xvasic\\\"/>\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "36a188ea-5f2f-4520-9d4e-058368bf02f3",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{server_address}}/AnacondaOSLC/services/Automation/A0/resources/automationPlans/0",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"AnacondaOSLC",
										"services",
										"Automation",
										"A0",
										"resources",
										"automationPlans",
										"0"
									]
								}
							},
							"response": []
						},
						{
							"name": "create AutomationRequest",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "28eb1cf1-a957-444a-b541-0affedf688d7",
										"exec": [
											"// save the request ID as a global variable for later tests to use",
											"const response = xml2Json(pm.response.text());",
											"var resrouceAbout = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"].$[\"rdf:about\"];",
											"var resourceAboutSplit = resrouceAbout.split(\"/\");",
											"var resourceId = resourceAboutSplit[resourceAboutSplit.length-1];",
											"pm.globals.set('requestId', resourceId);",
											"",
											"var serverAddr = pm.variables.get(\"server_address\");",
											"var AutoPlanId = pm.variables.get(\"AutoPlanId\");",
											"var Program = pm.variables.get(\"Program\");",
											"var ProgramDefinition = pm.variables.get(\"ProgramDefinition\");",
											"var CompilationParameters = pm.variables.get(\"CompilationParameters\");",
											"var ExecutionParameters = pm.variables.get(\"ExecutionParameters\");",
											"var Analyser = pm.variables.get(\"Analyser\");",
											"",
											"pm.test(\"Response code should be 201 (created)\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"",
											"pm.test(\"Response body should contain all the submitted properties\", function () {",
											"    pm.expect(pm.response.text()).to.include(\":AutomationRequest rdf:about=\\\"http://localhost:8080/AnacondaOSLC/services/Automation/A0/resources/automationRequests/\" + resourceId);",
											"    pm.expect(pm.response.text()).to.include(\"<oslc:serviceProvider rdf:resource=\\\"\" + serverAddr + \"/AnacondaOSLC/services/Automation/A0\\\"/>\");",
											"    ",
											"    pm.expect(pm.response.text()).to.include(\":state rdf:resource=\\\"http://open-services.net/ns/auto#inProgress\\\"/>\");",
											"    pm.expect(pm.response.text()).to.include(\":desiredState rdf:resource=\\\"http://open-services.net/ns/auto#complete\\\"/>\");",
											"    ",
											"    pm.expect(pm.response.text()).to.include(\":executesAutomationPlan rdf:resource=\\\"\" + serverAddr + \"/AnacondaOSLC/services/Automation/A0/resources/automationPlans/\" + AutoPlanId);",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:title rdf:parseType=\\\"Literal\\\">Test Request</dcterms:title>\");",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:created\");",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:modified\");",
											"    ",
											"    pm.expect(pm.response.text()).to.include(\"<oslc:name>Analyser</oslc:name>\");",
											"    pm.expect(pm.response.text()).to.include(\"<oslc:name>Program</oslc:name>\");",
											"    pm.expect(pm.response.text()).to.include(\"<oslc:name>ProgramDefinition</oslc:name>\");",
											"    pm.expect(pm.response.text()).to.include(\"<oslc:name>ExecutionParameters</oslc:name>\");",
											"    pm.expect(pm.response.text()).to.include(\"<oslc:name>CompilationParameters</oslc:name>\");",
											"    pm.expect(pm.response.text()).to.include(\"<rdf:value rdf:parseType=\\\"Literal\\\">\" + Analyser + \"</rdf:value>\");",
											"    pm.expect(pm.response.text()).to.include(\"<rdf:value rdf:parseType=\\\"Literal\\\">\" + ProgramDefinition + \"</rdf:value>\");",
											"    pm.expect(pm.response.text()).to.include(\"<rdf:value rdf:parseType=\\\"Literal\\\">\" + Program + \"</rdf:value>\");",
											"    pm.expect(pm.response.text()).to.include(\"<rdf:value rdf:parseType=\\\"Literal\\\">\" + ExecutionParameters + \"</rdf:value>\");",
											"    pm.expect(pm.response.text()).to.include(\"<rdf:value rdf:parseType=\\\"Literal\\\">\" + CompilationParameters + \"</rdf:value>\");",
											"    ",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:creator rdf:resource=\\\"https://pajda.fit.vutbr.cz/xvasic\\\"/>\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "53694edb-628d-4044-b35a-1fec5eecd915",
										"exec": [
											"pm.globals.set(\"AutoPlanId\", \"0\");",
											"pm.globals.set(\"Program\", \"echo\");",
											"pm.globals.set(\"ProgramDefinition\", \"console command\");",
											"pm.globals.set(\"CompilationParameters\", \"\");",
											"pm.globals.set(\"ExecutionParameters\", \"\\\"Hello World!\\\"\");",
											"pm.globals.set(\"Analyser\", \"event-printer\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/xml"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>Test Request</dcterms:title>\n\t<dcterms:description>Test the console command version of the SinlgeFileAutoPlan</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{server_address}}/AnacondaOSLC/services/Automation/A0/resources/automationPlans/{{AutoPlanId}}\" />\n\t<dcterms:creator rdf:resource=\"https://pajda.fit.vutbr.cz/xvasic\"/>\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>Analyser</oslc:name>\n\t\t\t<rdf:value>{{Analyser}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>ProgramDefinition</oslc:name>\n\t\t\t<rdf:value>{{ProgramDefinition}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>Program</oslc:name>\n\t\t\t<rdf:value>{{Program}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>CompilationParameters</oslc:name>\n\t\t\t<rdf:value>{{CompilationParameters}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>ExecutionParameters</oslc:name>\n\t\t\t<rdf:value>{{ExecutionParameters}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>"
								},
								"url": {
									"raw": "{{server_address}}/AnacondaOSLC/services/Automation/A0/resources/createAutomationRequest",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"AnacondaOSLC",
										"services",
										"Automation",
										"A0",
										"resources",
										"createAutomationRequest"
									]
								}
							},
							"response": []
						},
						{
							"name": "get AutoRequest - inProgress",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "061d61ed-5a4f-4d37-a861-10e856448e8b",
										"exec": [
											"var serverAddr = pm.variables.get(\"server_address\");",
											"var requestId = pm.globals.get('requestId');",
											"var AutoPlanId = pm.variables.get(\"AutoPlanId\");",
											"var Program = pm.variables.get(\"Program\");",
											"var ProgramDefinition = pm.variables.get(\"ProgramDefinition\");",
											"var CompilationParameters = pm.variables.get(\"CompilationParameters\");",
											"var ExecutionParameters = pm.variables.get(\"ExecutionParameters\");",
											"var Analyser = pm.variables.get(\"Analyser\");",
											"",
											"pm.test(\"Response code should be 200 (OK)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body should contain all the submitted properties\", function () {",
											"    pm.expect(pm.response.text()).to.include(\":AutomationRequest rdf:about=\\\"http://localhost:8080/AnacondaOSLC/services/Automation/A0/resources/automationRequests/\" + requestId);",
											"    pm.expect(pm.response.text()).to.include(\"<oslc:serviceProvider rdf:resource=\\\"\" + serverAddr + \"/AnacondaOSLC/services/Automation/A0\\\"/>\");",
											"    ",
											"    pm.expect(pm.response.text()).to.include(\":state rdf:resource=\\\"http://open-services.net/ns/auto#inProgress\\\"/>\");",
											"    pm.expect(pm.response.text()).to.include(\":desiredState rdf:resource=\\\"http://open-services.net/ns/auto#complete\\\"/>\");",
											"    ",
											"    pm.expect(pm.response.text()).to.include(\":executesAutomationPlan rdf:resource=\\\"\" + serverAddr + \"/AnacondaOSLC/services/Automation/A0/resources/automationPlans/\" + AutoPlanId);",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:title rdf:parseType=\\\"Literal\\\">Test Request</dcterms:title>\");",
											"    ",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:created\");",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:modified\");",
											"    ",
											"    ",
											"    pm.expect(pm.response.text()).to.include(\"<oslc:name>Analyser</oslc:name>\");",
											"    pm.expect(pm.response.text()).to.include(\"<oslc:name>Program</oslc:name>\");",
											"    pm.expect(pm.response.text()).to.include(\"<oslc:name>ProgramDefinition</oslc:name>\");",
											"    pm.expect(pm.response.text()).to.include(\"<oslc:name>ExecutionParameters</oslc:name>\");",
											"    pm.expect(pm.response.text()).to.include(\"<oslc:name>CompilationParameters</oslc:name>\");",
											"    pm.expect(pm.response.text()).to.include(\"<rdf:value rdf:parseType=\\\"Literal\\\">\" + Analyser + \"</rdf:value>\");",
											"    pm.expect(pm.response.text()).to.include(\"<rdf:value rdf:parseType=\\\"Literal\\\">\" + ProgramDefinition + \"</rdf:value>\");",
											"    pm.expect(pm.response.text()).to.include(\"<rdf:value rdf:parseType=\\\"Literal\\\">\" + Program + \"</rdf:value>\");",
											"    pm.expect(pm.response.text()).to.include(\"<rdf:value rdf:parseType=\\\"Literal\\\">\" + ExecutionParameters + \"</rdf:value>\");",
											"    pm.expect(pm.response.text()).to.include(\"<rdf:value rdf:parseType=\\\"Literal\\\">\" + CompilationParameters + \"</rdf:value>\");",
											"    ",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:creator rdf:resource=\\\"https://pajda.fit.vutbr.cz/xvasic\\\"/>\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{server_address}}/AnacondaOSLC/services/Automation/A0/resources/automationRequests/{{requestId}}",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"AnacondaOSLC",
										"services",
										"Automation",
										"A0",
										"resources",
										"automationRequests",
										"{{requestId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get AutomatinResult - inProgress",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2ac8143a-00b8-4352-9f49-a6cfaba6f982",
										"exec": [
											"var serverAddr = pm.variables.get(\"server_address\");",
											"var requestId = pm.globals.get('requestId');",
											"var AutoPlanId = pm.variables.get(\"AutoPlanId\");",
											"var Program = pm.variables.get(\"Program\");",
											"var ProgramDefinition = pm.variables.get(\"ProgramDefinition\");",
											"var CompilationParameters = pm.variables.get(\"CompilationParameters\");",
											"var ExecutionParameters = pm.variables.get(\"ExecutionParameters\");",
											"var Analyser = pm.variables.get(\"Analyser\");",
											"",
											"pm.test(\"Response code should be 200 (OK)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Response body should match the expected AutomationResult\", function () {",
											"    pm.expect(pm.response.text()).to.include(\":AutomationResult rdf:about=\\\"\" + serverAddr + \"/AnacondaOSLC/services/Automation/A0/resources/automationResults/\" + requestId);",
											"    pm.expect(pm.response.text()).to.include(\"<oslc:serviceProvider rdf:resource=\\\"\" + serverAddr + \"/AnacondaOSLC/services/Automation/A0\\\"/>\");",
											"",
											"    pm.expect(pm.response.text()).to.include(\":producedByAutomationRequest rdf:resource=\\\"\" + serverAddr + \"/AnacondaOSLC/services/Automation/A0/resources/automationRequests/\" + requestId);",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:title rdf:parseType=\\\"Literal\\\">Result - Test Request</dcterms:title>\");",
											"    ",
											"    pm.expect(pm.response.text()).to.include(\":desiredState rdf:resource=\\\"http://open-services.net/ns/auto#complete\\\"/>\");",
											"    pm.expect(pm.response.text()).to.include(\":state rdf:resource=\\\"http://open-services.net/ns/auto#inProgress\\\"/>\");",
											"    pm.expect(pm.response.text()).to.include(\":verdict rdf:resource=\\\"http://open-services.net/ns/auto#unavailable\\\"/>\");",
											"    ",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:created\");",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:modified\");",
											"    ",
											"        ",
											"    pm.expect(pm.response.text()).to.include(\"<oslc:name>Analyser</oslc:name>\");",
											"    pm.expect(pm.response.text()).to.include(\"<oslc:name>Program</oslc:name>\");",
											"    pm.expect(pm.response.text()).to.include(\"<oslc:name>ProgramDefinition</oslc:name>\");",
											"    pm.expect(pm.response.text()).to.include(\"<oslc:name>ExecutionParameters</oslc:name>\");",
											"    pm.expect(pm.response.text()).to.include(\"<oslc:name>CompilationParameters</oslc:name>\");",
											"    pm.expect(pm.response.text()).to.include(\"<rdf:value rdf:parseType=\\\"Literal\\\">\" + Analyser + \"</rdf:value>\");",
											"    pm.expect(pm.response.text()).to.include(\"<rdf:value rdf:parseType=\\\"Literal\\\">\" + ProgramDefinition + \"</rdf:value>\");",
											"    pm.expect(pm.response.text()).to.include(\"<rdf:value rdf:parseType=\\\"Literal\\\">\" + Program + \"</rdf:value>\");",
											"    pm.expect(pm.response.text()).to.include(\"<rdf:value rdf:parseType=\\\"Literal\\\">\" + ExecutionParameters + \"</rdf:value>\");",
											"    pm.expect(pm.response.text()).to.include(\"<rdf:value rdf:parseType=\\\"Literal\\\">\" + CompilationParameters + \"</rdf:value>\");",
											"    ",
											"    pm.expect(pm.response.text()).to.not.include(\":contribution>\");",
											"    ",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:creator rdf:resource=\\\"https://pajda.fit.vutbr.cz/xvasic\\\"/>\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "0e22f9d0-a6e8-43bc-8f87-b0861919c0de",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{server_address}}/AnacondaOSLC/services/Automation/A0/resources/automationResults/{{requestId}}",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"AnacondaOSLC",
										"services",
										"Automation",
										"A0",
										"resources",
										"automationResults",
										"{{requestId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get AutoRequest - complete",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "061d61ed-5a4f-4d37-a861-10e856448e8b",
										"exec": [
											"var serverAddr = pm.variables.get(\"server_address\");",
											"var requestId = pm.globals.get('requestId');",
											"var AutoPlanId = pm.variables.get(\"AutoPlanId\");",
											"var Program = pm.variables.get(\"Program\");",
											"var ProgramDefinition = pm.variables.get(\"ProgramDefinition\");",
											"var CompilationParameters = pm.variables.get(\"CompilationParameters\");",
											"var ExecutionParameters = pm.variables.get(\"ExecutionParameters\");",
											"var Analyser = pm.variables.get(\"Analyser\");",
											"",
											"pm.test(\"Response code should be 200 (OK)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body should contain all the submitted properties\", function () {",
											"    pm.expect(pm.response.text()).to.include(\":AutomationRequest rdf:about=\\\"http://localhost:8080/AnacondaOSLC/services/Automation/A0/resources/automationRequests/\" + requestId);",
											"    pm.expect(pm.response.text()).to.include(\"<oslc:serviceProvider rdf:resource=\\\"\" + serverAddr + \"/AnacondaOSLC/services/Automation/A0\\\"/>\");",
											"    ",
											"    pm.expect(pm.response.text()).to.include(\":state rdf:resource=\\\"http://open-services.net/ns/auto#complete\\\"/>\");",
											"    pm.expect(pm.response.text()).to.include(\":desiredState rdf:resource=\\\"http://open-services.net/ns/auto#complete\\\"/>\");",
											"    ",
											"    pm.expect(pm.response.text()).to.include(\":executesAutomationPlan rdf:resource=\\\"\" + serverAddr + \"/AnacondaOSLC/services/Automation/A0/resources/automationPlans/\" + AutoPlanId);",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:title rdf:parseType=\\\"Literal\\\">Test Request</dcterms:title>\");",
											"    ",
											"    pm.expect(pm.response.text()).to.include(\"<oslc:name>Analyser</oslc:name>\");",
											"    pm.expect(pm.response.text()).to.include(\"<oslc:name>Program</oslc:name>\");",
											"    pm.expect(pm.response.text()).to.include(\"<oslc:name>ProgramDefinition</oslc:name>\");",
											"    pm.expect(pm.response.text()).to.include(\"<oslc:name>ExecutionParameters</oslc:name>\");",
											"    pm.expect(pm.response.text()).to.include(\"<oslc:name>CompilationParameters</oslc:name>\");",
											"    pm.expect(pm.response.text()).to.include(\"<rdf:value rdf:parseType=\\\"Literal\\\">\" + Analyser + \"</rdf:value>\");",
											"    pm.expect(pm.response.text()).to.include(\"<rdf:value rdf:parseType=\\\"Literal\\\">\" + ProgramDefinition + \"</rdf:value>\");",
											"    pm.expect(pm.response.text()).to.include(\"<rdf:value rdf:parseType=\\\"Literal\\\">\" + Program + \"</rdf:value>\");",
											"    pm.expect(pm.response.text()).to.include(\"<rdf:value rdf:parseType=\\\"Literal\\\">\" + ExecutionParameters + \"</rdf:value>\");",
											"    pm.expect(pm.response.text()).to.include(\"<rdf:value rdf:parseType=\\\"Literal\\\">\" + CompilationParameters + \"</rdf:value>\");",
											"    ",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:creator rdf:resource=\\\"https://pajda.fit.vutbr.cz/xvasic\\\"/>\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "8baa5ba6-8bc9-44f8-950a-dbad0a093e21",
										"exec": [
											"// wait for the request execution to finish",
											" var result_wait_time = pm.variables.get('result_wait_time');",
											" setTimeout(function(){}, [result_wait_time]);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{server_address}}/AnacondaOSLC/services/Automation/A0/resources/automationRequests/{{requestId}}",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"AnacondaOSLC",
										"services",
										"Automation",
										"A0",
										"resources",
										"automationRequests",
										"{{requestId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get AutomatinResult - complete",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2ac8143a-00b8-4352-9f49-a6cfaba6f982",
										"exec": [
											"var serverAddr = pm.variables.get(\"server_address\");",
											"var requestId = pm.globals.get('requestId');",
											"var AutoPlanId = pm.variables.get(\"AutoPlanId\");",
											"var Program = pm.variables.get(\"Program\");",
											"var ProgramDefinition = pm.variables.get(\"ProgramDefinition\");",
											"var CompilationParameters = pm.variables.get(\"CompilationParameters\");",
											"var ExecutionParameters = pm.variables.get(\"ExecutionParameters\");",
											"var Analyser = pm.variables.get(\"Analyser\");",
											"",
											"pm.test(\"Response code should be 200 (OK)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Response body should match the expected AutomationResult\", function () {",
											"    pm.expect(pm.response.text()).to.include(\":AutomationResult rdf:about=\\\"\" + serverAddr + \"/AnacondaOSLC/services/Automation/A0/resources/automationResults/\" + requestId);",
											"    pm.expect(pm.response.text()).to.include(\"<oslc:serviceProvider rdf:resource=\\\"\" + serverAddr + \"/AnacondaOSLC/services/Automation/A0\\\"/>\");",
											"",
											"    pm.expect(pm.response.text()).to.include(\":producedByAutomationRequest rdf:resource=\\\"\" + serverAddr + \"/AnacondaOSLC/services/Automation/A0/resources/automationRequests/\" + requestId);",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:title rdf:parseType=\\\"Literal\\\">Result - Test Request</dcterms:title>\");",
											"    ",
											"    pm.expect(pm.response.text()).to.include(\":desiredState rdf:resource=\\\"http://open-services.net/ns/auto#complete\\\"/>\");",
											"    pm.expect(pm.response.text()).to.include(\":state rdf:resource=\\\"http://open-services.net/ns/auto#complete\\\"/>\");",
											"    pm.expect(pm.response.text()).to.not.include(\":state rdf:resource=\\\"http://open-services.net/ns/auto#unavailable\\\"/>\");",
											"        ",
											"    pm.expect(pm.response.text()).to.include(\"<oslc:name>Analyser</oslc:name>\");",
											"    pm.expect(pm.response.text()).to.include(\"<oslc:name>Program</oslc:name>\");",
											"    pm.expect(pm.response.text()).to.include(\"<oslc:name>ProgramDefinition</oslc:name>\");",
											"    pm.expect(pm.response.text()).to.include(\"<oslc:name>ExecutionParameters</oslc:name>\");",
											"    pm.expect(pm.response.text()).to.include(\"<oslc:name>CompilationParameters</oslc:name>\");",
											"    pm.expect(pm.response.text()).to.include(\"<rdf:value rdf:parseType=\\\"Literal\\\">\" + Analyser + \"</rdf:value>\");",
											"    pm.expect(pm.response.text()).to.include(\"<rdf:value rdf:parseType=\\\"Literal\\\">\" + ProgramDefinition + \"</rdf:value>\");",
											"    pm.expect(pm.response.text()).to.include(\"<rdf:value rdf:parseType=\\\"Literal\\\">\" + Program + \"</rdf:value>\");",
											"    pm.expect(pm.response.text()).to.include(\"<rdf:value rdf:parseType=\\\"Literal\\\">\" + ExecutionParameters + \"</rdf:value>\");",
											"    pm.expect(pm.response.text()).to.include(\"<rdf:value rdf:parseType=\\\"Literal\\\">\" + CompilationParameters + \"</rdf:value>\");",
											"",
											"    pm.expect(pm.response.text()).to.include(\":contribution>\");",
											"    pm.expect(pm.response.text()).to.include(\":OutputLog rdf:about=\\\"\" + serverAddr + \"/AnacondaOSLC/services/Automation/A0/resources/outputLogs/\");",
											"",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:creator rdf:resource=\\\"https://pajda.fit.vutbr.cz/xvasic\\\"/>\");",
											"});",
											"",
											"pm.globals.clear();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "0e22f9d0-a6e8-43bc-8f87-b0861919c0de",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{server_address}}/AnacondaOSLC/services/Automation/A0/resources/automationResults/{{requestId}}",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"AnacondaOSLC",
										"services",
										"Automation",
										"A0",
										"resources",
										"automationResults",
										"{{requestId}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Automation Service Provider",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a468ffe6-7139-42ef-8294-fa30c1724d8b",
								"exec": [
									"pm.test(\"Response code should be 200 (OK)\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "80af8363-be02-4be7-8b2e-fa59b144d09a",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/rdf+xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{server_address}}/AnacondaOSLC/services/Automation/A0",
							"host": [
								"{{server_address}}"
							],
							"path": [
								"AnacondaOSLC",
								"services",
								"Automation",
								"A0"
							]
						}
					},
					"response": []
				},
				{
					"name": "Service Provider Catologue",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c5460f3e-6a8a-4a91-9c25-f4a51a23e823",
								"exec": [
									"pm.test(\"Response code should be 200 (OK)\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/rdf+xml",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{server_address}}/AnacondaOSLC/services/catalog/singleton",
							"host": [
								"{{server_address}}"
							],
							"path": [
								"AnacondaOSLC",
								"services",
								"catalog",
								"singleton"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "1e0de945-487d-495e-b9e7-52f23ee31f14",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "e7dfbe50-1eb8-41c9-add3-753aaaabdc83",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "General Errors",
			"item": [
				{
					"name": "empty POST request",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "28eb1cf1-a957-444a-b541-0affedf688d7",
								"exec": [
									"pm.test(\"Response code should be 400 (bad request)\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Error msg should be - empty creation POST\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"<oslc:message>AutomationRequest NOT created - empty creation POST</oslc:message>\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "cb0e422a-5939-4a63-8ed7-877fe30f5ebf",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n</rdf:RDF>"
						},
						"url": {
							"raw": "{{server_address}}/AnacondaOSLC/services/Automation/A0/resources/createAutomationRequest",
							"host": [
								"{{server_address}}"
							],
							"path": [
								"AnacondaOSLC",
								"services",
								"Automation",
								"A0",
								"resources",
								"createAutomationRequest"
							]
						}
					},
					"response": []
				},
				{
					"name": "title property missing",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "28eb1cf1-a957-444a-b541-0affedf688d7",
								"exec": [
									"pm.test(\"Response code should be 400 (bad request)\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"",
									"pm.test(\"Error msg should be - executesAutomationPlan property missing\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"<oslc:message>AutomationRequest NOT created - title property missing</oslc:message>\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:description>Executes the no upload analysis AutomationPlan</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{server_address}}/AnacondaOSLC/services/Automation/A0/resources/automationPlans/0\" />\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>analyser</oslc:name>\n\t\t\t<rdf:value>event-printer</rdf:value>\n\t\t\t<dcterms:description>first test analyser parameter</dcterms:description>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>program</oslc:name>\n\t\t\t<rdf:value>echo</rdf:value>\n\t\t\t<dcterms:description>first test program parameter</dcterms:description>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>parameters</oslc:name>\n\t\t\t<rdf:value>Hello World!</rdf:value>\n\t\t\t<dcterms:description>first test parameters parameter</dcterms:description>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>anaconda</oslc:name>\n\t\t\t<rdf:value>{{anaconda_path}}</rdf:value>\n\t\t\t<dcterms:description>path to anaconda</dcterms:description>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>"
						},
						"url": {
							"raw": "{{server_address}}/AnacondaOSLC/services/Automation/A0/resources/createAutomationRequest",
							"host": [
								"{{server_address}}"
							],
							"path": [
								"AnacondaOSLC",
								"services",
								"Automation",
								"A0",
								"resources",
								"createAutomationRequest"
							]
						}
					},
					"response": []
				},
				{
					"name": "executesAutomationPlan property missing",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "28eb1cf1-a957-444a-b541-0affedf688d7",
								"exec": [
									"pm.test(\"Response code should be 400 (bad request)\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"",
									"pm.test(\"Error msg should be - executesAutomationPlan property missing\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"<oslc:message>AutomationRequest NOT created - executesAutomationPlan property missing</oslc:message>\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>Test Request</dcterms:title>\n\t<dcterms:description>Executes the no upload analysis AutomationPlan</dcterms:description>\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>analyser</oslc:name>\n\t\t\t<rdf:value>event-printer</rdf:value>\n\t\t\t<dcterms:description>first test analyser parameter</dcterms:description>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>program</oslc:name>\n\t\t\t<rdf:value>echo</rdf:value>\n\t\t\t<dcterms:description>first test program parameter</dcterms:description>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>anaconda</oslc:name>\n\t\t\t<rdf:value>/home/od42/matrix/proj_praxe/anaconda</rdf:value>\n\t\t\t<dcterms:description>path to anaconda</dcterms:description>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>"
						},
						"url": {
							"raw": "{{server_address}}/AnacondaOSLC/services/Automation/A0/resources/createAutomationRequest",
							"host": [
								"{{server_address}}"
							],
							"path": [
								"AnacondaOSLC",
								"services",
								"Automation",
								"A0",
								"resources",
								"createAutomationRequest"
							]
						}
					},
					"response": []
				},
				{
					"name": "executed AutomationPlan not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "28eb1cf1-a957-444a-b541-0affedf688d7",
								"exec": [
									"pm.test(\"Response code should be 400 (bad request)\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"",
									"pm.test(\"Error msg should be - AutomationPlan not found\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"<oslc:message>AutomationRequest NOT created - AutomationPlan not found\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>Test Request</dcterms:title>\n\t<dcterms:description>Executes the no upload analysis AutomationPlan</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{server_address}}/AnacondaOSLC/services/Automation/A0/resources/automationPlans/123456789\" />\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>analyser</oslc:name>\n\t\t\t<rdf:value>event-printer</rdf:value>\n\t\t\t<dcterms:description>first test analyser parameter</dcterms:description>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>program</oslc:name>\n\t\t\t<rdf:value>echo</rdf:value>\n\t\t\t<dcterms:description>first test program parameter</dcterms:description>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>anaconda</oslc:name>\n\t\t\t<rdf:value>/home/od42/matrix/proj_praxe/anaconda</rdf:value>\n\t\t\t<dcterms:description>path to anaconda</dcterms:description>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>"
						},
						"url": {
							"raw": "{{server_address}}/AnacondaOSLC/services/Automation/A0/resources/createAutomationRequest",
							"host": [
								"{{server_address}}"
							],
							"path": [
								"AnacondaOSLC",
								"services",
								"Automation",
								"A0",
								"resources",
								"createAutomationRequest"
							]
						}
					},
					"response": []
				},
				{
					"name": "Program parameter missing",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "28eb1cf1-a957-444a-b541-0affedf688d7",
								"exec": [
									"pm.test(\"Response code should be 400 (bad request)\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"",
									"pm.test(\"Error msg should be - 'Program' input parameter missing\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"<oslc:message>AutomationRequest NOT created - 'Program' input parameter missing</oslc:message>\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/xml"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/rdf+xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>Test Request</dcterms:title>\n\t<dcterms:description>Test the console command version of the SinlgeFileAutoPlan</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{server_address}}/AnacondaOSLC/services/Automation/A0/resources/automationPlans/0\" />\n\t<dcterms:creator rdf:resource=\"https://pajda.fit.vutbr.cz/xvasic\"/>\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>Analyser</oslc:name>\n\t\t\t<rdf:value>event-printer</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>ProgramDefinition</oslc:name>\n\t\t\t<rdf:value>console command</rdf:value>\n\t\t\t<dcterms:description>Means no compilation</dcterms:description>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>CompilationParameters</oslc:name>\n\t\t\t<rdf:value></rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>ExecutionParameters</oslc:name>\n\t\t\t<rdf:value>\"Hello World!\"</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>"
						},
						"url": {
							"raw": "{{server_address}}/AnacondaOSLC/services/Automation/A0/resources/createAutomationRequest",
							"host": [
								"{{server_address}}"
							],
							"path": [
								"AnacondaOSLC",
								"services",
								"Automation",
								"A0",
								"resources",
								"createAutomationRequest"
							]
						}
					},
					"response": []
				},
				{
					"name": "Analyser parameter missing",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "28eb1cf1-a957-444a-b541-0affedf688d7",
								"exec": [
									"pm.test(\"Response code should be 400 (bad request)\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"",
									"pm.test(\"Error msg should be - 'Analyser' input parameter missing\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"<oslc:message>AutomationRequest NOT created - 'Analyser' input parameter missing</oslc:message>\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/xml"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/rdf+xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>Test Request</dcterms:title>\n\t<dcterms:description>Test the console command version of the SinlgeFileAutoPlan</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{server_address}}/AnacondaOSLC/services/Automation/A0/resources/automationPlans/0\" />\n\t<dcterms:creator rdf:resource=\"https://pajda.fit.vutbr.cz/xvasic\"/>\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>ProgramDefinition</oslc:name>\n\t\t\t<rdf:value>console command</rdf:value>\n\t\t\t<dcterms:description>Means no compilation</dcterms:description>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>Program</oslc:name>\n\t\t\t<rdf:value>echo</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>CompilationParameters</oslc:name>\n\t\t\t<rdf:value></rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>ExecutionParameters</oslc:name>\n\t\t\t<rdf:value>\"Hello World!\"</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>"
						},
						"url": {
							"raw": "{{server_address}}/AnacondaOSLC/services/Automation/A0/resources/createAutomationRequest",
							"host": [
								"{{server_address}}"
							],
							"path": [
								"AnacondaOSLC",
								"services",
								"Automation",
								"A0",
								"resources",
								"createAutomationRequest"
							]
						}
					},
					"response": []
				},
				{
					"name": "Analyser parameter invalid value",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "28eb1cf1-a957-444a-b541-0affedf688d7",
								"exec": [
									"pm.test(\"Response code should be 400 (bad request)\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"",
									"pm.test(\"Error msg should be - value 'NonExistentAnacondaAnalyser' not allowed for the 'Analyser' parameter\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"<oslc:message>AutomationRequest NOT created - value 'NonExistentAnacondaAnalyser' not allowed for the 'Analyser' parameter</oslc:message>\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/xml"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/rdf+xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>Test Request</dcterms:title>\n\t<dcterms:description>Test the console command version of the SinlgeFileAutoPlan</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{server_address}}/AnacondaOSLC/services/Automation/A0/resources/automationPlans/0\" />\n\t<dcterms:creator rdf:resource=\"https://pajda.fit.vutbr.cz/xvasic\"/>\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>Analyser</oslc:name>\n\t\t\t<rdf:value>NonExistentAnacondaAnalyser</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>ProgramDefinition</oslc:name>\n\t\t\t<rdf:value>console command</rdf:value>\n\t\t\t<dcterms:description>Means no compilation</dcterms:description>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>Program</oslc:name>\n\t\t\t<rdf:value>echo</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>CompilationParameters</oslc:name>\n\t\t\t<rdf:value></rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>ExecutionParameters</oslc:name>\n\t\t\t<rdf:value>\"Hello World!\"</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>"
						},
						"url": {
							"raw": "{{server_address}}/AnacondaOSLC/services/Automation/A0/resources/createAutomationRequest",
							"host": [
								"{{server_address}}"
							],
							"path": [
								"AnacondaOSLC",
								"services",
								"Automation",
								"A0",
								"resources",
								"createAutomationRequest"
							]
						}
					},
					"response": []
				},
				{
					"name": "ProgramDefinition parameter missing",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "28eb1cf1-a957-444a-b541-0affedf688d7",
								"exec": [
									"pm.test(\"Response code should be 400 (bad request)\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"",
									"pm.test(\"Error msg should be - 'ProgramDefinition' input parameter missing\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"<oslc:message>AutomationRequest NOT created - 'ProgramDefinition' input parameter missing</oslc:message>\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/xml"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/rdf+xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>Test Request</dcterms:title>\n\t<dcterms:description>Test the console command version of the SinlgeFileAutoPlan</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{server_address}}/AnacondaOSLC/services/Automation/A0/resources/automationPlans/0\" />\n\t<dcterms:creator rdf:resource=\"https://pajda.fit.vutbr.cz/xvasic\"/>\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>Analyser</oslc:name>\n\t\t\t<rdf:value>event-printer</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>Program</oslc:name>\n\t\t\t<rdf:value>echo</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>CompilationParameters</oslc:name>\n\t\t\t<rdf:value></rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>ExecutionParameters</oslc:name>\n\t\t\t<rdf:value>\"Hello World!\"</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>"
						},
						"url": {
							"raw": "{{server_address}}/AnacondaOSLC/services/Automation/A0/resources/createAutomationRequest",
							"host": [
								"{{server_address}}"
							],
							"path": [
								"AnacondaOSLC",
								"services",
								"Automation",
								"A0",
								"resources",
								"createAutomationRequest"
							]
						}
					},
					"response": []
				},
				{
					"name": "ProgramDefinition parameter invalid value",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "28eb1cf1-a957-444a-b541-0affedf688d7",
								"exec": [
									"pm.test(\"Response code should be 400 (bad request)\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"",
									"pm.test(\"Error msg should be - value 'InvaliProgramDefinition' not allowed for the 'ProgramDefinition' parameter\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"<oslc:message>AutomationRequest NOT created - value 'InvaliProgramDefinition' not allowed for the 'ProgramDefinition' parameter</oslc:message>\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/xml"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/rdf+xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>Test Request</dcterms:title>\n\t<dcterms:description>Test the console command version of the SinlgeFileAutoPlan</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{server_address}}/AnacondaOSLC/services/Automation/A0/resources/automationPlans/0\" />\n\t<dcterms:creator rdf:resource=\"https://pajda.fit.vutbr.cz/xvasic\"/>\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>Analyser</oslc:name>\n\t\t\t<rdf:value>event-printer</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>ProgramDefinition</oslc:name>\n\t\t\t<rdf:value>InvaliProgramDefinition</rdf:value>\n\t\t\t<dcterms:description>Means no compilation</dcterms:description>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>Program</oslc:name>\n\t\t\t<rdf:value>echo</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>CompilationParameters</oslc:name>\n\t\t\t<rdf:value></rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>ExecutionParameters</oslc:name>\n\t\t\t<rdf:value>\"Hello World!\"</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>"
						},
						"url": {
							"raw": "{{server_address}}/AnacondaOSLC/services/Automation/A0/resources/createAutomationRequest",
							"host": [
								"{{server_address}}"
							],
							"path": [
								"AnacondaOSLC",
								"services",
								"Automation",
								"A0",
								"resources",
								"createAutomationRequest"
							]
						}
					},
					"response": []
				},
				{
					"name": "resource not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "32ef67f8-fd0e-4d76-aab9-7f4d00263c0c",
								"exec": [
									"pm.test(\"Response code should be 404 (not found)\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{server_address}}/AnacondaOSLC/services/Automation/A0/resources/automationPlans/123456789",
							"host": [
								"{{server_address}}"
							],
							"path": [
								"AnacondaOSLC",
								"services",
								"Automation",
								"A0",
								"resources",
								"automationPlans",
								"123456789"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "f9928b88-3e2e-47ac-83a4-0c3ca9342e63",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "e7cc3f5e-3e4b-4bda-bf8f-ea5524f9b7dc",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Test Single File AutoPlan",
			"item": [
				{
					"name": "console command",
					"item": [
						{
							"name": "basic function",
							"item": [
								{
									"name": "start analysis",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "28eb1cf1-a957-444a-b541-0affedf688d7",
												"exec": [
													"// save the request ID as a global variable for later tests to use",
													"const response = xml2Json(pm.response.text());",
													"var resrouceAbout = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"].$[\"rdf:about\"];",
													"var resourceAboutSplit = resrouceAbout.split(\"/\");",
													"var resourceId = resourceAboutSplit[resourceAboutSplit.length-1];",
													"pm.globals.set('requestId', resourceId);",
													"",
													"pm.test(\"Response code should be 201 (created)\", function () {",
													"    pm.response.to.have.status(201);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "53694edb-628d-4044-b35a-1fec5eecd915",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/xml"
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>Test Request</dcterms:title>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{server_address}}/AnacondaOSLC/services/Automation/A0/resources/automationPlans/0\" />\n\t<dcterms:creator rdf:resource=\"https://pajda.fit.vutbr.cz/xvasic\"/>\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>Analyser</oslc:name>\n\t\t\t<rdf:value>event-printer</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>ProgramDefinition</oslc:name>\n\t\t\t<rdf:value>console command</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>Program</oslc:name>\n\t\t\t<rdf:value>echo</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>CompilationParameters</oslc:name>\n\t\t\t<rdf:value></rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>ExecutionParameters</oslc:name>\n\t\t\t<rdf:value>\"Hello World!\"</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>"
										},
										"url": {
											"raw": "{{server_address}}/AnacondaOSLC/services/Automation/A0/resources/createAutomationRequest",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"AnacondaOSLC",
												"services",
												"Automation",
												"A0",
												"resources",
												"createAutomationRequest"
											]
										}
									},
									"response": []
								},
								{
									"name": "check the result",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2ac8143a-00b8-4352-9f49-a6cfaba6f982",
												"exec": [
													"var serverAddr = pm.variables.get(\"server_address\");",
													"var requestId = pm.globals.get('requestId');",
													"",
													"pm.test(\"Response code should be 200 (OK)\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Should be produced by the expected AutoRequest\", function () {",
													"    ",
													"    pm.expect(pm.response.text()).to.include(\":producedByAutomationRequest rdf:resource=\\\"\" + serverAddr + \"/AnacondaOSLC/services/Automation/A0/resources/automationRequests/\" + requestId);",
													"});",
													"",
													"pm.test(\"Check for the PIN error\", function () {",
													"    pm.expect(pm.response.text()).to.not.include(\"E:   The Operating System configuration prevents Pin from using the default (parent) injection mode.\");",
													"});",
													"",
													"pm.test(\"State should be complete\", function () {",
													"    pm.expect(pm.response.text()).to.include(\":state rdf:resource=\\\"http://open-services.net/ns/auto#complete\\\"/>\");",
													"});",
													"",
													"pm.test(\"Verdict should be passed\", function () {",
													"    pm.expect(pm.response.text()).to.include(\":verdict rdf:resource=\\\"http://open-services.net/ns/auto#passed\\\"/>\");",
													"});",
													"",
													"pm.test(\"Should contain the analysis log\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"Analysis Log\");",
													"});",
													"",
													"pm.test(\"Check analysis output\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"C: Thread 0 started.\");",
													"});",
													"",
													"pm.test(\"Should not contain the program fetching log\", function () {",
													"    pm.expect(pm.response.text()).to.not.include(\"Fetching Log\");",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "0e22f9d0-a6e8-43bc-8f87-b0861919c0de",
												"exec": [
													"// wait for the request execution to finish",
													"var result_wait_time = pm.variables.get('result_wait_time');",
													"setTimeout(function(){}, [result_wait_time]);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{server_address}}/AnacondaOSLC/services/Automation/A0/resources/automationResults/{{requestId}}",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"AnacondaOSLC",
												"services",
												"Automation",
												"A0",
												"resources",
												"automationResults",
												"{{requestId}}"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "invalid command error",
							"item": [
								{
									"name": "unknown command",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "28eb1cf1-a957-444a-b541-0affedf688d7",
												"exec": [
													"// save the request ID as a global variable for later tests to use",
													"const response = xml2Json(pm.response.text());",
													"var resrouceAbout = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"].$[\"rdf:about\"];",
													"var resourceAboutSplit = resrouceAbout.split(\"/\");",
													"var resourceId = resourceAboutSplit[resourceAboutSplit.length-1];",
													"pm.globals.set('requestId', resourceId);",
													"",
													"var serverAddr = pm.variables.get(\"server_address\");",
													"",
													"pm.test(\"Response code should be 201 (created)\", function () {",
													"    pm.response.to.have.status(201);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/xml"
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>Test Request</dcterms:title>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{server_address}}/AnacondaOSLC/services/Automation/A0/resources/automationPlans/0\" />\n\t<dcterms:creator rdf:resource=\"https://pajda.fit.vutbr.cz/xvasic\"/>\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>Analyser</oslc:name>\n\t\t\t<rdf:value>event-printer</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>ProgramDefinition</oslc:name>\n\t\t\t<rdf:value>console command</rdf:value>\n\t\t\t<dcterms:description>Means no compilation</dcterms:description>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>Program</oslc:name>\n\t\t\t<rdf:value>NonExistentConsoleCommand</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>CompilationParameters</oslc:name>\n\t\t\t<rdf:value></rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>ExecutionParameters</oslc:name>\n\t\t\t<rdf:value>\"Hello World!\"</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>"
										},
										"url": {
											"raw": "{{server_address}}/AnacondaOSLC/services/Automation/A0/resources/createAutomationRequest",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"AnacondaOSLC",
												"services",
												"Automation",
												"A0",
												"resources",
												"createAutomationRequest"
											]
										}
									},
									"response": []
								},
								{
									"name": "check the result error",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2ac8143a-00b8-4352-9f49-a6cfaba6f982",
												"exec": [
													"var serverAddr = pm.variables.get(\"server_address\");",
													"var requestId = pm.globals.get('requestId');",
													"",
													"pm.test(\"Response code should be 200 (OK)\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Should be produced by the expected AutoRequest\", function () {",
													"    ",
													"    pm.expect(pm.response.text()).to.include(\":producedByAutomationRequest rdf:resource=\\\"\" + serverAddr + \"/AnacondaOSLC/services/Automation/A0/resources/automationRequests/\" + requestId);",
													"});",
													"",
													"pm.test(\"Check for the PIN error\", function () {",
													"    pm.expect(pm.response.text()).to.not.include(\"E:   The Operating System configuration prevents Pin from using the default (parent) injection mode.\");",
													"});",
													"",
													"pm.test(\"State should be complete\", function () {",
													"    pm.expect(pm.response.text()).to.include(\":state rdf:resource=\\\"http://open-services.net/ns/auto#complete\\\"/>\");",
													"});",
													"",
													"pm.test(\"Verdict should be error\", function () {",
													"    pm.expect(pm.response.text()).to.include(\":verdict rdf:resource=\\\"http://open-services.net/ns/auto#error\\\"/>\");",
													"});",
													"",
													"pm.test(\"Should contain the analysis log\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"Analysis Log\");",
													"});",
													"",
													"pm.test(\"Check analysis output\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"Specified console command not found.\");",
													"});",
													"",
													"pm.test(\"Should not contain the compilation log\", function () {",
													"    pm.expect(pm.response.text()).to.not.include(\"Compilation Log\");",
													"});",
													"",
													"pm.test(\"Should not contain the program fetching log\", function () {",
													"    pm.expect(pm.response.text()).to.not.include(\"Fetching Log\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "0e22f9d0-a6e8-43bc-8f87-b0861919c0de",
												"exec": [
													"// wait for the request execution to finish",
													" var result_wait_time = pm.variables.get('result_wait_time'); setTimeout(function(){}, [result_wait_time]);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{server_address}}/AnacondaOSLC/services/Automation/A0/resources/automationResults/{{requestId}}",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"AnacondaOSLC",
												"services",
												"Automation",
												"A0",
												"resources",
												"automationResults",
												"{{requestId}}"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "base64 string",
					"item": [
						{
							"name": "basic function",
							"item": [
								{
									"name": "start analysis",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "28eb1cf1-a957-444a-b541-0affedf688d7",
												"exec": [
													"// save the request ID as a global variable for later tests to use",
													"const response = xml2Json(pm.response.text());",
													"var resrouceAbout = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"].$[\"rdf:about\"];",
													"var resourceAboutSplit = resrouceAbout.split(\"/\");",
													"var resourceId = resourceAboutSplit[resourceAboutSplit.length-1];",
													"pm.globals.set('requestId', resourceId);",
													"",
													"pm.test(\"Response code should be 201 (created)\", function () {",
													"    pm.response.to.have.status(201);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "53694edb-628d-4044-b35a-1fec5eecd915",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/xml"
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>Test Request</dcterms:title>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{server_address}}/AnacondaOSLC/services/Automation/A0/resources/automationPlans/0\" />\n\t<dcterms:creator rdf:resource=\"https://pajda.fit.vutbr.cz/xvasic\"/>\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>Analyser</oslc:name>\n\t\t\t<rdf:value>atomrace</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>ProgramDefinition</oslc:name>\n\t\t\t<rdf:value>base64 string</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>Program</oslc:name>\n\t\t\t<rdf:value>I2luY2x1ZGUgPHN0ZGlvLmg+CgppbnQgbWFpbihpbnQgYXJnYywgY2hhcioqIGFyZ3YpCnsKCXByaW50ZigiJXNcbiIsIGFyZ3ZbMV0pOwoJcmV0dXJuIDA7Cn0K</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>CompilationParameters</oslc:name>\n\t\t\t<rdf:value>-g</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>ExecutionParameters</oslc:name>\n\t\t\t<rdf:value>\"Hello World!\"</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>"
										},
										"url": {
											"raw": "{{server_address}}/AnacondaOSLC/services/Automation/A0/resources/createAutomationRequest",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"AnacondaOSLC",
												"services",
												"Automation",
												"A0",
												"resources",
												"createAutomationRequest"
											]
										}
									},
									"response": []
								},
								{
									"name": "check the result",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2ac8143a-00b8-4352-9f49-a6cfaba6f982",
												"exec": [
													"var serverAddr = pm.variables.get(\"server_address\");",
													"var requestId = pm.globals.get('requestId');",
													"",
													"pm.test(\"Response code should be 200 (OK)\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Should be produced by the expected AutoRequest\", function () {",
													"    ",
													"    pm.expect(pm.response.text()).to.include(\":producedByAutomationRequest rdf:resource=\\\"\" + serverAddr + \"/AnacondaOSLC/services/Automation/A0/resources/automationRequests/\" + requestId);",
													"});",
													"",
													"pm.test(\"Check for the PIN error\", function () {",
													"    pm.expect(pm.response.text()).to.not.include(\"E:   The Operating System configuration prevents Pin from using the default (parent) injection mode.\");",
													"});",
													"",
													"pm.test(\"State should be complete\", function () {",
													"    pm.expect(pm.response.text()).to.include(\":state rdf:resource=\\\"http://open-services.net/ns/auto#complete\\\"/>\");",
													"});",
													"",
													"pm.test(\"Verdict should be passed\", function () {",
													"    pm.expect(pm.response.text()).to.include(\":verdict rdf:resource=\\\"http://open-services.net/ns/auto#passed\\\"/>\");",
													"});",
													"",
													"pm.test(\"Should contain the analysis log\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"Analysis Log\");",
													"});",
													"",
													"pm.test(\"Check analysis output\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"Hello World!\");",
													"});",
													"",
													"pm.test(\"Should contain the compilation log\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"Compilation Log\");",
													"});",
													"",
													"pm.test(\"Check compilation output\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"<rdf:value rdf:parseType=\\\"Literal\\\"></rdf:value>\");",
													"});",
													"",
													"pm.test(\"Should contain the program fetching log\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"Fetching Log\");",
													"});",
													"",
													"pm.test(\"Check program fetching output\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"<rdf:value rdf:parseType=\\\"Literal\\\"></rdf:value>\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "0e22f9d0-a6e8-43bc-8f87-b0861919c0de",
												"exec": [
													"// wait for the request execution to finish",
													" var result_wait_time = pm.variables.get('result_wait_time'); setTimeout(function(){}, [result_wait_time]);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{server_address}}/AnacondaOSLC/services/Automation/A0/resources/automationResults/{{requestId}}",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"AnacondaOSLC",
												"services",
												"Automation",
												"A0",
												"resources",
												"automationResults",
												"{{requestId}}"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "compilation error",
							"item": [
								{
									"name": "program with a syntax error",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "28eb1cf1-a957-444a-b541-0affedf688d7",
												"exec": [
													"// save the request ID as a global variable for later tests to use",
													"const response = xml2Json(pm.response.text());",
													"var resrouceAbout = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"].$[\"rdf:about\"];",
													"var resourceAboutSplit = resrouceAbout.split(\"/\");",
													"var resourceId = resourceAboutSplit[resourceAboutSplit.length-1];",
													"pm.globals.set('requestId', resourceId);",
													"",
													"var serverAddr = pm.variables.get(\"server_address\");",
													"",
													"pm.test(\"Response code should be 201 (created)\", function () {",
													"    pm.response.to.have.status(201);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/xml"
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>Test Request</dcterms:title>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{server_address}}/AnacondaOSLC/services/Automation/A0/resources/automationPlans/0\" />\n\t<dcterms:creator rdf:resource=\"https://pajda.fit.vutbr.cz/xvasic\"/>\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>Analyser</oslc:name>\n\t\t\t<rdf:value>event-printer</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>ProgramDefinition</oslc:name>\n\t\t\t<rdf:value>base64 string</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>Program</oslc:name>\n\t\t\t<rdf:value>I2luY2x1ZGUgPHN0ZGlvLmg+CgppbnQgbWFpbihpbnQgYXJnYywgY2hhcioqIGFyZ3YpCnsKCXByaW50ZigiJXNcbiIsIGFyZ3ZbMV0pCglyZXR1cm4gMDsKfQo=</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>CompilationParameters</oslc:name>\n\t\t\t<rdf:value></rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>ExecutionParameters</oslc:name>\n\t\t\t<rdf:value>\"Hello World!\"</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>"
										},
										"url": {
											"raw": "{{server_address}}/AnacondaOSLC/services/Automation/A0/resources/createAutomationRequest",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"AnacondaOSLC",
												"services",
												"Automation",
												"A0",
												"resources",
												"createAutomationRequest"
											]
										}
									},
									"response": []
								},
								{
									"name": "check the result error",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2ac8143a-00b8-4352-9f49-a6cfaba6f982",
												"exec": [
													"var serverAddr = pm.variables.get(\"server_address\");",
													"var requestId = pm.globals.get('requestId');",
													"",
													"pm.test(\"Response code should be 200 (OK)\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Should be produced by the expected AutoRequest\", function () {",
													"    ",
													"    pm.expect(pm.response.text()).to.include(\":producedByAutomationRequest rdf:resource=\\\"\" + serverAddr + \"/AnacondaOSLC/services/Automation/A0/resources/automationRequests/\" + requestId);",
													"});",
													"",
													"pm.test(\"Check for the PIN error\", function () {",
													"    pm.expect(pm.response.text()).to.not.include(\"E:   The Operating System configuration prevents Pin from using the default (parent) injection mode.\");",
													"});",
													"",
													"pm.test(\"State should be complete\", function () {",
													"    pm.expect(pm.response.text()).to.include(\":state rdf:resource=\\\"http://open-services.net/ns/auto#complete\\\"/>\");",
													"});",
													"",
													"pm.test(\"Verdict should be error\", function () {",
													"    pm.expect(pm.response.text()).to.include(\":verdict rdf:resource=\\\"http://open-services.net/ns/auto#error\\\"/>\");",
													"});",
													"",
													"pm.test(\"Should not contain the analysis log\", function () {",
													"    pm.expect(pm.response.text()).to.not.include(\"Analysis Log\");",
													"});",
													"",
													"pm.test(\"Should contain the compilation log\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"Compilation Log\");",
													"});",
													"",
													"pm.test(\"Check compilation output\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"error: expected ‘;’ before ‘return’\");",
													"});",
													"",
													"",
													"pm.test(\"Should contain the program fetching log\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"Fetching Log\");",
													"});",
													"",
													"pm.test(\"Check program fetching output\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"<rdf:value rdf:parseType=\\\"Literal\\\"></rdf:value>\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "0e22f9d0-a6e8-43bc-8f87-b0861919c0de",
												"exec": [
													"// wait for the request execution to finish",
													" var result_wait_time = pm.variables.get('result_wait_time'); setTimeout(function(){}, [result_wait_time]);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{server_address}}/AnacondaOSLC/services/Automation/A0/resources/automationResults/{{requestId}}",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"AnacondaOSLC",
												"services",
												"Automation",
												"A0",
												"resources",
												"automationResults",
												"{{requestId}}"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "filesystem path",
					"item": [
						{
							"name": "basic function",
							"item": [
								{
									"name": "start analysis",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "28eb1cf1-a957-444a-b541-0affedf688d7",
												"exec": [
													"// save the request ID as a global variable for later tests to use",
													"const response = xml2Json(pm.response.text());",
													"var resrouceAbout = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"].$[\"rdf:about\"];",
													"var resourceAboutSplit = resrouceAbout.split(\"/\");",
													"var resourceId = resourceAboutSplit[resourceAboutSplit.length-1];",
													"pm.globals.set('requestId', resourceId);",
													"",
													"pm.test(\"Response code should be 201 (created)\", function () {",
													"    pm.response.to.have.status(201);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "53694edb-628d-4044-b35a-1fec5eecd915",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/xml"
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>Test Request</dcterms:title>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{server_address}}/AnacondaOSLC/services/Automation/A0/resources/automationPlans/0\" />\n\t<dcterms:creator rdf:resource=\"https://pajda.fit.vutbr.cz/xvasic\"/>\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>Analyser</oslc:name>\n\t\t\t<rdf:value>atomrace</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>ProgramDefinition</oslc:name>\n\t\t\t<rdf:value>filesystem path</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>Program</oslc:name>\n\t\t\t<rdf:value>./tests/resources/TestEchoProgram.cpp</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>CompilationParameters</oslc:name>\n\t\t\t<rdf:value>-g</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>ExecutionParameters</oslc:name>\n\t\t\t<rdf:value>\"Hello World!\"</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>"
										},
										"url": {
											"raw": "{{server_address}}/AnacondaOSLC/services/Automation/A0/resources/createAutomationRequest",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"AnacondaOSLC",
												"services",
												"Automation",
												"A0",
												"resources",
												"createAutomationRequest"
											]
										}
									},
									"response": []
								},
								{
									"name": "check the result",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2ac8143a-00b8-4352-9f49-a6cfaba6f982",
												"exec": [
													"var serverAddr = pm.variables.get(\"server_address\");",
													"var requestId = pm.globals.get('requestId');",
													"",
													"pm.test(\"Response code should be 200 (OK)\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Should be produced by the expected AutoRequest\", function () {",
													"    ",
													"    pm.expect(pm.response.text()).to.include(\":producedByAutomationRequest rdf:resource=\\\"\" + serverAddr + \"/AnacondaOSLC/services/Automation/A0/resources/automationRequests/\" + requestId);",
													"});",
													"",
													"pm.test(\"Check for the PIN error\", function () {",
													"    pm.expect(pm.response.text()).to.not.include(\"E:   The Operating System configuration prevents Pin from using the default (parent) injection mode.\");",
													"});",
													"",
													"pm.test(\"State should be complete\", function () {",
													"    pm.expect(pm.response.text()).to.include(\":state rdf:resource=\\\"http://open-services.net/ns/auto#complete\\\"/>\");",
													"});",
													"",
													"pm.test(\"Verdict should be passed\", function () {",
													"    pm.expect(pm.response.text()).to.include(\":verdict rdf:resource=\\\"http://open-services.net/ns/auto#passed\\\"/>\");",
													"});",
													"",
													"pm.test(\"Should contain the analysis log\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"Analysis Log\");",
													"});",
													"",
													"pm.test(\"Check analysis output\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"Hello World!\");",
													"});",
													"",
													"pm.test(\"Should contain the compilation log\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"Compilation Log\");",
													"});",
													"",
													"pm.test(\"Check compilation output\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"<rdf:value rdf:parseType=\\\"Literal\\\"></rdf:value>\");",
													"});",
													"",
													"pm.test(\"Should contain the program fetching log\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"Fetching Log\");",
													"});",
													"",
													"pm.test(\"Check program fetching output\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"<rdf:value rdf:parseType=\\\"Literal\\\"></rdf:value>\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "0e22f9d0-a6e8-43bc-8f87-b0861919c0de",
												"exec": [
													"// wait for the request execution to finish",
													" var result_wait_time = pm.variables.get('result_wait_time'); setTimeout(function(){}, [result_wait_time]);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{server_address}}/AnacondaOSLC/services/Automation/A0/resources/automationResults/{{requestId}}",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"AnacondaOSLC",
												"services",
												"Automation",
												"A0",
												"resources",
												"automationResults",
												"{{requestId}}"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "compilation error",
							"item": [
								{
									"name": "program with a syntax error",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "28eb1cf1-a957-444a-b541-0affedf688d7",
												"exec": [
													"// save the request ID as a global variable for later tests to use",
													"const response = xml2Json(pm.response.text());",
													"var resrouceAbout = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"].$[\"rdf:about\"];",
													"var resourceAboutSplit = resrouceAbout.split(\"/\");",
													"var resourceId = resourceAboutSplit[resourceAboutSplit.length-1];",
													"pm.globals.set('requestId', resourceId);",
													"",
													"var serverAddr = pm.variables.get(\"server_address\");",
													"",
													"pm.test(\"Response code should be 201 (created)\", function () {",
													"    pm.response.to.have.status(201);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/xml"
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>Test Request</dcterms:title>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{server_address}}/AnacondaOSLC/services/Automation/A0/resources/automationPlans/0\" />\n\t<dcterms:creator rdf:resource=\"https://pajda.fit.vutbr.cz/xvasic\"/>\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>Analyser</oslc:name>\n\t\t\t<rdf:value>atomrace</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>ProgramDefinition</oslc:name>\n\t\t\t<rdf:value>filesystem path</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>Program</oslc:name>\n\t\t\t<rdf:value>./tests/resources/TestEchoProgramError.cpp</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>CompilationParameters</oslc:name>\n\t\t\t<rdf:value></rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>ExecutionParameters</oslc:name>\n\t\t\t<rdf:value>\"Hello World!\"</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>"
										},
										"url": {
											"raw": "{{server_address}}/AnacondaOSLC/services/Automation/A0/resources/createAutomationRequest",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"AnacondaOSLC",
												"services",
												"Automation",
												"A0",
												"resources",
												"createAutomationRequest"
											]
										}
									},
									"response": []
								},
								{
									"name": "check the result error",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2ac8143a-00b8-4352-9f49-a6cfaba6f982",
												"exec": [
													"var serverAddr = pm.variables.get(\"server_address\");",
													"var requestId = pm.globals.get('requestId');",
													"",
													"pm.test(\"Response code should be 200 (OK)\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Should be produced by the expected AutoRequest\", function () {",
													"    ",
													"    pm.expect(pm.response.text()).to.include(\":producedByAutomationRequest rdf:resource=\\\"\" + serverAddr + \"/AnacondaOSLC/services/Automation/A0/resources/automationRequests/\" + requestId);",
													"});",
													"",
													"pm.test(\"Check for the PIN error\", function () {",
													"    pm.expect(pm.response.text()).to.not.include(\"E:   The Operating System configuration prevents Pin from using the default (parent) injection mode.\");",
													"});",
													"",
													"pm.test(\"State should be complete\", function () {",
													"    pm.expect(pm.response.text()).to.include(\":state rdf:resource=\\\"http://open-services.net/ns/auto#complete\\\"/>\");",
													"});",
													"",
													"pm.test(\"Verdict should be error\", function () {",
													"    pm.expect(pm.response.text()).to.include(\":verdict rdf:resource=\\\"http://open-services.net/ns/auto#error\\\"/>\");",
													"});",
													"",
													"pm.test(\"Should not contain the analysis log\", function () {",
													"    pm.expect(pm.response.text()).to.not.include(\"Analysis Log\");",
													"});",
													"",
													"pm.test(\"Should contain the compilation log\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"Compilation Log\");",
													"});",
													"",
													"pm.test(\"Check compilation output\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"error: expected ‘;’ before ‘return’\");",
													"});",
													"",
													"",
													"pm.test(\"Should contain the program fetching log\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"Fetching Log\");",
													"});",
													"",
													"pm.test(\"Check program fetching output\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"<rdf:value rdf:parseType=\\\"Literal\\\"></rdf:value>\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "0e22f9d0-a6e8-43bc-8f87-b0861919c0de",
												"exec": [
													"// wait for the request execution to finish",
													" var result_wait_time = pm.variables.get('result_wait_time'); setTimeout(function(){}, [result_wait_time]);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{server_address}}/AnacondaOSLC/services/Automation/A0/resources/automationResults/{{requestId}}",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"AnacondaOSLC",
												"services",
												"Automation",
												"A0",
												"resources",
												"automationResults",
												"{{requestId}}"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "file not found error",
							"item": [
								{
									"name": "non existent file",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "28eb1cf1-a957-444a-b541-0affedf688d7",
												"exec": [
													"// save the request ID as a global variable for later tests to use",
													"const response = xml2Json(pm.response.text());",
													"var resrouceAbout = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"].$[\"rdf:about\"];",
													"var resourceAboutSplit = resrouceAbout.split(\"/\");",
													"var resourceId = resourceAboutSplit[resourceAboutSplit.length-1];",
													"pm.globals.set('requestId', resourceId);",
													"",
													"var serverAddr = pm.variables.get(\"server_address\");",
													"",
													"pm.test(\"Response code should be 201 (created)\", function () {",
													"    pm.response.to.have.status(201);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/xml"
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>Test Request</dcterms:title>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{server_address}}/AnacondaOSLC/services/Automation/A0/resources/automationPlans/0\" />\n\t<dcterms:creator rdf:resource=\"https://pajda.fit.vutbr.cz/xvasic\"/>\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>Analyser</oslc:name>\n\t\t\t<rdf:value>atomrace</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>ProgramDefinition</oslc:name>\n\t\t\t<rdf:value>filesystem path</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>Program</oslc:name>\n\t\t\t<rdf:value>./tests/resources/NonExistentFile</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>CompilationParameters</oslc:name>\n\t\t\t<rdf:value></rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>ExecutionParameters</oslc:name>\n\t\t\t<rdf:value>\"Hello World!\"</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>"
										},
										"url": {
											"raw": "{{server_address}}/AnacondaOSLC/services/Automation/A0/resources/createAutomationRequest",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"AnacondaOSLC",
												"services",
												"Automation",
												"A0",
												"resources",
												"createAutomationRequest"
											]
										}
									},
									"response": []
								},
								{
									"name": "check the result error",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2ac8143a-00b8-4352-9f49-a6cfaba6f982",
												"exec": [
													"var serverAddr = pm.variables.get(\"server_address\");",
													"var requestId = pm.globals.get('requestId');",
													"",
													"pm.test(\"Response code should be 200 (OK)\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Should be produced by the expected AutoRequest\", function () {",
													"    ",
													"    pm.expect(pm.response.text()).to.include(\":producedByAutomationRequest rdf:resource=\\\"\" + serverAddr + \"/AnacondaOSLC/services/Automation/A0/resources/automationRequests/\" + requestId);",
													"});",
													"",
													"pm.test(\"Check for the PIN error\", function () {",
													"    pm.expect(pm.response.text()).to.not.include(\"E:   The Operating System configuration prevents Pin from using the default (parent) injection mode.\");",
													"});",
													"",
													"pm.test(\"State should be complete\", function () {",
													"    pm.expect(pm.response.text()).to.include(\":state rdf:resource=\\\"http://open-services.net/ns/auto#complete\\\"/>\");",
													"});",
													"",
													"pm.test(\"Verdict should be error\", function () {",
													"    pm.expect(pm.response.text()).to.include(\":verdict rdf:resource=\\\"http://open-services.net/ns/auto#error\\\"/>\");",
													"});",
													"",
													"pm.test(\"Should not contain the analysis log\", function () {",
													"    pm.expect(pm.response.text()).to.not.include(\"Analysis Log\");",
													"});",
													"",
													"pm.test(\"Should not contain the compilation log\", function () {",
													"    pm.expect(pm.response.text()).to.not.include(\"Compilation Log\");",
													"});",
													"",
													"pm.test(\"Should contain the program fetching log\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"Fetching Log\");",
													"});",
													"",
													"pm.test(\"Check program fetching output\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"./tests/resources/NonExistentFile (No such file or directory)\");",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "0e22f9d0-a6e8-43bc-8f87-b0861919c0de",
												"exec": [
													"// wait for the request execution to finish",
													" var result_wait_time = pm.variables.get('result_wait_time'); setTimeout(function(){}, [result_wait_time]);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{server_address}}/AnacondaOSLC/services/Automation/A0/resources/automationResults/{{requestId}}",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"AnacondaOSLC",
												"services",
												"Automation",
												"A0",
												"resources",
												"automationResults",
												"{{requestId}}"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "cc1a278c-82a0-45d1-a60d-a764aa709b78",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "ccf63fc5-a3f5-400f-aec6-a24c12e4ddb0",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "8de0b840-ed3f-4134-b0b6-a207af3cb243",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "5a4dd37a-ffd0-4a3e-8801-381b2a805da2",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "url download",
					"item": [
						{
							"name": "basic function",
							"item": [
								{
									"name": "start analysis",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "28eb1cf1-a957-444a-b541-0affedf688d7",
												"exec": [
													"// save the request ID as a global variable for later tests to use",
													"const response = xml2Json(pm.response.text());",
													"var resrouceAbout = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"].$[\"rdf:about\"];",
													"var resourceAboutSplit = resrouceAbout.split(\"/\");",
													"var resourceId = resourceAboutSplit[resourceAboutSplit.length-1];",
													"pm.globals.set('requestId', resourceId);",
													"",
													"pm.test(\"Response code should be 201 (created)\", function () {",
													"    pm.response.to.have.status(201);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "53694edb-628d-4044-b35a-1fec5eecd915",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/xml"
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>Test Request</dcterms:title>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{server_address}}/AnacondaOSLC/services/Automation/A0/resources/automationPlans/0\" />\n\t<dcterms:creator rdf:resource=\"https://pajda.fit.vutbr.cz/xvasic\"/>\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>Analyser</oslc:name>\n\t\t\t<rdf:value>atomrace</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>ProgramDefinition</oslc:name>\n\t\t\t<rdf:value>url download</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>Program</oslc:name>\n\t\t\t<rdf:value>http://www.stud.fit.vutbr.cz/~xvasic25/TestEchoProgram.cpp</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>CompilationParameters</oslc:name>\n\t\t\t<rdf:value>-g</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>ExecutionParameters</oslc:name>\n\t\t\t<rdf:value>\"Hello World!\"</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>"
										},
										"url": {
											"raw": "{{server_address}}/AnacondaOSLC/services/Automation/A0/resources/createAutomationRequest",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"AnacondaOSLC",
												"services",
												"Automation",
												"A0",
												"resources",
												"createAutomationRequest"
											]
										}
									},
									"response": []
								},
								{
									"name": "check the result",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2ac8143a-00b8-4352-9f49-a6cfaba6f982",
												"exec": [
													"var serverAddr = pm.variables.get(\"server_address\");",
													"var requestId = pm.globals.get('requestId');",
													"",
													"pm.test(\"Response code should be 200 (OK)\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Should be produced by the expected AutoRequest\", function () {",
													"    ",
													"    pm.expect(pm.response.text()).to.include(\":producedByAutomationRequest rdf:resource=\\\"\" + serverAddr + \"/AnacondaOSLC/services/Automation/A0/resources/automationRequests/\" + requestId);",
													"});",
													"",
													"pm.test(\"Check for the PIN error\", function () {",
													"    pm.expect(pm.response.text()).to.not.include(\"E:   The Operating System configuration prevents Pin from using the default (parent) injection mode.\");",
													"});",
													"",
													"pm.test(\"State should be complete\", function () {",
													"    pm.expect(pm.response.text()).to.include(\":state rdf:resource=\\\"http://open-services.net/ns/auto#complete\\\"/>\");",
													"});",
													"",
													"pm.test(\"Verdict should be passed\", function () {",
													"    pm.expect(pm.response.text()).to.include(\":verdict rdf:resource=\\\"http://open-services.net/ns/auto#passed\\\"/>\");",
													"});",
													"",
													"pm.test(\"Should contain the analysis log\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"Analysis Log\");",
													"});",
													"",
													"pm.test(\"Check analysis output\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"Hello World!\");",
													"});",
													"",
													"pm.test(\"Should contain the compilation log\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"Compilation Log\");",
													"});",
													"",
													"pm.test(\"Check compilation output\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"<rdf:value rdf:parseType=\\\"Literal\\\"></rdf:value>\");",
													"})",
													"",
													"pm.test(\"Should contain the program fetching log\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"Fetching Log\");",
													"});",
													"",
													"pm.test(\"Check program fetching output\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"<rdf:value rdf:parseType=\\\"Literal\\\"></rdf:value>\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "0e22f9d0-a6e8-43bc-8f87-b0861919c0de",
												"exec": [
													"// wait for the request execution to finish",
													"var result_wait_time = pm.variables.get('result_wait_time');",
													"setTimeout(function(){}, [result_wait_time]);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{server_address}}/AnacondaOSLC/services/Automation/A0/resources/automationResults/{{requestId}}",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"AnacondaOSLC",
												"services",
												"Automation",
												"A0",
												"resources",
												"automationResults",
												"{{requestId}}"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "compilation error",
							"item": [
								{
									"name": "program with a syntax error",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "28eb1cf1-a957-444a-b541-0affedf688d7",
												"exec": [
													"// save the request ID as a global variable for later tests to use",
													"const response = xml2Json(pm.response.text());",
													"var resrouceAbout = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"].$[\"rdf:about\"];",
													"var resourceAboutSplit = resrouceAbout.split(\"/\");",
													"var resourceId = resourceAboutSplit[resourceAboutSplit.length-1];",
													"pm.globals.set('requestId', resourceId);",
													"",
													"var serverAddr = pm.variables.get(\"server_address\");",
													"",
													"pm.test(\"Response code should be 201 (created)\", function () {",
													"    pm.response.to.have.status(201);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/xml"
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>Test Request</dcterms:title>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{server_address}}/AnacondaOSLC/services/Automation/A0/resources/automationPlans/0\" />\n\t<dcterms:creator rdf:resource=\"https://pajda.fit.vutbr.cz/xvasic\"/>\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>Analyser</oslc:name>\n\t\t\t<rdf:value>atomrace</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>ProgramDefinition</oslc:name>\n\t\t\t<rdf:value>url download</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>Program</oslc:name>\n\t\t\t<rdf:value>http://www.stud.fit.vutbr.cz/~xvasic25/TestEchoProgramError.cpp</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>CompilationParameters</oslc:name>\n\t\t\t<rdf:value></rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>ExecutionParameters</oslc:name>\n\t\t\t<rdf:value>\"Hello World!\"</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>"
										},
										"url": {
											"raw": "{{server_address}}/AnacondaOSLC/services/Automation/A0/resources/createAutomationRequest",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"AnacondaOSLC",
												"services",
												"Automation",
												"A0",
												"resources",
												"createAutomationRequest"
											]
										}
									},
									"response": []
								},
								{
									"name": "check the result error",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2ac8143a-00b8-4352-9f49-a6cfaba6f982",
												"exec": [
													"var serverAddr = pm.variables.get(\"server_address\");",
													"var requestId = pm.globals.get('requestId');",
													"",
													"pm.test(\"Response code should be 200 (OK)\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Should be produced by the expected AutoRequest\", function () {",
													"    ",
													"    pm.expect(pm.response.text()).to.include(\":producedByAutomationRequest rdf:resource=\\\"\" + serverAddr + \"/AnacondaOSLC/services/Automation/A0/resources/automationRequests/\" + requestId);",
													"});",
													"",
													"pm.test(\"Check for the PIN error\", function () {",
													"    pm.expect(pm.response.text()).to.not.include(\"E:   The Operating System configuration prevents Pin from using the default (parent) injection mode.\");",
													"});",
													"",
													"pm.test(\"State should be complete\", function () {",
													"    pm.expect(pm.response.text()).to.include(\":state rdf:resource=\\\"http://open-services.net/ns/auto#complete\\\"/>\");",
													"});",
													"",
													"pm.test(\"Verdict should be error\", function () {",
													"    pm.expect(pm.response.text()).to.include(\":verdict rdf:resource=\\\"http://open-services.net/ns/auto#error\\\"/>\");",
													"});",
													"",
													"pm.test(\"Should not contain the analysis log\", function () {",
													"    pm.expect(pm.response.text()).to.not.include(\"Analysis Log\");",
													"});",
													"",
													"pm.test(\"Should contain the compilation log\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"Compilation Log\");",
													"});",
													"",
													"pm.test(\"Check compilation output\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"error: expected ‘;’ before ‘return’\");",
													"});",
													"",
													"pm.test(\"Should contain the program fetching log\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"Fetching Log\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "0e22f9d0-a6e8-43bc-8f87-b0861919c0de",
												"exec": [
													"// wait for the request execution to finish",
													" var result_wait_time = pm.variables.get('result_wait_time'); setTimeout(function(){}, [result_wait_time]);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{server_address}}/AnacondaOSLC/services/Automation/A0/resources/automationResults/{{requestId}}",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"AnacondaOSLC",
												"services",
												"Automation",
												"A0",
												"resources",
												"automationResults",
												"{{requestId}}"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "file not found error",
							"item": [
								{
									"name": "non existent file",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "28eb1cf1-a957-444a-b541-0affedf688d7",
												"exec": [
													"// save the request ID as a global variable for later tests to use",
													"const response = xml2Json(pm.response.text());",
													"var resrouceAbout = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"].$[\"rdf:about\"];",
													"var resourceAboutSplit = resrouceAbout.split(\"/\");",
													"var resourceId = resourceAboutSplit[resourceAboutSplit.length-1];",
													"pm.globals.set('requestId', resourceId);",
													"",
													"var serverAddr = pm.variables.get(\"server_address\");",
													"",
													"pm.test(\"Response code should be 201 (created)\", function () {",
													"    pm.response.to.have.status(201);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/xml"
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>Test Request</dcterms:title>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{server_address}}/AnacondaOSLC/services/Automation/A0/resources/automationPlans/0\" />\n\t<dcterms:creator rdf:resource=\"https://pajda.fit.vutbr.cz/xvasic\"/>\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>Analyser</oslc:name>\n\t\t\t<rdf:value>atomrace</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>ProgramDefinition</oslc:name>\n\t\t\t<rdf:value>url download</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>Program</oslc:name>\n\t\t\t<rdf:value>http://www.stud.fit.vutbr.cz/~xvasic25/NonExistentFile</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>CompilationParameters</oslc:name>\n\t\t\t<rdf:value></rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>ExecutionParameters</oslc:name>\n\t\t\t<rdf:value>\"Hello World!\"</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>"
										},
										"url": {
											"raw": "{{server_address}}/AnacondaOSLC/services/Automation/A0/resources/createAutomationRequest",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"AnacondaOSLC",
												"services",
												"Automation",
												"A0",
												"resources",
												"createAutomationRequest"
											]
										}
									},
									"response": []
								},
								{
									"name": "check the result error",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2ac8143a-00b8-4352-9f49-a6cfaba6f982",
												"exec": [
													"var serverAddr = pm.variables.get(\"server_address\");",
													"var requestId = pm.globals.get('requestId');",
													"",
													"pm.test(\"Response code should be 200 (OK)\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Should be produced by the expected AutoRequest\", function () {",
													"    ",
													"    pm.expect(pm.response.text()).to.include(\":producedByAutomationRequest rdf:resource=\\\"\" + serverAddr + \"/AnacondaOSLC/services/Automation/A0/resources/automationRequests/\" + requestId);",
													"});",
													"",
													"pm.test(\"Check for the PIN error\", function () {",
													"    pm.expect(pm.response.text()).to.not.include(\"E:   The Operating System configuration prevents Pin from using the default (parent) injection mode.\");",
													"});",
													"",
													"pm.test(\"State should be complete\", function () {",
													"    pm.expect(pm.response.text()).to.include(\":state rdf:resource=\\\"http://open-services.net/ns/auto#complete\\\"/>\");",
													"});",
													"",
													"pm.test(\"Verdict should be error\", function () {",
													"    pm.expect(pm.response.text()).to.include(\":verdict rdf:resource=\\\"http://open-services.net/ns/auto#error\\\"/>\");",
													"});",
													"",
													"pm.test(\"Should not contain the analysis log\", function () {",
													"    pm.expect(pm.response.text()).to.not.include(\"Analysis Log\");",
													"});",
													"",
													"pm.test(\"Should not contain the compilation log\", function () {",
													"    pm.expect(pm.response.text()).to.not.include(\"Compilation Log\");",
													"});",
													"",
													"pm.test(\"Should contain the program fetching log\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"Fetching Log\");",
													"});",
													"",
													"pm.test(\"Check program fetching output\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"File download failed: \");",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "0e22f9d0-a6e8-43bc-8f87-b0861919c0de",
												"exec": [
													"// wait for the request execution to finish",
													" var result_wait_time = pm.variables.get('result_wait_time'); setTimeout(function(){}, [result_wait_time]);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{server_address}}/AnacondaOSLC/services/Automation/A0/resources/automationResults/{{requestId}}",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"AnacondaOSLC",
												"services",
												"Automation",
												"A0",
												"resources",
												"automationResults",
												"{{requestId}}"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "cc1a278c-82a0-45d1-a60d-a764aa709b78",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "ccf63fc5-a3f5-400f-aec6-a24c12e4ddb0",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "server unreachable error",
							"item": [
								{
									"name": "unreachable server",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "28eb1cf1-a957-444a-b541-0affedf688d7",
												"exec": [
													"// save the request ID as a global variable for later tests to use",
													"const response = xml2Json(pm.response.text());",
													"var resrouceAbout = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"].$[\"rdf:about\"];",
													"var resourceAboutSplit = resrouceAbout.split(\"/\");",
													"var resourceId = resourceAboutSplit[resourceAboutSplit.length-1];",
													"pm.globals.set('requestId', resourceId);",
													"",
													"var serverAddr = pm.variables.get(\"server_address\");",
													"",
													"pm.test(\"Response code should be 201 (created)\", function () {",
													"    pm.response.to.have.status(201);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/xml"
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>Test Request</dcterms:title>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{server_address}}/AnacondaOSLC/services/Automation/A0/resources/automationPlans/0\" />\n\t<dcterms:creator rdf:resource=\"https://pajda.fit.vutbr.cz/xvasic\"/>\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>Analyser</oslc:name>\n\t\t\t<rdf:value>atomrace</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>ProgramDefinition</oslc:name>\n\t\t\t<rdf:value>url download</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>Program</oslc:name>\n\t\t\t<rdf:value>http://www.UnreachableServerXXasdfasdfagwer.cz</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>CompilationParameters</oslc:name>\n\t\t\t<rdf:value></rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>ExecutionParameters</oslc:name>\n\t\t\t<rdf:value>\"Hello World!\"</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>"
										},
										"url": {
											"raw": "{{server_address}}/AnacondaOSLC/services/Automation/A0/resources/createAutomationRequest",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"AnacondaOSLC",
												"services",
												"Automation",
												"A0",
												"resources",
												"createAutomationRequest"
											]
										}
									},
									"response": []
								},
								{
									"name": "check the result error",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2ac8143a-00b8-4352-9f49-a6cfaba6f982",
												"exec": [
													"var serverAddr = pm.variables.get(\"server_address\");",
													"var requestId = pm.globals.get('requestId');",
													"",
													"pm.test(\"Response code should be 200 (OK)\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Should be produced by the expected AutoRequest\", function () {",
													"    ",
													"    pm.expect(pm.response.text()).to.include(\":producedByAutomationRequest rdf:resource=\\\"\" + serverAddr + \"/AnacondaOSLC/services/Automation/A0/resources/automationRequests/\" + requestId);",
													"});",
													"",
													"pm.test(\"Check for the PIN error\", function () {",
													"    pm.expect(pm.response.text()).to.not.include(\"E:   The Operating System configuration prevents Pin from using the default (parent) injection mode.\");",
													"});",
													"",
													"pm.test(\"State should be complete\", function () {",
													"    pm.expect(pm.response.text()).to.include(\":state rdf:resource=\\\"http://open-services.net/ns/auto#complete\\\"/>\");",
													"});",
													"",
													"pm.test(\"Verdict should be error\", function () {",
													"    pm.expect(pm.response.text()).to.include(\":verdict rdf:resource=\\\"http://open-services.net/ns/auto#error\\\"/>\");",
													"});",
													"",
													"pm.test(\"Should not contain the analysis log\", function () {",
													"    pm.expect(pm.response.text()).to.not.include(\"Analysis Log\");",
													"});",
													"",
													"pm.test(\"Should not contain the compilation log\", function () {",
													"    pm.expect(pm.response.text()).to.not.include(\"Compilation Log\");",
													"});",
													"",
													"pm.test(\"Should contain the program fetching log\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"Fetching Log\");",
													"});",
													"",
													"pm.test(\"Check program fetching output\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"Unknown host or host unreachable:\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "0e22f9d0-a6e8-43bc-8f87-b0861919c0de",
												"exec": [
													"// wait for the request execution to finish",
													" var result_wait_time = pm.variables.get('result_wait_time'); setTimeout(function(){}, [result_wait_time]);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{server_address}}/AnacondaOSLC/services/Automation/A0/resources/automationResults/{{requestId}}",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"AnacondaOSLC",
												"services",
												"Automation",
												"A0",
												"resources",
												"automationResults",
												"{{requestId}}"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "cc1a278c-82a0-45d1-a60d-a764aa709b78",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "ccf63fc5-a3f5-400f-aec6-a24c12e4ddb0",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "8de0b840-ed3f-4134-b0b6-a207af3cb243",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "5a4dd37a-ffd0-4a3e-8801-381b2a805da2",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "82165468-821b-43c9-a083-7db86b5abe8f",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "fe116260-53f4-44e4-9180-7f288ccc399e",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Query Capability",
			"item": [
				{
					"name": "Query parameters",
					"item": [
						{
							"name": "limit",
							"item": [
								{
									"name": "query no limit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0a881f7a-ec3c-438d-b7bc-4b56f2a65370",
												"exec": [
													"var requestId = pm.globals.get('requestId');",
													"",
													"pm.test(\"Response code should be 200 (OK)\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Check the query result\", function () {",
													"    pm.expect(pm.response.text()).to.not.include(\">0</oslc:totalCount>\");",
													"    pm.expect(pm.response.text()).to.not.include(\">1</oslc:totalCount>\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/rdf+xml",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://localhost:8080/AnacondaOSLC/services/Automation/A0/resources/queryAutomationResult",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"AnacondaOSLC",
												"services",
												"Automation",
												"A0",
												"resources",
												"queryAutomationResult"
											]
										}
									},
									"response": []
								},
								{
									"name": "query with limit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0a881f7a-ec3c-438d-b7bc-4b56f2a65370",
												"exec": [
													"var requestId = pm.globals.get('requestId');",
													"",
													"pm.test(\"Response code should be 200 (OK)\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Check the query result\", function () {",
													"    pm.expect(pm.response.text()).to.include(\">1</oslc:totalCount>\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://localhost:8080/AnacondaOSLC/services/Automation/A0/resources/queryAutomationResult?limit=1",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"AnacondaOSLC",
												"services",
												"Automation",
												"A0",
												"resources",
												"queryAutomationResult"
											],
											"query": [
												{
													"key": "limit",
													"value": "1"
												}
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "page",
							"item": [
								{
									"name": "query no page",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0a881f7a-ec3c-438d-b7bc-4b56f2a65370",
												"exec": [
													"var requestId = pm.globals.get('requestId');",
													"",
													"pm.test(\"Response code should be 200 (OK)\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Check the query result\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"<dcterms:identifier>0</dcterms:identifier>\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://localhost:8080/AnacondaOSLC/services/Automation/A0/resources/queryAutomationResult",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"AnacondaOSLC",
												"services",
												"Automation",
												"A0",
												"resources",
												"queryAutomationResult"
											]
										}
									},
									"response": []
								},
								{
									"name": "query with page",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0a881f7a-ec3c-438d-b7bc-4b56f2a65370",
												"exec": [
													"var requestId = pm.globals.get('requestId');",
													"",
													"pm.test(\"Response code should be 200 (OK)\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Check the query result\", function () {",
													"    pm.expect(pm.response.text()).to.not.include(\"<dcterms:identifier>0</dcterms:identifier>\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://localhost:8080/AnacondaOSLC/services/Automation/A0/resources/queryAutomationResult?page=1",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"AnacondaOSLC",
												"services",
												"Automation",
												"A0",
												"resources",
												"queryAutomationResult"
											],
											"query": [
												{
													"key": "page",
													"value": "1"
												}
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "searchTerms",
							"item": [
								{
									"name": "query with searchTerms",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0a881f7a-ec3c-438d-b7bc-4b56f2a65370",
												"exec": [
													"pm.test(\"Response code should be 200 (OK)\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Check the query result\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"Analyser\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/rdf+xml",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://localhost:8080/AnacondaOSLC/services/Automation/A0/resources/queryParameterDefinition?oslc.searchTerms=Analyser",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"AnacondaOSLC",
												"services",
												"Automation",
												"A0",
												"resources",
												"queryParameterDefinition"
											],
											"query": [
												{
													"key": "oslc.searchTerms",
													"value": "Analyser"
												}
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "where",
							"item": [
								{
									"name": "query with where",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0a881f7a-ec3c-438d-b7bc-4b56f2a65370",
												"exec": [
													"pm.test(\"Response code should be 200 (OK)\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Check the query result\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"Run Analysis of a Single File Program\");",
													"    pm.expect(pm.response.text()).to.include(\"<dcterms:identifier>0</dcterms:identifier>\");",
													"    pm.expect(pm.response.text()).to.include(\">1</oslc:totalCount>\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://localhost:8080/AnacondaOSLC/services/Automation/A0/resources/queryAutomationPlan?oslc.prefix=dcterms=<http://purl.org/dc/terms/>&oslc.where=dcterms:identifier=\"0\"",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"AnacondaOSLC",
												"services",
												"Automation",
												"A0",
												"resources",
												"queryAutomationPlan"
											],
											"query": [
												{
													"key": "oslc.prefix",
													"value": "dcterms=<http://purl.org/dc/terms/>"
												},
												{
													"key": "oslc.where",
													"value": "dcterms:identifier=\"0\""
												}
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "query AutomationPlans",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0a881f7a-ec3c-438d-b7bc-4b56f2a65370",
								"exec": [
									"pm.test(\"Response code should be 200 (OK)\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check the query result\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Run Analysis of a Single File Program\");",
									"    pm.expect(pm.response.text()).to.include(\"<dcterms:identifier>0</dcterms:identifier>\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/rdf+xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:8080/AnacondaOSLC/services/Automation/A0/resources/queryAutomationPlan?",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"AnacondaOSLC",
								"services",
								"Automation",
								"A0",
								"resources",
								"queryAutomationPlan"
							],
							"query": [
								{
									"key": "oslc.prefix",
									"value": "dcterms=<http://purl.org/dc/terms/>",
									"disabled": true
								},
								{
									"key": "oslc.where",
									"value": "dcterms:identifier=\"0\"",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "query ParameterDefinitions",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0a881f7a-ec3c-438d-b7bc-4b56f2a65370",
								"exec": [
									"var requestId = pm.globals.get('requestId');",
									"",
									"pm.test(\"Response code should be 200 (OK)\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check the query result\", function () {",
									"    pm.expect(pm.response.text()).to.not.include(\">0</oslc:totalCount>\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/rdf+xml",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:8080/AnacondaOSLC/services/Automation/A0/resources/queryParameterDefinition",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"AnacondaOSLC",
								"services",
								"Automation",
								"A0",
								"resources",
								"queryParameterDefinition"
							]
						}
					},
					"response": []
				},
				{
					"name": "query AutomationRequests",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0a881f7a-ec3c-438d-b7bc-4b56f2a65370",
								"exec": [
									"var requestId = pm.globals.get('requestId');",
									"",
									"pm.test(\"Response code should be 200 (OK)\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check the query result\", function () {",
									"    pm.expect(pm.response.text()).to.not.include(\">0</oslc:totalCount>\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/rdf+xml",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:8080/AnacondaOSLC/services/Automation/A0/resources/queryAutomationRequest",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"AnacondaOSLC",
								"services",
								"Automation",
								"A0",
								"resources",
								"queryAutomationRequest"
							]
						}
					},
					"response": []
				},
				{
					"name": "query AutomationResults",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0a881f7a-ec3c-438d-b7bc-4b56f2a65370",
								"exec": [
									"var requestId = pm.globals.get('requestId');",
									"",
									"pm.test(\"Response code should be 200 (OK)\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check the query result\", function () {",
									"    pm.expect(pm.response.text()).to.not.include(\">0</oslc:totalCount>\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/rdf+xml",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:8080/AnacondaOSLC/services/Automation/A0/resources/queryAutomationResult",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"AnacondaOSLC",
								"services",
								"Automation",
								"A0",
								"resources",
								"queryAutomationResult"
							]
						}
					},
					"response": []
				},
				{
					"name": "query ParameterInstances",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0a881f7a-ec3c-438d-b7bc-4b56f2a65370",
								"exec": [
									"var requestId = pm.globals.get('requestId');",
									"",
									"pm.test(\"Response code should be 200 (OK)\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check the query result\", function () {",
									"    pm.expect(pm.response.text()).to.not.include(\">0</oslc:totalCount>\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/rdf+xml",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:8080/AnacondaOSLC/services/Automation/A0/resources/queryParameterInstance",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"AnacondaOSLC",
								"services",
								"Automation",
								"A0",
								"resources",
								"queryParameterInstance"
							]
						}
					},
					"response": []
				},
				{
					"name": "query OutputLogs",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0a881f7a-ec3c-438d-b7bc-4b56f2a65370",
								"exec": [
									"var requestId = pm.globals.get('requestId');",
									"",
									"pm.test(\"Response code should be 200 (OK)\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check the query result\", function () {",
									"    pm.expect(pm.response.text()).to.not.include(\">0</oslc:totalCount>\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/rdf+xml",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:8080/AnacondaOSLC/services/Automation/A0/resources/queryOutputLog",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"AnacondaOSLC",
								"services",
								"Automation",
								"A0",
								"resources",
								"queryOutputLog"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "AutomationResult Update and Delete",
			"item": [
				{
					"name": "update",
					"item": [
						{
							"name": "run analysis to produce a result",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "28eb1cf1-a957-444a-b541-0affedf688d7",
										"exec": [
											"// save the request ID as a global variable for later tests to use",
											"const response = xml2Json(pm.response.text());",
											"var resrouceAbout = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"].$[\"rdf:about\"];",
											"var resourceAboutSplit = resrouceAbout.split(\"/\");",
											"var resourceId = resourceAboutSplit[resourceAboutSplit.length-1];",
											"pm.globals.set('requestId', resourceId);",
											"",
											"pm.test(\"Response code should be 201 (created)\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "53694edb-628d-4044-b35a-1fec5eecd915",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/xml"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>Test Request</dcterms:title>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{server_address}}/AnacondaOSLC/services/Automation/A0/resources/automationPlans/0\" />\n\t<dcterms:creator rdf:resource=\"https://pajda.fit.vutbr.cz/xvasic\"/>\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>Analyser</oslc:name>\n\t\t\t<rdf:value>event-printer</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>ProgramDefinition</oslc:name>\n\t\t\t<rdf:value>console command</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>Program</oslc:name>\n\t\t\t<rdf:value>echo</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>CompilationParameters</oslc:name>\n\t\t\t<rdf:value></rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>ExecutionParameters</oslc:name>\n\t\t\t<rdf:value>\"Hello World!\"</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>"
								},
								"url": {
									"raw": "{{server_address}}/AnacondaOSLC/services/Automation/A0/resources/createAutomationRequest",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"AnacondaOSLC",
										"services",
										"Automation",
										"A0",
										"resources",
										"createAutomationRequest"
									]
								}
							},
							"response": []
						},
						{
							"name": "get the analysis result",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2ac8143a-00b8-4352-9f49-a6cfaba6f982",
										"exec": [
											"pm.test(\"Response code should be 200 (OK)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check the title\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:title rdf:parseType=\\\"Literal\\\">Result - Test Request</dcterms:title>\");",
											"});",
											"",
											"pm.test(\"Check the updated contribution\", function () {",
											"    pm.expect(pm.response.text()).to.not.include(\"<dcterms:title rdf:parseType=\\\"Literal\\\">Later update Log</dcterms:title>\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "0e22f9d0-a6e8-43bc-8f87-b0861919c0de",
										"exec": [
											"var result_wait_time = pm.variables.get('result_wait_time');",
											"setTimeout(function(){}, [result_wait_time]);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{server_address}}/AnacondaOSLC/services/Automation/A0/resources/automationResults/{{requestId}}",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"AnacondaOSLC",
										"services",
										"Automation",
										"A0",
										"resources",
										"automationResults",
										"{{requestId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update the result",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "28eb1cf1-a957-444a-b541-0affedf688d7",
										"exec": [
											"pm.test(\"Response code should be 200 (OK)\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "53694edb-628d-4044-b35a-1fec5eecd915",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/xml"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<rdf:RDF\n    xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n    xmlns:dcterms=\"http://purl.org/dc/terms/\"\n    xmlns:oslc_data=\"http://open-services.net/ns/servicemanagement/1.0/\"\n    xmlns:anaconda=\"http://anaconda.verifit/ns/anaconda#\"\n    xmlns:oslc=\"http://open-services.net/ns/core#\"\n    xmlns:foaf=\"http://xmlns.com/foaf/0.1/#\"\n    xmlns:rdfs=\"http://www.w3.org/2000/01/rdf-schema#\"\n    xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n    <oslc_auto:AutomationResult rdf:about=\"http://localhost:8080/AnacondaOSLC/services/Automation/A0/resources/automationResults/23\">\n    \t\n        <dcterms:title rdf:parseType=\"Literal\">Result - Test Request - updated</dcterms:title>\n        \n        <oslc_auto:contribution>\n            <anaconda:OutputLog rdf:about=\"http://localhost:8080/AnacondaOSLC/services/Automation/A0/resources/outputLogs/23-1\">\n                <dcterms:type>http://purl.org/dc/dcmitype/Text</dcterms:type>\n                <rdf:value rdf:parseType=\"Literal\">New updated contribution</rdf:value>\n                <dcterms:created rdf:datatype=\"http://www.w3.org/2001/XMLSchema#dateTime\">2019-04-13T12:23:36.615Z</dcterms:created>\n                <dcterms:title rdf:parseType=\"Literal\">Later update Log</dcterms:title>\n            </anaconda:OutputLog>\n        </oslc_auto:contribution>\n        \n        <oslc_auto:inputParameter>\n            <oslc_auto:ParameterInstance rdf:about=\"http://localhost:8080/AnacondaOSLC/services/Automation/A0/resources/parameterInstances/23-2\">\n                <rdf:value rdf:parseType=\"Literal\">atomrace</rdf:value>\n                <oslc:name>Analyser</oslc:name>\n                <oslc:serviceProvider rdf:resource=\"http://localhost:8080/AnacondaOSLC/services/Automation/A0\"/>\n                <oslc:instanceShape rdf:resource=\"http://localhost:8080/AnacondaOSLC/services/resourceShapes/parameterInstance\"/>\n            </oslc_auto:ParameterInstance>\n        </oslc_auto:inputParameter>\n        <dcterms:modified rdf:datatype=\"http://www.w3.org/2001/XMLSchema#dateTime\"\n    >2019-04-13T12:23:36.615Z</dcterms:modified>\n        <dcterms:created rdf:datatype=\"http://www.w3.org/2001/XMLSchema#dateTime\"\n    >2019-04-13T12:23:35.394Z</dcterms:created>\n        <oslc_auto:inputParameter>\n            <oslc_auto:ParameterInstance rdf:about=\"http://localhost:8080/AnacondaOSLC/services/Automation/A0/resources/parameterInstances/23-1\">\n                <rdf:value rdf:parseType=\"Literal\">\"Hello World!\"</rdf:value>\n                <oslc:name>ExecutionParameters</oslc:name>\n                <oslc:serviceProvider rdf:resource=\"http://localhost:8080/AnacondaOSLC/services/Automation/A0\"/>\n                <oslc:instanceShape rdf:resource=\"http://localhost:8080/AnacondaOSLC/services/resourceShapes/parameterInstance\"/>\n            </oslc_auto:ParameterInstance>\n        </oslc_auto:inputParameter>\n        <oslc_auto:inputParameter>\n            <oslc_auto:ParameterInstance rdf:about=\"http://localhost:8080/AnacondaOSLC/services/Automation/A0/resources/parameterInstances/23-4\">\n                <rdf:value rdf:parseType=\"Literal\">console command</rdf:value>\n                <oslc:name>ProgramDefinition</oslc:name>\n                <oslc:serviceProvider rdf:resource=\"http://localhost:8080/AnacondaOSLC/services/Automation/A0\"/>\n                <oslc:instanceShape rdf:resource=\"http://localhost:8080/AnacondaOSLC/services/resourceShapes/parameterInstance\"/>\n            </oslc_auto:ParameterInstance>\n        </oslc_auto:inputParameter>\n        <dcterms:identifier>23</dcterms:identifier>\n        <oslc_auto:inputParameter>\n            <oslc_auto:ParameterInstance rdf:about=\"http://localhost:8080/AnacondaOSLC/services/Automation/A0/resources/parameterInstances/23-0\">\n                <rdf:value rdf:parseType=\"Literal\">-g</rdf:value>\n                <oslc:name>CompilationParameters</oslc:name>\n                <oslc:serviceProvider rdf:resource=\"http://localhost:8080/AnacondaOSLC/services/Automation/A0\"/>\n                <oslc:instanceShape rdf:resource=\"http://localhost:8080/AnacondaOSLC/services/resourceShapes/parameterInstance\"/>\n            </oslc_auto:ParameterInstance>\n        </oslc_auto:inputParameter>\n        <oslc_auto:contribution>\n            <anaconda:OutputLog rdf:about=\"http://localhost:8080/AnacondaOSLC/services/Automation/A0/resources/outputLogs/23-0\">\n                <dcterms:type>http://purl.org/dc/dcmitype/Text</dcterms:type>\n                <rdf:value rdf:parseType=\"Literal\">Hello World!\n</rdf:value>\n                <dcterms:created rdf:datatype=\"http://www.w3.org/2001/XMLSchema#dateTime\"\n        >2019-04-13T12:23:36.615Z</dcterms:created>\n                <dcterms:title rdf:parseType=\"Literal\">Analysis Log</dcterms:title>\n                <dcterms:description rdf:parseType=\"Literal\">Output of the analysis. Stderr is appended to the end.</dcterms:description>\n            </anaconda:OutputLog>\n        </oslc_auto:contribution>\n        <oslc_auto:producedByAutomationRequest rdf:resource=\"http://localhost:8080/AnacondaOSLC/services/Automation/A0/resources/automationRequests/23\"/>\n        <oslc_auto:inputParameter>\n            <oslc_auto:ParameterInstance rdf:about=\"http://localhost:8080/AnacondaOSLC/services/Automation/A0/resources/parameterInstances/23-3\">\n                <rdf:value rdf:parseType=\"Literal\">echo</rdf:value>\n                <oslc:name>Program</oslc:name>\n                <oslc:serviceProvider rdf:resource=\"http://localhost:8080/AnacondaOSLC/services/Automation/A0\"/>\n                <oslc:instanceShape rdf:resource=\"http://localhost:8080/AnacondaOSLC/services/resourceShapes/parameterInstance\"/>\n            </oslc_auto:ParameterInstance>\n        </oslc_auto:inputParameter>\n        <oslc_auto:verdict rdf:resource=\"http://open-services.net/ns/auto#passed\"/>\n        <oslc:serviceProvider rdf:resource=\"http://localhost:8080/AnacondaOSLC/services/Automation/A0\"/>\n        <oslc_auto:state rdf:resource=\"http://open-services.net/ns/auto#complete\"/>\n        <oslc_auto:reportsOnAutomationPlan rdf:resource=\"http://localhost:8080/AnacondaOSLC/services/Automation/A0/resources/automationPlans/0\"/>\n        <dcterms:creator rdf:resource=\"https://pajda.fit.vutbr.cz/xvasic\"/>\n        <oslc:instanceShape rdf:resource=\"http://localhost:8080/AnacondaOSLC/services/resourceShapes/automationResult\"/>\n        <oslc_auto:desiredState rdf:resource=\"http://open-services.net/ns/auto#complete\"/>\n    </oslc_auto:AutomationResult>\n</rdf:RDF>"
								},
								"url": {
									"raw": "{{server_address}}/AnacondaOSLC/services/Automation/A0/resources/automationResults/{{requestId}}",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"AnacondaOSLC",
										"services",
										"Automation",
										"A0",
										"resources",
										"automationResults",
										"{{requestId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get the updated result",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2ac8143a-00b8-4352-9f49-a6cfaba6f982",
										"exec": [
											"pm.test(\"Response code should be 200 (OK)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check the title\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:title rdf:parseType=\\\"Literal\\\">Result - Test Request - updated</dcterms:title>\");",
											"});",
											"",
											"pm.test(\"Check the updated contribution\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:title rdf:parseType=\\\"Literal\\\">Later update Log</dcterms:title>\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "0e22f9d0-a6e8-43bc-8f87-b0861919c0de",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{server_address}}/AnacondaOSLC/services/Automation/A0/resources/automationResults/{{requestId}}",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"AnacondaOSLC",
										"services",
										"Automation",
										"A0",
										"resources",
										"automationResults",
										"{{requestId}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "delete",
					"item": [
						{
							"name": "run analysis to produce a result",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "28eb1cf1-a957-444a-b541-0affedf688d7",
										"exec": [
											"// save the request ID as a global variable for later tests to use",
											"const response = xml2Json(pm.response.text());",
											"var resrouceAbout = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"].$[\"rdf:about\"];",
											"var resourceAboutSplit = resrouceAbout.split(\"/\");",
											"var resourceId = resourceAboutSplit[resourceAboutSplit.length-1];",
											"pm.globals.set('requestId', resourceId);",
											"",
											"pm.test(\"Response code should be 201 (created)\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "53694edb-628d-4044-b35a-1fec5eecd915",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/xml"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>Test Request</dcterms:title>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{server_address}}/AnacondaOSLC/services/Automation/A0/resources/automationPlans/0\" />\n\t<dcterms:creator rdf:resource=\"https://pajda.fit.vutbr.cz/xvasic\"/>\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>Analyser</oslc:name>\n\t\t\t<rdf:value>event-printer</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>ProgramDefinition</oslc:name>\n\t\t\t<rdf:value>console command</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>Program</oslc:name>\n\t\t\t<rdf:value>echo</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>CompilationParameters</oslc:name>\n\t\t\t<rdf:value></rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>ExecutionParameters</oslc:name>\n\t\t\t<rdf:value>\"Hello World!\"</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>"
								},
								"url": {
									"raw": "{{server_address}}/AnacondaOSLC/services/Automation/A0/resources/createAutomationRequest",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"AnacondaOSLC",
										"services",
										"Automation",
										"A0",
										"resources",
										"createAutomationRequest"
									]
								}
							},
							"response": []
						},
						{
							"name": "get the analysis result",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2ac8143a-00b8-4352-9f49-a6cfaba6f982",
										"exec": [
											"pm.test(\"Response code should be 200 (OK)\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "0e22f9d0-a6e8-43bc-8f87-b0861919c0de",
										"exec": [
											"var result_wait_time = pm.variables.get('result_wait_time');",
											"setTimeout(function(){}, [result_wait_time]);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{server_address}}/AnacondaOSLC/services/Automation/A0/resources/automationResults/{{requestId}}",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"AnacondaOSLC",
										"services",
										"Automation",
										"A0",
										"resources",
										"automationResults",
										"{{requestId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete the result (deletes the request too)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "28eb1cf1-a957-444a-b541-0affedf688d7",
										"exec": [
											"pm.test(\"Response code should be 200 (OK)\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "53694edb-628d-4044-b35a-1fec5eecd915",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/xml"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<rdf:RDF\n    xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n    xmlns:dcterms=\"http://purl.org/dc/terms/\"\n    xmlns:oslc_data=\"http://open-services.net/ns/servicemanagement/1.0/\"\n    xmlns:anaconda=\"http://anaconda.verifit/ns/anaconda#\"\n    xmlns:oslc=\"http://open-services.net/ns/core#\"\n    xmlns:foaf=\"http://xmlns.com/foaf/0.1/#\"\n    xmlns:rdfs=\"http://www.w3.org/2000/01/rdf-schema#\"\n    xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n    <oslc_auto:AutomationResult rdf:about=\"http://localhost:8080/AnacondaOSLC/services/Automation/A0/resources/automationResults/23\">\n    \t<dcterms:description rdf:parseType=\"Literal\">Updated description!</dcterms:description>\n        <oslc_auto:inputParameter>\n            <oslc_auto:ParameterInstance rdf:about=\"http://localhost:8080/AnacondaOSLC/services/Automation/A0/resources/parameterInstances/23-2\">\n                <rdf:value rdf:parseType=\"Literal\">atomrace</rdf:value>\n                <oslc:name>Analyser</oslc:name>\n                <oslc:serviceProvider rdf:resource=\"http://localhost:8080/AnacondaOSLC/services/Automation/A0\"/>\n                <oslc:instanceShape rdf:resource=\"http://localhost:8080/AnacondaOSLC/services/resourceShapes/parameterInstance\"/>\n            </oslc_auto:ParameterInstance>\n        </oslc_auto:inputParameter>\n        <dcterms:modified rdf:datatype=\"http://www.w3.org/2001/XMLSchema#dateTime\"\n    >2019-04-13T12:23:36.615Z</dcterms:modified>\n        <dcterms:created rdf:datatype=\"http://www.w3.org/2001/XMLSchema#dateTime\"\n    >2019-04-13T12:23:35.394Z</dcterms:created>\n        <oslc_auto:inputParameter>\n            <oslc_auto:ParameterInstance rdf:about=\"http://localhost:8080/AnacondaOSLC/services/Automation/A0/resources/parameterInstances/23-1\">\n                <rdf:value rdf:parseType=\"Literal\">\"Hello World!\"</rdf:value>\n                <oslc:name>ExecutionParameters</oslc:name>\n                <oslc:serviceProvider rdf:resource=\"http://localhost:8080/AnacondaOSLC/services/Automation/A0\"/>\n                <oslc:instanceShape rdf:resource=\"http://localhost:8080/AnacondaOSLC/services/resourceShapes/parameterInstance\"/>\n            </oslc_auto:ParameterInstance>\n        </oslc_auto:inputParameter>\n        <oslc_auto:inputParameter>\n            <oslc_auto:ParameterInstance rdf:about=\"http://localhost:8080/AnacondaOSLC/services/Automation/A0/resources/parameterInstances/23-4\">\n                <rdf:value rdf:parseType=\"Literal\">console command</rdf:value>\n                <oslc:name>ProgramDefinition</oslc:name>\n                <oslc:serviceProvider rdf:resource=\"http://localhost:8080/AnacondaOSLC/services/Automation/A0\"/>\n                <oslc:instanceShape rdf:resource=\"http://localhost:8080/AnacondaOSLC/services/resourceShapes/parameterInstance\"/>\n            </oslc_auto:ParameterInstance>\n        </oslc_auto:inputParameter>\n        <dcterms:identifier>23</dcterms:identifier>\n        <oslc_auto:inputParameter>\n            <oslc_auto:ParameterInstance rdf:about=\"http://localhost:8080/AnacondaOSLC/services/Automation/A0/resources/parameterInstances/23-0\">\n                <rdf:value rdf:parseType=\"Literal\">-g</rdf:value>\n                <oslc:name>CompilationParameters</oslc:name>\n                <oslc:serviceProvider rdf:resource=\"http://localhost:8080/AnacondaOSLC/services/Automation/A0\"/>\n                <oslc:instanceShape rdf:resource=\"http://localhost:8080/AnacondaOSLC/services/resourceShapes/parameterInstance\"/>\n            </oslc_auto:ParameterInstance>\n        </oslc_auto:inputParameter>\n        <oslc_auto:contribution>\n            <anaconda:OutputLog rdf:about=\"http://localhost:8080/AnacondaOSLC/services/Automation/A0/resources/outputLogs/23-0\">\n                <dcterms:type>http://purl.org/dc/dcmitype/Text</dcterms:type>\n                <rdf:value rdf:parseType=\"Literal\">Hello World!\n</rdf:value>\n                <dcterms:created rdf:datatype=\"http://www.w3.org/2001/XMLSchema#dateTime\"\n        >2019-04-13T12:23:36.615Z</dcterms:created>\n                <dcterms:title rdf:parseType=\"Literal\">Analysis Log</dcterms:title>\n                <dcterms:description rdf:parseType=\"Literal\">Output of the analysis. Stderr is appended to the end.</dcterms:description>\n            </anaconda:OutputLog>\n        </oslc_auto:contribution>\n        <oslc_auto:producedByAutomationRequest rdf:resource=\"http://localhost:8080/AnacondaOSLC/services/Automation/A0/resources/automationRequests/23\"/>\n        <oslc_auto:inputParameter>\n            <oslc_auto:ParameterInstance rdf:about=\"http://localhost:8080/AnacondaOSLC/services/Automation/A0/resources/parameterInstances/23-3\">\n                <rdf:value rdf:parseType=\"Literal\">echo</rdf:value>\n                <oslc:name>Program</oslc:name>\n                <oslc:serviceProvider rdf:resource=\"http://localhost:8080/AnacondaOSLC/services/Automation/A0\"/>\n                <oslc:instanceShape rdf:resource=\"http://localhost:8080/AnacondaOSLC/services/resourceShapes/parameterInstance\"/>\n            </oslc_auto:ParameterInstance>\n        </oslc_auto:inputParameter>\n        <oslc_auto:verdict rdf:resource=\"http://open-services.net/ns/auto#passed\"/>\n        <oslc:serviceProvider rdf:resource=\"http://localhost:8080/AnacondaOSLC/services/Automation/A0\"/>\n        <oslc_auto:state rdf:resource=\"http://open-services.net/ns/auto#complete\"/>\n        <dcterms:title rdf:parseType=\"Literal\">Result - Test Request</dcterms:title>\n        <oslc_auto:reportsOnAutomationPlan rdf:resource=\"http://localhost:8080/AnacondaOSLC/services/Automation/A0/resources/automationPlans/0\"/>\n        <dcterms:creator rdf:resource=\"https://pajda.fit.vutbr.cz/xvasic\"/>\n        <oslc:instanceShape rdf:resource=\"http://localhost:8080/AnacondaOSLC/services/resourceShapes/automationResult\"/>\n        <oslc_auto:desiredState rdf:resource=\"http://open-services.net/ns/auto#complete\"/>\n    </oslc_auto:AutomationResult>\n</rdf:RDF>"
								},
								"url": {
									"raw": "{{server_address}}/AnacondaOSLC/services/Automation/A0/resources/automationResults/{{requestId}}",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"AnacondaOSLC",
										"services",
										"Automation",
										"A0",
										"resources",
										"automationResults",
										"{{requestId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "try to get the deleted result",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2ac8143a-00b8-4352-9f49-a6cfaba6f982",
										"exec": [
											"pm.test(\"Response code should be 404 (Not Found)\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "0e22f9d0-a6e8-43bc-8f87-b0861919c0de",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{server_address}}/AnacondaOSLC/services/Automation/A0/resources/automationResults/{{requestId}}",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"AnacondaOSLC",
										"services",
										"Automation",
										"A0",
										"resources",
										"automationResults",
										"{{requestId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "try to get the deleted request",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2ac8143a-00b8-4352-9f49-a6cfaba6f982",
										"exec": [
											"pm.test(\"Response code should be 404 (Not Found)\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "0e22f9d0-a6e8-43bc-8f87-b0861919c0de",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{server_address}}/AnacondaOSLC/services/Automation/A0/resources/automationResults/{{requestId}}",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"AnacondaOSLC",
										"services",
										"Automation",
										"A0",
										"resources",
										"automationResults",
										"{{requestId}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "8f018b6e-0428-411a-b4ad-325e537a0497",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "daaefd5b-6bb9-447f-8e40-bdd3ce3f7b76",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "ba8e8f6e-107f-4b55-a64c-0a60943b9bbe",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "5cfeaa17-6b34-4068-84be-2d0d2bc6441b",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "b44cbeb4-acc9-4428-ae84-c26fdc143560",
			"key": "anaconda_path",
			"value": "/home/od42/matrix/proj_praxe/anaconda",
			"type": "string"
		},
		{
			"id": "2784a25a-4297-4c50-8307-6376e1c27eef",
			"key": "server_address",
			"value": "http://localhost:8080",
			"type": "string"
		},
		{
			"id": "aa1e6ba6-f431-4e6b-87d4-22a33cbabb37",
			"key": "result_wait_time",
			"value": "2000",
			"type": "string"
		}
	]
}