{
	"info": {
		"_postman_id": "ef53251f-e188-4670-9c5c-df836bb693d7",
		"name": "Compilation Tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Basic",
			"item": [
				{
					"name": "basic use case",
					"item": [
						{
							"name": "predefined AutomationPlan 0",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "061d61ed-5a4f-4d37-a861-10e856448e8b",
										"exec": [
											"var serverAddr = pm.variables.get(\"server_address\");",
											"var server_context = pm.variables.get(\"server_context\");",
											"",
											"pm.test(\"Response code should be 200 (OK)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Response body should contain an AutomationPlan (id:0)\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:AutomationPlan rdf:about=\\\"\" + serverAddr + \"/\" + server_context + \"/services/serviceProviders/A0/resources/automationPlans/0\");",
											"});",
											"pm.test(\"AutomationPlan should contain a dcterms:title property\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:title\");",
											"});",
											"pm.test(\"AutomationPlan should contain a dcterms:created property\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:created\");",
											"});",
											"pm.test(\"AutomationPlan should contain a dcterms:modified property\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:modified\");",
											"});",
											"pm.test(\"AutomationPlan should contain a <dcterms:creator property\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:creator\");",
											"});",
											"pm.test(\"AutomationPlan should contain a buildCommand parameter definition\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<oslc:name>buildCommand</oslc:name>\");",
											"});",
											"pm.test(\"AutomationPlan should contain a launchCommand parameter definition\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<oslc:name>launchCommand</oslc:name>\");",
											"});",
											"pm.test(\"AutomationPlan should contain a sourceGit parameter definition\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<oslc:name>sourceGit</oslc:name>\");",
											"});",
											"pm.test(\"AutomationPlan should contain a sourceUrl parameter definition\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<oslc:name>sourceUrl</oslc:name>\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "36a188ea-5f2f-4520-9d4e-058368bf02f3",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/serviceProviders/A0/resources/automationPlans/0",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"serviceProviders",
										"A0",
										"resources",
										"automationPlans",
										"0"
									]
								}
							},
							"response": []
						},
						{
							"name": "create AutomationRequest",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "28eb1cf1-a957-444a-b541-0affedf688d7",
										"exec": [
											"// save the request ID as a global variable for later tests to use",
											"const response = xml2Json(pm.response.text());",
											"var resrouceAbout = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"].$[\"rdf:about\"];",
											"var resourceAboutSplit = resrouceAbout.split(\"/\");",
											"var requestId = resourceAboutSplit[resourceAboutSplit.length-1];",
											"pm.globals.set('requestId', requestId);",
											"",
											"// get global variable to use in this test",
											"var serverAddr = pm.variables.get(\"server_address\");",
											"var server_context = pm.variables.get(\"server_context\");",
											"var AutoPlanId = pm.variables.get(\"AutoPlanId\");",
											"var buildCommand = pm.variables.get(\"buildCommand\");",
											"var launchCommand= pm.variables.get(\"launchCommand\");",
											"var sourceType = pm.variables.get(\"sourceType\");",
											"var sourceVal = pm.variables.get(\"sourceVal\");",
											"var reqCreator = pm.variables.get(\"reqCreator\");",
											"var reqTitle = pm.variables.get(\"reqTitle\");",
											"var reqDescription = pm.variables.get(\"reqDescription\");",
											"",
											"",
											"",
											"pm.test(\"Response code should be 201 (created)\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"pm.test(\"Response body should contain an AutomationRequest\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:AutomationRequest rdf:about=\\\"\" + serverAddr + \"/\" + server_context + \"/services/serviceProviders/A0/resources/automationRequests/\" + requestId);",
											"});",
											"pm.test(\"AutomationRequest state should be #new\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#new\\\"/>\");",
											"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#inProgress\\\"/>\");",
											"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#complete\\\"/>\");",
											"});",
											"pm.test(\"AutomationRequest desiredState should be #complete\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:desiredState rdf:resource=\\\"http://open-services.net/ns/auto#complete\\\"/>\");",
											"});",
											"pm.test(\"AutomationRequest should contain a executesAutomationPlan property\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:executesAutomationPlan rdf:resource=\\\"\" + serverAddr + \"/\" + server_context + \"/services/serviceProviders/A0/resources/automationPlans/\");",
											"});",
											"pm.test(\"AutomationRequest executesAutomationPlan should match the AutomationPlan with ID \" + AutoPlanId, function () {",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:executesAutomationPlan rdf:resource=\\\"\" + serverAddr + \"/\" + server_context + \"/services/serviceProviders/A0/resources/automationPlans/\" + AutoPlanId);",
											"});",
											"pm.test(\"AutomationRequest should contain the expected dcterms:title property\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:title rdf:parseType=\\\"Literal\\\">\" + reqTitle + \"</dcterms:title>\");",
											"});",
											"pm.test(\"AutomationRequest should contain the expected dcterms:identifier property\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:identifier>\" + requestId + \"</dcterms:identifier>\");",
											"});",
											"pm.test(\"AutomationRequest contain the expected dcterms:creator property\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:creator rdf:resource=\\\"\" + reqCreator + \"\\\"/>\");",
											"});",
											"pm.test(\"AutomationRequest contain the expected dcterms:description property\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:description rdf:parseType=\\\"Literal\\\">\" + reqDescription + \"</dcterms:description>\");",
											"});",
											"pm.test(\"AutomationRequest should contain a dcterms:created  property\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:created\");",
											"});",
											"pm.test(\"AutomationRequest should contain a dcterms:modified  property\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:modified\");",
											"});",
											"pm.test(\"AutomationRequest should contain a buildCommand input parameter\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<oslc:name>buildCommand</oslc:name>\");",
											"});",
											"pm.test(\"AutomationRequest should contain the expected buildCommand input value\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<rdf:value rdf:parseType=\\\"Literal\\\">\" + buildCommand + \"</rdf:value>\");",
											"});",
											"pm.test(\"AutomationRequest should contain a launchCommand input parameter\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<oslc:name>launchCommand</oslc:name>\");",
											"});",
											"pm.test(\"AutomationRequest should contain the expected launchCommand input value\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<rdf:value rdf:parseType=\\\"Literal\\\">\" + launchCommand + \"</rdf:value>\");",
											"});",
											"pm.test(\"AutomationRequest should contain a \" + sourceType + \" input parameter\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<oslc:name>\" + sourceType + \"</oslc:name>\");",
											"});",
											"pm.test(\"AutomationRequest should contain the expected \" + sourceType + \" input value\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<rdf:value rdf:parseType=\\\"Literal\\\">\" + sourceVal + \"</rdf:value>\");",
											"});",
											"pm.test(\"AutomationRequest should contain a producedAutomationResult refference property\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:producedAutomationResult\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "53694edb-628d-4044-b35a-1fec5eecd915",
										"exec": [
											"// setup global variables for future requests (GETs)",
											"// attempt to make this sequence of requests into a template that can then be change in this place to change the test",
											"",
											"pm.globals.set(\"AutoPlanId\", \"0\");",
											"",
											"pm.globals.set(\"buildCommand\", \"make\");",
											"pm.globals.set(\"launchCommand\", \"./testEcho\");",
											"pm.globals.set(\"sourceType\", \"sourceGit\");",
											"pm.globals.set(\"sourceVal\", \"https://github.com/od42/test.git\");",
											"",
											"pm.globals.set(\"reqCreator\", \"https://pajda.fit.vutbr.cz/xvasic\");",
											"pm.globals.set(\"reqTitle\", \"Test title\");",
											"pm.globals.set(\"reqDescription\", \"Test description\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/xml"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>{{reqTitle}}</dcterms:title>\n\t<dcterms:description>{{reqDescription}}</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{server_address}}/{{server_context}}/services/serviceProviders/A0/resources/automationPlans/{{AutoPlanId}}\" />\n\t<dcterms:creator rdf:resource=\"{{reqCreator}}\"/>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>buildCommand</oslc:name>\n\t\t\t<rdf:value>{{buildCommand}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>launchCommand</oslc:name>\n\t\t\t<rdf:value>{{launchCommand}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>{{sourceType}}</oslc:name>\n\t\t\t<rdf:value>{{sourceVal}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/serviceProviders/A0/resources/createAutoRequest",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"serviceProviders",
										"A0",
										"resources",
										"createAutoRequest"
									]
								}
							},
							"response": []
						},
						{
							"name": "get AutoRequest - inProgress",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "061d61ed-5a4f-4d37-a861-10e856448e8b",
										"exec": [
											"// get global variable to use in this test",
											"var requestId = pm.globals.get('requestId');",
											"var serverAddr = pm.variables.get(\"server_address\");",
											"var server_context = pm.variables.get(\"server_context\");",
											"var AutoPlanId = pm.variables.get(\"AutoPlanId\");",
											"var buildCommand = pm.variables.get(\"buildCommand\");",
											"var launchCommand= pm.variables.get(\"launchCommand\");",
											"var sourceType = pm.variables.get(\"sourceType\");",
											"var sourceVal = pm.variables.get(\"sourceVal\");",
											"var reqCreator = pm.variables.get(\"reqCreator\");",
											"var reqTitle = pm.variables.get(\"reqTitle\");",
											"var reqDescription = pm.variables.get(\"reqDescription\");",
											"",
											"",
											"",
											"pm.test(\"Response code should be 200 (OK)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Response body should contain an AutomationRequest\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:AutomationRequest rdf:about=\\\"\" + serverAddr + \"/\" + server_context + \"/services/serviceProviders/A0/resources/automationRequests/\");",
											"});",
											"pm.test(\"AutomationRequest should have the expected ID: \" + requestId, function () {",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:AutomationRequest rdf:about=\\\"\" + serverAddr + \"/\" + server_context + \"/services/serviceProviders/A0/resources/automationRequests/\" + requestId);",
											"});",
											"pm.test(\"AutomationRequest desiredState should be #complete\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:desiredState rdf:resource=\\\"http://open-services.net/ns/auto#complete\\\"/>\");",
											"});",
											"pm.test(\"AutomationRequest should contain a executesAutomationPlan property\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:executesAutomationPlan rdf:resource=\\\"\" + serverAddr + \"/\" + server_context + \"/services/serviceProviders/A0/resources/automationPlans/\");",
											"});",
											"pm.test(\"AutomationRequest executesAutomationPlan should match the AutomationPlan with ID \" + AutoPlanId, function () {",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:executesAutomationPlan rdf:resource=\\\"\" + serverAddr + \"/\" + server_context + \"/services/serviceProviders/A0/resources/automationPlans/\" + AutoPlanId);",
											"});",
											"pm.test(\"AutomationRequest should contain the expected dcterms:title property\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:title rdf:parseType=\\\"Literal\\\">\" + reqTitle + \"</dcterms:title>\");",
											"});",
											"pm.test(\"AutomationRequest should contain the expected dcterms:identifier property\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:identifier>\" + requestId + \"</dcterms:identifier>\");",
											"});",
											"pm.test(\"AutomationRequest contain the expected dcterms:creator property\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:creator rdf:resource=\\\"\" + reqCreator + \"\\\"/>\");",
											"});",
											"pm.test(\"AutomationRequest contain the expected dcterms:description property\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:description rdf:parseType=\\\"Literal\\\">\" + reqDescription + \"</dcterms:description>\");",
											"});",
											"pm.test(\"AutomationRequest should contain a dcterms:created  property\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:created\");",
											"});",
											"pm.test(\"AutomationRequest should contain a dcterms:modified  property\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:modified\");",
											"});",
											"pm.test(\"AutomationRequest should contain a buildCommand input parameter\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<oslc:name>buildCommand</oslc:name>\");",
											"});",
											"pm.test(\"AutomationRequest should contain the expected buildCommand input value\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<rdf:value rdf:parseType=\\\"Literal\\\">\" + buildCommand + \"</rdf:value>\");",
											"});",
											"pm.test(\"AutomationRequest should contain a launchCommand input parameter\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<oslc:name>launchCommand</oslc:name>\");",
											"});",
											"pm.test(\"AutomationRequest should contain the expected launchCommand input value\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<rdf:value rdf:parseType=\\\"Literal\\\">\" + launchCommand + \"</rdf:value>\");",
											"});",
											"pm.test(\"AutomationRequest should contain a \" + sourceType + \" input parameter\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<oslc:name>\" + sourceType + \"</oslc:name>\");",
											"});",
											"pm.test(\"AutomationRequest should contain the expected \" + sourceType + \" input value\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<rdf:value rdf:parseType=\\\"Literal\\\">\" + sourceVal + \"</rdf:value>\");",
											"});",
											"",
											"",
											"// these are the only two differences compared to the last test request",
											"pm.test(\"AutomationRequest state should be #inProgress\", function () {",
											"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#new\\\"/>\");",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#inProgress\\\"/>\");",
											"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#complete\\\"/>\");",
											"});",
											"pm.test(\"AutomationRequest should contain a producedAutomationResult refference property with the expected ID (same as the request)\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:producedAutomationResult rdf:resource=\\\"\" + serverAddr + \"/\" + server_context + \"/services/serviceProviders/A0/resources/automationResults/\" + requestId);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "987a0d2e-cb4c-4628-8234-aedbd9b95554",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/serviceProviders/A0/resources/automationRequests/{{requestId}}",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"serviceProviders",
										"A0",
										"resources",
										"automationRequests",
										"{{requestId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get AutomatinResult - inProgress",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2ac8143a-00b8-4352-9f49-a6cfaba6f982",
										"exec": [
											"// get global variable to use in this test",
											"var requestId = pm.globals.get('requestId');",
											"var serverAddr = pm.variables.get(\"server_address\");",
											"var server_context = pm.variables.get(\"server_context\");",
											"var AutoPlanId = pm.variables.get(\"AutoPlanId\");",
											"var buildCommand = pm.variables.get(\"buildCommand\");",
											"var launchCommand= pm.variables.get(\"launchCommand\");",
											"var sourceType = pm.variables.get(\"sourceType\");",
											"var sourceVal = pm.variables.get(\"sourceVal\");",
											"var reqCreator = pm.variables.get(\"reqCreator\");",
											"var reqTitle = pm.variables.get(\"reqTitle\");",
											"var reqDescription = pm.variables.get(\"reqDescription\");",
											"",
											"",
											"pm.test(\"Response code should be 200 (OK)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Response body should contain an AutomationResult\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:AutomationResult rdf:about=\\\"\" + serverAddr + \"/\" + server_context + \"/services/serviceProviders/A0/resources/automationResults/\");",
											"});",
											"pm.test(\"AutomationResult should have the expected ID: \" + requestId, function () {",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:AutomationResult rdf:about=\\\"\" + serverAddr + \"/\" + server_context + \"/services/serviceProviders/A0/resources/automationResults/\" + requestId);",
											"});",
											"pm.test(\"AutomationResult desiredState should be #complete\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:desiredState rdf:resource=\\\"http://open-services.net/ns/auto#complete\\\"/>\");",
											"});",
											"pm.test(\"AutomationResult should contain a producedByAutomationRequest property\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:producedByAutomationRequest rdf:resource=\\\"\" + serverAddr + \"/\" + server_context + \"/services/serviceProviders/A0/resources/automationRequests/\");",
											"});",
											"pm.test(\"AutomationResult producedByAutomationRequest should match the AutomationRequest with ID \" + requestId, function () {",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:producedByAutomationRequest rdf:resource=\\\"\" + serverAddr + \"/\" + server_context + \"/services/serviceProviders/A0/resources/automationRequests/\" + requestId);",
											"});",
											"pm.test(\"AutomationResult should contain the expected dcterms:title property\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:title rdf:parseType=\\\"Literal\\\">Result - \" + reqTitle + \"</dcterms:title>\");",
											"});",
											"pm.test(\"AutomationResult should contain the expected dcterms:identifier property\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:identifier>\" + requestId + \"</dcterms:identifier>\");",
											"});",
											"pm.test(\"AutomationResult contain the expected dcterms:creator property\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:creator rdf:resource=\\\"\" + reqCreator + \"\\\"/>\");",
											"});",
											"pm.test(\"AutomationResult should contain a dcterms:created  property\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:created\");",
											"});",
											"pm.test(\"AutomationResult should contain a dcterms:modified  property\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:modified\");",
											"});",
											"pm.test(\"AutomationResult should contain a buildCommand input parameter\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<oslc:name>buildCommand</oslc:name>\");",
											"});",
											"pm.test(\"AutomationResult should contain the expected buildCommand input value\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<rdf:value rdf:parseType=\\\"Literal\\\">\" + buildCommand + \"</rdf:value>\");",
											"});",
											"pm.test(\"AutomationResult should contain a launchCommand input parameter\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<oslc:name>launchCommand</oslc:name>\");",
											"});",
											"pm.test(\"AutomationResult should contain the expected launchCommand input value\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<rdf:value rdf:parseType=\\\"Literal\\\">\" + launchCommand + \"</rdf:value>\");",
											"});",
											"pm.test(\"AutomationResult should contain a \" + sourceType + \" input parameter\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<oslc:name>\" + sourceType + \"</oslc:name>\");",
											"});",
											"pm.test(\"AutomationResult should contain the expected \" + sourceType + \" input value\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<rdf:value rdf:parseType=\\\"Literal\\\">\" + sourceVal + \"</rdf:value>\");",
											"});",
											"pm.test(\"AutomationResult should not contain a createdSUT refference resource\", function () {",
											"    pm.expect(pm.response.text()).to.not.include(\"<fit:createdSUT rdf:resource=\\\"\" + serverAddr + \"/\" + server_context + \"/services/serviceProviders/A0/resources/sUTs/\");",
											"});",
											"pm.test(\"AutomationResult state should be #inProgress\", function () {",
											"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#new\\\"/>\");",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#inProgress\\\"/>\");",
											"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#complete\\\"/>\");",
											"});",
											"pm.test(\"AutomationResult verdict should be #unavailable\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:verdict rdf:resource=\\\"http://open-services.net/ns/auto#unavailable\\\"/>\");",
											"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:verdict rdf:resource=\\\"http://open-services.net/ns/auto#passed\\\"/>\");",
											"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#error\\\"/>\");",
											"});",
											"pm.test(\"AutomationResult should not contain any contributions\", function () {",
											"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:contribution\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "0e22f9d0-a6e8-43bc-8f87-b0861919c0de",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/serviceProviders/A0/resources/automationResults/{{requestId}}",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"serviceProviders",
										"A0",
										"resources",
										"automationResults",
										"{{requestId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get AutoRequest - complete",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "061d61ed-5a4f-4d37-a861-10e856448e8b",
										"exec": [
											"// get global variable to use in this test",
											"var requestId = pm.globals.get('requestId');",
											"var serverAddr = pm.variables.get(\"server_address\");",
											"var server_context = pm.variables.get(\"server_context\");",
											"var AutoPlanId = pm.variables.get(\"AutoPlanId\");",
											"var buildCommand = pm.variables.get(\"buildCommand\");",
											"var launchCommand= pm.variables.get(\"launchCommand\");",
											"var sourceType = pm.variables.get(\"sourceType\");",
											"var sourceVal = pm.variables.get(\"sourceVal\");",
											"var reqCreator = pm.variables.get(\"reqCreator\");",
											"var reqTitle = pm.variables.get(\"reqTitle\");",
											"var reqDescription = pm.variables.get(\"reqDescription\");",
											"",
											"",
											"",
											"pm.test(\"Response code should be 200 (OK)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Response body should contain an AutomationRequest\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:AutomationRequest rdf:about=\\\"\" + serverAddr + \"/\" + server_context + \"/services/serviceProviders/A0/resources/automationRequests/\");",
											"});",
											"pm.test(\"AutomationRequest should have the expected ID: \" + requestId, function () {",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:AutomationRequest rdf:about=\\\"\" + serverAddr + \"/\" + server_context + \"/services/serviceProviders/A0/resources/automationRequests/\" + requestId);",
											"});",
											"pm.test(\"AutomationRequest desiredState should be #complete\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:desiredState rdf:resource=\\\"http://open-services.net/ns/auto#complete\\\"/>\");",
											"});",
											"pm.test(\"AutomationRequest should contain a executesAutomationPlan property\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:executesAutomationPlan rdf:resource=\\\"\" + serverAddr + \"/\" + server_context + \"/services/serviceProviders/A0/resources/automationPlans/\");",
											"});",
											"pm.test(\"AutomationRequest executesAutomationPlan should match the AutomationPlan with ID \" + AutoPlanId, function () {",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:executesAutomationPlan rdf:resource=\\\"\" + serverAddr + \"/\" + server_context + \"/services/serviceProviders/A0/resources/automationPlans/\" + AutoPlanId);",
											"});",
											"pm.test(\"AutomationRequest should contain the expected dcterms:title property\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:title rdf:parseType=\\\"Literal\\\">\" + reqTitle + \"</dcterms:title>\");",
											"});",
											"pm.test(\"AutomationRequest should contain the expected dcterms:identifier property\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:identifier>\" + requestId + \"</dcterms:identifier>\");",
											"});",
											"pm.test(\"AutomationRequest contain the expected dcterms:creator property\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:creator rdf:resource=\\\"\" + reqCreator + \"\\\"/>\");",
											"});",
											"pm.test(\"AutomationRequest contain the expected dcterms:description property\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:description rdf:parseType=\\\"Literal\\\">\" + reqDescription + \"</dcterms:description>\");",
											"});",
											"pm.test(\"AutomationRequest should contain a dcterms:created  property\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:created\");",
											"});",
											"pm.test(\"AutomationRequest should contain a dcterms:modified  property\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:modified\");",
											"});",
											"pm.test(\"AutomationRequest should contain a buildCommand input parameter\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<oslc:name>buildCommand</oslc:name>\");",
											"});",
											"pm.test(\"AutomationRequest should contain the expected buildCommand input value\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<rdf:value rdf:parseType=\\\"Literal\\\">\" + buildCommand + \"</rdf:value>\");",
											"});",
											"pm.test(\"AutomationRequest should contain a launchCommand input parameter\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<oslc:name>launchCommand</oslc:name>\");",
											"});",
											"pm.test(\"AutomationRequest should contain the expected launchCommand input value\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<rdf:value rdf:parseType=\\\"Literal\\\">\" + launchCommand + \"</rdf:value>\");",
											"});",
											"pm.test(\"AutomationRequest should contain a \" + sourceType + \" input parameter\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<oslc:name>\" + sourceType + \"</oslc:name>\");",
											"});",
											"pm.test(\"AutomationRequest should contain the expected \" + sourceType + \" input value\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<rdf:value rdf:parseType=\\\"Literal\\\">\" + sourceVal + \"</rdf:value>\");",
											"});",
											"pm.test(\"AutomationRequest should contain a producedAutomationResult refference property with the expected ID (same as the request)\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:producedAutomationResult rdf:resource=\\\"\" + serverAddr + \"/\" + server_context + \"/services/serviceProviders/A0/resources/automationResults/\" + requestId);",
											"});",
											"",
											"",
											"// this is the only difference compared to the last test request",
											"pm.test(\"AutomationRequest state should be #complete\", function () {",
											"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#new\\\"/>\");",
											"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#inProgress\\\"/>\");",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#complete\\\"/>\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "8baa5ba6-8bc9-44f8-950a-dbad0a093e21",
										"exec": [
											"// wait for the request execution to finish",
											" var result_wait_time = pm.variables.get('result_wait_time');",
											" setTimeout(function(){}, [result_wait_time]);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/serviceProviders/A0/resources/automationRequests/{{requestId}}",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"serviceProviders",
										"A0",
										"resources",
										"automationRequests",
										"{{requestId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get AutomatinResult - complete",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2ac8143a-00b8-4352-9f49-a6cfaba6f982",
										"exec": [
											"// get global variable to use in this test",
											"var requestId = pm.globals.get('requestId');",
											"var serverAddr = pm.variables.get(\"server_address\");",
											"var server_context = pm.variables.get(\"server_context\");",
											"var AutoPlanId = pm.variables.get(\"AutoPlanId\");",
											"var buildCommand = pm.variables.get(\"buildCommand\");",
											"var launchCommand= pm.variables.get(\"launchCommand\");",
											"var sourceType = pm.variables.get(\"sourceType\");",
											"var sourceVal = pm.variables.get(\"sourceVal\");",
											"var reqCreator = pm.variables.get(\"reqCreator\");",
											"var reqTitle = pm.variables.get(\"reqTitle\");",
											"var reqDescription = pm.variables.get(\"reqDescription\");",
											"",
											"",
											"pm.test(\"Response code should be 200 (OK)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Response body should contain an AutomationResult\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:AutomationResult rdf:about=\\\"\" + serverAddr + \"/\" + server_context + \"/services/serviceProviders/A0/resources/automationResults/\");",
											"});",
											"pm.test(\"AutomationResult should have the expected ID: \" + requestId, function () {",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:AutomationResult rdf:about=\\\"\" + serverAddr + \"/\" + server_context + \"/services/serviceProviders/A0/resources/automationResults/\" + requestId);",
											"});",
											"pm.test(\"AutomationResult desiredState should be #complete\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:desiredState rdf:resource=\\\"http://open-services.net/ns/auto#complete\\\"/>\");",
											"});",
											"pm.test(\"AutomationResult should contain a producedByAutomationRequest property\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:producedByAutomationRequest rdf:resource=\\\"\" + serverAddr + \"/\" + server_context + \"/services/serviceProviders/A0/resources/automationRequests/\");",
											"});",
											"pm.test(\"AutomationResult producedByAutomationRequest should match the AutomationRequest with ID \" + requestId, function () {",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:producedByAutomationRequest rdf:resource=\\\"\" + serverAddr + \"/\" + server_context + \"/services/serviceProviders/A0/resources/automationRequests/\" + requestId);",
											"});",
											"pm.test(\"AutomationResult should contain the expected dcterms:title property\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:title rdf:parseType=\\\"Literal\\\">Result - \" + reqTitle + \"</dcterms:title>\");",
											"});",
											"pm.test(\"AutomationResult should contain the expected dcterms:identifier property\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:identifier>\" + requestId + \"</dcterms:identifier>\");",
											"});",
											"pm.test(\"AutomationResult contain the expected dcterms:creator property\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:creator rdf:resource=\\\"\" + reqCreator + \"\\\"/>\");",
											"});",
											"pm.test(\"AutomationResult should contain a dcterms:created  property\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:created\");",
											"});",
											"pm.test(\"AutomationResult should contain a dcterms:modified  property\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:modified\");",
											"});",
											"pm.test(\"AutomationResult should contain a createdSUT refference resource\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<fit:createdSUT rdf:resource=\\\"\" + serverAddr + \"/\" + server_context + \"/services/serviceProviders/A0/resources/sUTs/\");",
											"});",
											"pm.test(\"AutomationResult createdSUT should have ID \" + requestId, function () {",
											"    pm.expect(pm.response.text()).to.include(\"<fit:createdSUT rdf:resource=\\\"\" + serverAddr + \"/\" + server_context + \"/services/serviceProviders/A0/resources/sUTs/\" + requestId);",
											"});",
											"pm.test(\"AutomationResult should contain a buildCommand input parameter\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<oslc:name>buildCommand</oslc:name>\");",
											"});",
											"pm.test(\"AutomationResult should contain the expected buildCommand input value\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<rdf:value rdf:parseType=\\\"Literal\\\">\" + buildCommand + \"</rdf:value>\");",
											"});",
											"pm.test(\"AutomationResult should contain a launchCommand input parameter\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<oslc:name>launchCommand</oslc:name>\");",
											"});",
											"pm.test(\"AutomationResult should contain the expected launchCommand input value\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<rdf:value rdf:parseType=\\\"Literal\\\">\" + launchCommand + \"</rdf:value>\");",
											"});",
											"pm.test(\"AutomationResult should contain a \" + sourceType + \" input parameter\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<oslc:name>\" + sourceType + \"</oslc:name>\");",
											"});",
											"pm.test(\"AutomationResult should contain the expected \" + sourceType + \" input value\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<rdf:value rdf:parseType=\\\"Literal\\\">\" + sourceVal + \"</rdf:value>\");",
											"});",
											"",
											"",
											"// the only difference compared to the last request (below)",
											"pm.test(\"AutomationResult state should be #complete\", function () {",
											"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#new\\\"/>\");",
											"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#inProgress\\\"/>\");",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#complete\\\"/>\");",
											"});",
											"pm.test(\"AutomationResult verdict should be #passed\", function () {",
											"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:verdict rdf:resource=\\\"http://open-services.net/ns/auto#unavailable\\\"/>\");",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:verdict rdf:resource=\\\"http://open-services.net/ns/auto#passed\\\"/>\");",
											"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:verdict rdf:resource=\\\"http://open-services.net/ns/auto#error\\\"/>\");",
											"});",
											"",
											"",
											"pm.test(\"AutomationResult should contain contributions\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:contribution\");",
											"});",
											"pm.test(\"AutomationResult should contain the fetching output\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:title rdf:parseType=\\\"Literal\\\">Fetching Output</dcterms:title>\");",
											"});",
											"pm.test(\"AutomationResult fetching output should have the expected value\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<rdf:value rdf:parseType=\\\"Literal\\\"># SUT fetch successful\\n</rdf:value>\");",
											"});",
											"pm.test(\"AutomationResult should contain compilation stdout\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:title rdf:parseType=\\\"Literal\\\">Compilation stdout</dcterms:title>\");",
											"});",
											"pm.test(\"AutomationResult compilation stdout should have the expected value\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<rdf:value rdf:parseType=\\\"Literal\\\"># Compilation completed successfully\\n\");",
											"});",
											"pm.test(\"AutomationResult should contain compilation stderr\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:title rdf:parseType=\\\"Literal\\\">Compilation stderr</dcterms:title>\");",
											"});",
											"pm.test(\"AutomationResult compilation stderr be empty (~)\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<rdf:value rdf:parseType=\\\"Literal\\\"></rdf:value>\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "0e22f9d0-a6e8-43bc-8f87-b0861919c0de",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/serviceProviders/A0/resources/automationResults/{{requestId}}",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"serviceProviders",
										"A0",
										"resources",
										"automationResults",
										"{{requestId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get SUT",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2ac8143a-00b8-4352-9f49-a6cfaba6f982",
										"exec": [
											"// get global variable to use in this test",
											"var requestId = pm.globals.get('requestId');",
											"var serverAddr = pm.variables.get(\"server_address\");",
											"var server_context = pm.variables.get(\"server_context\");",
											"var AutoPlanId = pm.variables.get(\"AutoPlanId\");",
											"var buildCommand = pm.variables.get(\"buildCommand\");",
											"var launchCommand= pm.variables.get(\"launchCommand\");",
											"var sourceType = pm.variables.get(\"sourceType\");",
											"var sourceVal = pm.variables.get(\"sourceVal\");",
											"var reqCreator = pm.variables.get(\"reqCreator\");",
											"var reqTitle = pm.variables.get(\"reqTitle\");",
											"var reqDescription = pm.variables.get(\"reqDescription\");",
											"var sut_folder = pm.variables.get(\"sut_folder\");",
											"",
											"pm.test(\"Response code should be 200 (OK)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Response body should contain an SUT\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"fit:SUT rdf:about=\\\"\" + serverAddr + \"/\" + server_context + \"/services/serviceProviders/A0/resources/sUTs/\");",
											"});",
											"pm.test(\"SUT should have the expected ID: \" + requestId, function () {",
											"    pm.expect(pm.response.text()).to.include(\"fit:SUT rdf:about=\\\"\" + serverAddr + \"/\" + server_context + \"/services/serviceProviders/A0/resources/sUTs/\" + requestId);",
											"});",
											"pm.test(\"SUT should contain a producedByAutomationRequest property\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:producedByAutomationRequest rdf:resource=\\\"\" + serverAddr + \"/\" + server_context + \"/services/serviceProviders/A0/resources/automationRequests/\");",
											"});",
											"pm.test(\"SUT producedByAutomationRequest should match the AutomationRequest with ID \" + requestId, function () {",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:producedByAutomationRequest rdf:resource=\\\"\" + serverAddr + \"/\" + server_context + \"/services/serviceProviders/A0/resources/automationRequests/\" + requestId);",
											"});",
											"pm.test(\"SUT should contain the expected dcterms:title property\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:title rdf:parseType=\\\"Literal\\\">SUT - \" + reqTitle + \"</dcterms:title>\");",
											"});",
											"pm.test(\"SUT should contain the expected dcterms:identifier property\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:identifier>\" + requestId + \"</dcterms:identifier>\");",
											"});",
											"pm.test(\"SUT should contain the expected dcterms:creator property\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:creator rdf:resource=\\\"\" + reqCreator + \"\\\"/>\");",
											"});",
											"pm.test(\"SUT should contain a dcterms:created  property\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:created\");",
											"});",
											"pm.test(\"SUT should contain a dcterms:modified  property\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:modified\");",
											"});",
											"pm.test(\"SUT should contain a buildCommand property\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<fit:buildCommand\");",
											"});",
											"pm.test(\"SUT buildCommand should have the expected value\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<fit:buildCommand rdf:parseType=\\\"Literal\\\">\" + buildCommand + \"</fit:buildCommand>\");",
											"});",
											"pm.test(\"SUT should contain a launchCommand property\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<fit:launchCommand\");",
											"});",
											"pm.test(\"SUT launchCommand should have the expected value\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<fit:launchCommand rdf:parseType=\\\"Literal\\\">\" + launchCommand + \"</fit:launchCommand>\");",
											"});",
											"pm.test(\"SUT should contain a SUTdirectoryPath propery\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<fit:SUTdirectoryPath\");",
											"});",
											"pm.test(\"SUT SUTdirectoryPath should have the expected value\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<fit:SUTdirectoryPath rdf:parseType=\\\"Literal\\\">\" + sut_folder);",
											"    pm.expect(pm.response.text()).to.include(requestId + \"</fit:SUTdirectoryPath>\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "0e22f9d0-a6e8-43bc-8f87-b0861919c0de",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/serviceProviders/A0/resources/sUTs/{{requestId}}",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"serviceProviders",
										"A0",
										"resources",
										"sUTs",
										"{{requestId}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Automation Service Provider",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a468ffe6-7139-42ef-8294-fa30c1724d8b",
								"exec": [
									"pm.test(\"Response code should be 200 (OK)\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "80af8363-be02-4be7-8b2e-fa59b144d09a",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/rdf+xml"
							}
						],
						"url": {
							"raw": "{{server_address}}/{{server_context}}/services/serviceProviders/A0",
							"host": [
								"{{server_address}}"
							],
							"path": [
								"{{server_context}}",
								"services",
								"serviceProviders",
								"A0"
							]
						}
					},
					"response": []
				},
				{
					"name": "Service Provider Catologue",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c5460f3e-6a8a-4a91-9c25-f4a51a23e823",
								"exec": [
									"pm.test(\"Response code should be 200 (OK)\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/rdf+xml",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{server_address}}/{{server_context}}/services/catalog/singleton",
							"host": [
								"{{server_address}}"
							],
							"path": [
								"{{server_context}}",
								"services",
								"catalog",
								"singleton"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "1e0de945-487d-495e-b9e7-52f23ee31f14",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "e7dfbe50-1eb8-41c9-add3-753aaaabdc83",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "General Errors",
			"item": [
				{
					"name": "invalid build command",
					"item": [
						{
							"name": "invalid build command",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "28eb1cf1-a957-444a-b541-0affedf688d7",
										"exec": [
											"// save the request ID as a global variable for later tests to use",
											"const response = xml2Json(pm.response.text());",
											"var resrouceAbout = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"].$[\"rdf:about\"];",
											"var resourceAboutSplit = resrouceAbout.split(\"/\");",
											"var resourceId = resourceAboutSplit[resourceAboutSplit.length-1];",
											"pm.globals.set('requestId', resourceId);",
											"",
											"pm.test(\"Response code should be 201 (created)\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/xml"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>First prototype request</dcterms:title>\n\t<dcterms:description>Test</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"http://localhost:8081/compilation/services/serviceProviders/A0/resources/automationPlans/0\" />\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>sourceUrl</oslc:name>\n\t\t\t<rdf:value>http://www.stud.fit.vutbr.cz/~xvasic25/TestEchoProgram.cpp</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>buildCommand</oslc:name>\n\t\t\t<rdf:value>asdfasdf</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>launchCommand</oslc:name>\n\t\t\t<rdf:value>./my_echo</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/serviceProviders/A0/resources/createAutoRequest",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"serviceProviders",
										"A0",
										"resources",
										"createAutoRequest"
									]
								}
							},
							"response": []
						},
						{
							"name": "check the result error",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2ac8143a-00b8-4352-9f49-a6cfaba6f982",
										"exec": [
											"var requestId = pm.globals.get('requestId');",
											"var serverAddr = pm.variables.get(\"server_address\");",
											"var server_context = pm.variables.get(\"server_context\");",
											"",
											"pm.test(\"Response code should be 200 (OK)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Should be produced by the expected AutoRequest\", function () {",
											"    ",
											"    pm.expect(pm.response.text()).to.include(\":producedByAutomationRequest rdf:resource=\\\"\" + serverAddr + \"/\" + server_context + \"/services/serviceProviders/A0/resources/automationRequests/\" + requestId);",
											"});",
											"",
											"pm.test(\"State should be complete\", function () {",
											"    pm.expect(pm.response.text()).to.include(\":state rdf:resource=\\\"http://open-services.net/ns/auto#complete\\\"/>\");",
											"});",
											"",
											"pm.test(\"Verdict should be error\", function () {",
											"    pm.expect(pm.response.text()).to.include(\":verdict rdf:resource=\\\"http://open-services.net/ns/auto#error\\\"/>\");",
											"});",
											"",
											"",
											"pm.test(\"Should contain the Compilation stdout\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Compilation stdout\");",
											"});",
											"pm.test(\"Check the Compilation stdout\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"# Compilation error\");",
											"});",
											"pm.test(\"Should contain the Compilation stderr\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Compilation stderr\");",
											"});",
											"pm.test(\"Check the Compilation stderr\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Cannot run program \");",
											"});",
											"",
											"pm.test(\"Should contain the program Fetching Output\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Fetching Output\");",
											"});",
											"pm.test(\"Check program fetching output\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"# SUT fetch successful\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "0e22f9d0-a6e8-43bc-8f87-b0861919c0de",
										"exec": [
											"// wait for the request execution to finish",
											" var result_wait_time = pm.variables.get('result_wait_time'); setTimeout(function(){}, [result_wait_time]);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/serviceProviders/A0/resources/automationResults/{{requestId}}",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"serviceProviders",
										"A0",
										"resources",
										"automationResults",
										"{{requestId}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "cc1a278c-82a0-45d1-a60d-a764aa709b78",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "ccf63fc5-a3f5-400f-aec6-a24c12e4ddb0",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "empty POST request",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "28eb1cf1-a957-444a-b541-0affedf688d7",
								"exec": [
									"pm.test(\"Response code should be 400 (bad request)\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Error msg should be - empty creation POST\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"<oslc:message>AutomationRequest NOT created - empty creation POST</oslc:message>\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "cb0e422a-5939-4a63-8ed7-877fe30f5ebf",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n</rdf:RDF>",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{server_address}}/{{server_context}}/services/serviceProviders/A0/resources/createAutoRequest",
							"host": [
								"{{server_address}}"
							],
							"path": [
								"{{server_context}}",
								"services",
								"serviceProviders",
								"A0",
								"resources",
								"createAutoRequest"
							]
						}
					},
					"response": []
				},
				{
					"name": "title property missing",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "28eb1cf1-a957-444a-b541-0affedf688d7",
								"exec": [
									"pm.test(\"Response code should be 400 (bad request)\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"",
									"pm.test(\"Error msg should be - executesAutomationPlan property missing\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"<oslc:message>AutomationRequest NOT created - title property missing</oslc:message>\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:description>Test</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{server_address}}/{{server_context}}/services/serviceProviders/A0/resources/automationPlans/0\" />\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>sourceUrl</oslc:name>\n\t\t\t<rdf:value>http://www.stud.fit.vutbr.cz/~xvasic25/TestEchoProgram.cpp</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>buildCommand</oslc:name>\n\t\t\t<rdf:value>gcc -g TestEchoProgram.cpp -o my_echo</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>launchCommand</oslc:name>\n\t\t\t<rdf:value>./my_echo</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{server_address}}/{{server_context}}/services/serviceProviders/A0/resources/createAutoRequest",
							"host": [
								"{{server_address}}"
							],
							"path": [
								"{{server_context}}",
								"services",
								"serviceProviders",
								"A0",
								"resources",
								"createAutoRequest"
							]
						}
					},
					"response": []
				},
				{
					"name": "executesAutomationPlan property missing",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "28eb1cf1-a957-444a-b541-0affedf688d7",
								"exec": [
									"pm.test(\"Response code should be 400 (bad request)\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"",
									"pm.test(\"Error msg should be - executesAutomationPlan property missing\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"<oslc:message>AutomationRequest NOT created - executesAutomationPlan property missing</oslc:message>\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>First prototype request</dcterms:title>\n\t<dcterms:description>Test</dcterms:description>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>sourceUrl</oslc:name>\n\t\t\t<rdf:value>http://www.stud.fit.vutbr.cz/~xvasic25/TestEchoProgram.cpp</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>buildCommand</oslc:name>\n\t\t\t<rdf:value>gcc -g TestEchoProgram.cpp -o my_echo</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>launchCommand</oslc:name>\n\t\t\t<rdf:value>./my_echo</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{server_address}}/{{server_context}}/services/serviceProviders/A0/resources/createAutoRequest",
							"host": [
								"{{server_address}}"
							],
							"path": [
								"{{server_context}}",
								"services",
								"serviceProviders",
								"A0",
								"resources",
								"createAutoRequest"
							]
						}
					},
					"response": []
				},
				{
					"name": "executed AutomationPlan not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "28eb1cf1-a957-444a-b541-0affedf688d7",
								"exec": [
									"pm.test(\"Response code should be 400 (bad request)\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"",
									"pm.test(\"Error msg should be - AutomationPlan not found\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"<oslc:message>AutomationRequest NOT created - AutomationPlan not found\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>First prototype request</dcterms:title>\n\t<dcterms:description>Test</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{server_address}}/{{server_context}}/services/serviceProviders/A0/resources/automationPlans/23452346342\" />\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>sourceUrl</oslc:name>\n\t\t\t<rdf:value>http://www.stud.fit.vutbr.cz/~xvasic25/TestEchoProgram.cpp</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>buildCommand</oslc:name>\n\t\t\t<rdf:value>gcc -g TestEchoProgram.cpp -o my_echo</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>launchCommand</oslc:name>\n\t\t\t<rdf:value>./my_echo</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{server_address}}/{{server_context}}/services/serviceProviders/A0/resources/createAutoRequest",
							"host": [
								"{{server_address}}"
							],
							"path": [
								"{{server_context}}",
								"services",
								"serviceProviders",
								"A0",
								"resources",
								"createAutoRequest"
							]
						}
					},
					"response": []
				},
				{
					"name": "source input invalid value",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "673ab45c-c6ee-4235-8c5f-38a35d96abe0",
								"exec": [
									"pm.test(\"Response code should be 400 (bad request)\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Error msg should be - AutomationRequest NOT created - unrecognized input parameters\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"<oslc:message>AutomationRequest NOT created - 'sourceURL' input parameter not recognized</oslc:message>\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/xml",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>First prototype request</dcterms:title>\n\t<dcterms:description>Test</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{server_address}}/{{server_context}}/services/serviceProviders/A0/resources/automationPlans/0\" />\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>sourceURL</oslc:name>\n\t\t\t<rdf:value>http://www.stud.fit.vutbr.cz/~xvasic25/TestEchoProgram.cpp</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>buildCommand</oslc:name>\n\t\t\t<rdf:value>gcc -g TestEchoProgram.cpp -o my_echo</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>launchCommand</oslc:name>\n\t\t\t<rdf:value>./my_echo</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{server_address}}/{{server_context}}/services/serviceProviders/A0/resources/createAutoRequest",
							"host": [
								"{{server_address}}"
							],
							"path": [
								"{{server_context}}",
								"services",
								"serviceProviders",
								"A0",
								"resources",
								"createAutoRequest"
							]
						}
					},
					"response": []
				},
				{
					"name": "source input param missing",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "305a0336-2910-4e7f-9bda-a865ffba7fdd",
								"exec": [
									"pm.test(\"Response code should be 400 (bad request)\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Error msg should be - AutomationRequest NOT created - Source parameter missing. Expected exactly one.\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"<oslc:message>AutomationRequest NOT created - Source parameter missing. Expected exactly one.</oslc:message>\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/xml",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>First prototype request</dcterms:title>\n\t<dcterms:description>Test</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{server_address}}/{{server_context}}/services/serviceProviders/A0/resources/automationPlans/0\" />\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>buildCommand</oslc:name>\n\t\t\t<rdf:value>gcc -g TestEchoProgram.cpp -o my_echo</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>launchCommand</oslc:name>\n\t\t\t<rdf:value>./my_echo</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{server_address}}/{{server_context}}/services/serviceProviders/A0/resources/createAutoRequest",
							"host": [
								"{{server_address}}"
							],
							"path": [
								"{{server_context}}",
								"services",
								"serviceProviders",
								"A0",
								"resources",
								"createAutoRequest"
							]
						}
					},
					"response": []
				},
				{
					"name": "unknown input parameter",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "21c4bb39-da9e-47d6-847e-208290d64fe6",
								"exec": [
									"pm.test(\"Response code should be 400 (bad request)\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Error msg should be - AutomationRequest NOT created - unrecognized input parameters\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"<oslc:message>AutomationRequest NOT created - 'invalid input' input parameter not recognized</oslc:message>\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>First prototype request</dcterms:title>\n\t<dcterms:description>Test</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{server_address}}/{{server_context}}/services/serviceProviders/A0/resources/automationPlans/0\" />\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>invalid input</oslc:name>\n\t\t\t<rdf:value>invalid value</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>sourceUrl</oslc:name>\n\t\t\t<rdf:value>http://www.stud.fit.vutbr.cz/~xvasic25/TestEchoProgram.cpp</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>buildCommand</oslc:name>\n\t\t\t<rdf:value>gcc -g TestEchoProgram.cpp -o my_echo</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>launchCommand</oslc:name>\n\t\t\t<rdf:value>./my_echo</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{server_address}}/{{server_context}}/services/serviceProviders/A0/resources/createAutoRequest",
							"host": [
								"{{server_address}}"
							],
							"path": [
								"{{server_context}}",
								"services",
								"serviceProviders",
								"A0",
								"resources",
								"createAutoRequest"
							]
						}
					},
					"response": []
				},
				{
					"name": "launchCommand input param missing",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "21c4bb39-da9e-47d6-847e-208290d64fe6",
								"exec": [
									"pm.test(\"Response code should be 400 (bad request)\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Error msg should be - AutomationRequest NOT created - unrecognized input parameters\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"<oslc:message>AutomationRequest NOT created - 'launchCommand' input parameter missing</oslc:message>\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>First prototype request</dcterms:title>\n\t<dcterms:description>Test</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{server_address}}/{{server_context}}/services/serviceProviders/A0/resources/automationPlans/0\" />\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>sourceUrl</oslc:name>\n\t\t\t<rdf:value>http://www.stud.fit.vutbr.cz/~xvasic25/TestEchoProgram.cpp</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>buildCommand</oslc:name>\n\t\t\t<rdf:value>gcc -g TestEchoProgram.cpp -o my_echo</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{server_address}}/{{server_context}}/services/serviceProviders/A0/resources/createAutoRequest",
							"host": [
								"{{server_address}}"
							],
							"path": [
								"{{server_context}}",
								"services",
								"serviceProviders",
								"A0",
								"resources",
								"createAutoRequest"
							]
						}
					},
					"response": []
				},
				{
					"name": "resource not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "32ef67f8-fd0e-4d76-aab9-7f4d00263c0c",
								"exec": [
									"pm.test(\"Response code should be 404 (not found)\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{server_address}}/{{server_context}}/services/serviceProviders/A0/resources/automationPlans/123456789",
							"host": [
								"{{server_address}}"
							],
							"path": [
								"{{server_context}}",
								"services",
								"serviceProviders",
								"A0",
								"resources",
								"automationPlans",
								"123456789"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "f9928b88-3e2e-47ac-83a4-0c3ca9342e63",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "e7cc3f5e-3e4b-4bda-bf8f-ea5524f9b7dc",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Test compilation methods",
			"item": [
				{
					"name": "sourceUrl",
					"item": [
						{
							"name": "basic function",
							"item": [
								{
									"name": "basic",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "28eb1cf1-a957-444a-b541-0affedf688d7",
												"exec": [
													"// save the request ID as a global variable for later tests to use",
													"const response = xml2Json(pm.response.text());",
													"var resrouceAbout = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"].$[\"rdf:about\"];",
													"var resourceAboutSplit = resrouceAbout.split(\"/\");",
													"var resourceId = resourceAboutSplit[resourceAboutSplit.length-1];",
													"pm.globals.set('requestId', resourceId);",
													"",
													"pm.test(\"Response code should be 201 (created)\", function () {",
													"    pm.response.to.have.status(201);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "53694edb-628d-4044-b35a-1fec5eecd915",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/xml"
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>First prototype request</dcterms:title>\n\t<dcterms:description>Test</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"http://localhost:8081/compilation/services/serviceProviders/A0/resources/automationPlans/0\" />\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>sourceUrl</oslc:name>\n\t\t\t<rdf:value>http://www.stud.fit.vutbr.cz/~xvasic25/TestEchoProgram.cpp</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>buildCommand</oslc:name>\n\t\t\t<rdf:value>gcc -g TestEchoProgram.cpp -o my_echo</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>launchCommand</oslc:name>\n\t\t\t<rdf:value>./my_echo</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/serviceProviders/A0/resources/createAutoRequest",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"serviceProviders",
												"A0",
												"resources",
												"createAutoRequest"
											]
										}
									},
									"response": []
								},
								{
									"name": "check the result",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2ac8143a-00b8-4352-9f49-a6cfaba6f982",
												"exec": [
													"var requestId = pm.globals.get('requestId');",
													"var serverAddr = pm.variables.get(\"server_address\");",
													"var server_context = pm.variables.get(\"server_context\");",
													"",
													"pm.test(\"Response code should be 200 (OK)\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Should be produced by the expected AutoRequest\", function () {",
													"    ",
													"    pm.expect(pm.response.text()).to.include(\":producedByAutomationRequest rdf:resource=\\\"\" + serverAddr + \"/\" + server_context + \"/services/serviceProviders/A0/resources/automationRequests/\" + requestId);",
													"});",
													"",
													"pm.test(\"State should be complete\", function () {",
													"    pm.expect(pm.response.text()).to.include(\":state rdf:resource=\\\"http://open-services.net/ns/auto#complete\\\"/>\");",
													"});",
													"",
													"pm.test(\"Verdict should be passed\", function () {",
													"    pm.expect(pm.response.text()).to.include(\":verdict rdf:resource=\\\"http://open-services.net/ns/auto#passed\\\"/>\");",
													"});",
													"",
													"pm.test(\"Should contain an SUT refference ID \" + requestId, function () {",
													"    pm.expect(pm.response.text()).to.include(\"<fit:createdSUT rdf:resource=\\\"\" + serverAddr + \"/\" + server_context + \"/services/serviceProviders/A0/resources/sUTs/\" + requestId);",
													"});",
													"",
													"",
													"pm.test(\"Should contain the Compilation stdout\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"Compilation stdout\");",
													"});",
													"pm.test(\"Check the Compilation stdout\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"# Compilation completed successfully\");",
													"});",
													"pm.test(\"Should contain the Compilation stderr\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"Compilation stderr\");",
													"});",
													"pm.test(\"Check the Compilation stderr\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"<rdf:value rdf:parseType=\\\"Literal\\\"></rdf:value>\");",
													"});",
													"",
													"pm.test(\"Should contain the program Fetching Output\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"Fetching Output\");",
													"});",
													"pm.test(\"Check program fetching output\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"# SUT fetch successful\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "0e22f9d0-a6e8-43bc-8f87-b0861919c0de",
												"exec": [
													"// wait for the request execution to finish",
													"var result_wait_time = pm.variables.get('result_wait_time');",
													"setTimeout(function(){}, [result_wait_time]);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/serviceProviders/A0/resources/automationResults/{{requestId}}",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"serviceProviders",
												"A0",
												"resources",
												"automationResults",
												"{{requestId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "check the SUT",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2ac8143a-00b8-4352-9f49-a6cfaba6f982",
												"exec": [
													"// get global variable to use in this test",
													"var requestId = pm.globals.get('requestId');",
													"var serverAddr = pm.variables.get(\"server_address\");",
													"var server_context = pm.variables.get(\"server_context\");",
													"",
													"pm.test(\"Response code should be 200 (OK)\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"SUT should have the expected ID: \" + requestId, function () {",
													"    pm.expect(pm.response.text()).to.include(\"fit:SUT rdf:about=\\\"\" + serverAddr + \"/\" + server_context + \"/services/serviceProviders/A0/resources/sUTs/\" + requestId);",
													"});",
													"pm.test(\"SUT producedByAutomationRequest should match the AutomationRequest with ID \" + requestId, function () {",
													"    pm.expect(pm.response.text()).to.include(\"oslc_auto:producedByAutomationRequest rdf:resource=\\\"\" + serverAddr + \"/\" + server_context + \"/services/serviceProviders/A0/resources/automationRequests/\" + requestId);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "0e22f9d0-a6e8-43bc-8f87-b0861919c0de",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/serviceProviders/A0/resources/sUTs/{{requestId}}",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"serviceProviders",
												"A0",
												"resources",
												"sUTs",
												"{{requestId}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "compilation error",
							"item": [
								{
									"name": "program with a syntax error",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "28eb1cf1-a957-444a-b541-0affedf688d7",
												"exec": [
													"// save the request ID as a global variable for later tests to use",
													"const response = xml2Json(pm.response.text());",
													"var resrouceAbout = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"].$[\"rdf:about\"];",
													"var resourceAboutSplit = resrouceAbout.split(\"/\");",
													"var resourceId = resourceAboutSplit[resourceAboutSplit.length-1];",
													"pm.globals.set('requestId', resourceId);",
													"",
													"var serverAddr = pm.variables.get(\"server_address\");",
													"",
													"pm.test(\"Response code should be 201 (created)\", function () {",
													"    pm.response.to.have.status(201);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/xml"
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>First prototype request</dcterms:title>\n\t<dcterms:description>Test</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"http://localhost:8081/compilation/services/serviceProviders/A0/resources/automationPlans/0\" />\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>sourceUrl</oslc:name>\n\t\t\t<rdf:value>http://www.stud.fit.vutbr.cz/~xvasic25/TestEchoProgramError.cpp</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>buildCommand</oslc:name>\n\t\t\t<rdf:value>gcc -g TestEchoProgramError.cpp -o my_echo</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>launchCommand</oslc:name>\n\t\t\t<rdf:value>./my_echo</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/serviceProviders/A0/resources/createAutoRequest",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"serviceProviders",
												"A0",
												"resources",
												"createAutoRequest"
											]
										}
									},
									"response": []
								},
								{
									"name": "check the result error",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2ac8143a-00b8-4352-9f49-a6cfaba6f982",
												"exec": [
													"var requestId = pm.globals.get('requestId');",
													"var serverAddr = pm.variables.get(\"server_address\");",
													"var server_context = pm.variables.get(\"server_context\");",
													"",
													"pm.test(\"Response code should be 200 (OK)\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Should be produced by the expected AutoRequest\", function () {",
													"    ",
													"    pm.expect(pm.response.text()).to.include(\":producedByAutomationRequest rdf:resource=\\\"\" + serverAddr + \"/\" + server_context + \"/services/serviceProviders/A0/resources/automationRequests/\" + requestId);",
													"});",
													"",
													"pm.test(\"State should be complete\", function () {",
													"    pm.expect(pm.response.text()).to.include(\":state rdf:resource=\\\"http://open-services.net/ns/auto#complete\\\"/>\");",
													"});",
													"",
													"pm.test(\"Verdict should be failed\", function () {",
													"    pm.expect(pm.response.text()).to.include(\":verdict rdf:resource=\\\"http://open-services.net/ns/auto#failed\\\"/>\");",
													"});",
													"",
													"pm.test(\"Should not contain an SUT refference\", function () {",
													"    pm.expect(pm.response.text()).to.not.include(\"<fit:createdSUT rdf:resource=\\\"\" + serverAddr + \"/\" + server_context + \"/services/serviceProviders/A0/resources/sUTs/\");",
													"});",
													"",
													"pm.test(\"Should contain the Compilation stdout\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"Compilation stdout\");",
													"});",
													"pm.test(\"Check the Compilation stdout\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"# Compilation failed (returned non-zero: 1)\");",
													"});",
													"pm.test(\"Should contain the Compilation stderr\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"Compilation stderr\");",
													"});",
													"pm.test(\"Check the Compilation stderr\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"TestEchoProgramError.cpp: In function \");",
													"    pm.expect(pm.response.text()).to.include(\"int main(int, char**)\");",
													"});",
													"",
													"pm.test(\"Should contain the program Fetching Output\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"Fetching Output\");",
													"});",
													"pm.test(\"Check program fetching output\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"# SUT fetch successful\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "0e22f9d0-a6e8-43bc-8f87-b0861919c0de",
												"exec": [
													"// wait for the request execution to finish",
													" var result_wait_time = pm.variables.get('result_wait_time'); setTimeout(function(){}, [result_wait_time]);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/serviceProviders/A0/resources/automationResults/{{requestId}}",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"serviceProviders",
												"A0",
												"resources",
												"automationResults",
												"{{requestId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "check that SUT does not exist",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2ac8143a-00b8-4352-9f49-a6cfaba6f982",
												"exec": [
													"pm.test(\"Response code should be 404 (not found)\", function () {",
													"    pm.response.to.have.status(404);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "0e22f9d0-a6e8-43bc-8f87-b0861919c0de",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/serviceProviders/A0/resources/sUTs/{{requestId}}",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"serviceProviders",
												"A0",
												"resources",
												"sUTs",
												"{{requestId}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "file not found error",
							"item": [
								{
									"name": "non existent file",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "28eb1cf1-a957-444a-b541-0affedf688d7",
												"exec": [
													"// save the request ID as a global variable for later tests to use",
													"const response = xml2Json(pm.response.text());",
													"var resrouceAbout = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"].$[\"rdf:about\"];",
													"var resourceAboutSplit = resrouceAbout.split(\"/\");",
													"var resourceId = resourceAboutSplit[resourceAboutSplit.length-1];",
													"pm.globals.set('requestId', resourceId);",
													"",
													"var serverAddr = pm.variables.get(\"server_address\");",
													"",
													"pm.test(\"Response code should be 201 (created)\", function () {",
													"    pm.response.to.have.status(201);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/xml"
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>First prototype request</dcterms:title>\n\t<dcterms:description>Test</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"http://localhost:8081/compilation/services/serviceProviders/A0/resources/automationPlans/0\" />\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>sourceUrl</oslc:name>\n\t\t\t<rdf:value>http://www.stud.fit.vutbr.cz/~xvasic25/NonExistentFile</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>buildCommand</oslc:name>\n\t\t\t<rdf:value>gcc -g TestEchoProgram.cpp -o my_echo</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>launchCommand</oslc:name>\n\t\t\t<rdf:value>./my_echo</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/serviceProviders/A0/resources/createAutoRequest",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"serviceProviders",
												"A0",
												"resources",
												"createAutoRequest"
											]
										}
									},
									"response": []
								},
								{
									"name": "check the result error",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2ac8143a-00b8-4352-9f49-a6cfaba6f982",
												"exec": [
													"var requestId = pm.globals.get('requestId');",
													"var serverAddr = pm.variables.get(\"server_address\");",
													"var server_context = pm.variables.get(\"server_context\");",
													"",
													"pm.test(\"Response code should be 200 (OK)\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Should be produced by the expected AutoRequest\", function () {",
													"    ",
													"    pm.expect(pm.response.text()).to.include(\":producedByAutomationRequest rdf:resource=\\\"\" + serverAddr + \"/\" + server_context + \"/services/serviceProviders/A0/resources/automationRequests/\" + requestId);",
													"});",
													"",
													"pm.test(\"State should be complete\", function () {",
													"    pm.expect(pm.response.text()).to.include(\":state rdf:resource=\\\"http://open-services.net/ns/auto#complete\\\"/>\");",
													"});",
													"",
													"pm.test(\"Verdict should be error\", function () {",
													"    pm.expect(pm.response.text()).to.include(\":verdict rdf:resource=\\\"http://open-services.net/ns/auto#error\\\"/>\");",
													"});",
													"",
													"pm.test(\"Should not contain an SUT refference\", function () {",
													"    pm.expect(pm.response.text()).to.not.include(\"<fit:createdSUT rdf:resource=\\\"\" + serverAddr + \"/\" + server_context + \"/services/serviceProviders/A0/resources/sUTs/\");",
													"});",
													"",
													"pm.test(\"Should not contain the Compilation stdout\", function () {",
													"    pm.expect(pm.response.text()).to.not.include(\"Compilation stdout\");",
													"});",
													"pm.test(\"Should not contain the Compilation stderr\", function () {",
													"    pm.expect(pm.response.text()).to.not.include(\"Compilation stderr\");",
													"});",
													"",
													"pm.test(\"Should contain the program Fetching Output\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"Fetching Output\");",
													"});",
													"pm.test(\"Check program fetching output\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"# SUT fetch failed\\nDownload from url failed: http://www.stud.fit.vutbr.cz/~xvasic25/NonExistentFile\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "0e22f9d0-a6e8-43bc-8f87-b0861919c0de",
												"exec": [
													"// wait for the request execution to finish",
													" var result_wait_time = pm.variables.get('result_wait_time'); setTimeout(function(){}, [result_wait_time]);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/serviceProviders/A0/resources/automationResults/{{requestId}}",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"serviceProviders",
												"A0",
												"resources",
												"automationResults",
												"{{requestId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "check that SUT does not exist",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2ac8143a-00b8-4352-9f49-a6cfaba6f982",
												"exec": [
													"pm.test(\"Response code should be 404 (not found)\", function () {",
													"    pm.response.to.have.status(404);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "0e22f9d0-a6e8-43bc-8f87-b0861919c0de",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/serviceProviders/A0/resources/sUTs/{{requestId}}",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"serviceProviders",
												"A0",
												"resources",
												"sUTs",
												"{{requestId}}"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "cc1a278c-82a0-45d1-a60d-a764aa709b78",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "ccf63fc5-a3f5-400f-aec6-a24c12e4ddb0",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "server unreachable error",
							"item": [
								{
									"name": "unreachable server",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "28eb1cf1-a957-444a-b541-0affedf688d7",
												"exec": [
													"// save the request ID as a global variable for later tests to use",
													"const response = xml2Json(pm.response.text());",
													"var resrouceAbout = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"].$[\"rdf:about\"];",
													"var resourceAboutSplit = resrouceAbout.split(\"/\");",
													"var resourceId = resourceAboutSplit[resourceAboutSplit.length-1];",
													"pm.globals.set('requestId', resourceId);",
													"",
													"var serverAddr = pm.variables.get(\"server_address\");",
													"",
													"pm.test(\"Response code should be 201 (created)\", function () {",
													"    pm.response.to.have.status(201);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/xml"
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>First prototype request</dcterms:title>\n\t<dcterms:description>Test</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"http://localhost:8081/compilation/services/serviceProviders/A0/resources/automationPlans/0\" />\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>sourceUrl</oslc:name>\n\t\t\t<rdf:value>http://www.UnreachableServerXXasdfasdfagwer.cz</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>buildCommand</oslc:name>\n\t\t\t<rdf:value>gcc -g TestEchoProgram.cpp -o my_echo</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>launchCommand</oslc:name>\n\t\t\t<rdf:value>./my_echo</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/serviceProviders/A0/resources/createAutoRequest",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"serviceProviders",
												"A0",
												"resources",
												"createAutoRequest"
											]
										}
									},
									"response": []
								},
								{
									"name": "check the result error",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2ac8143a-00b8-4352-9f49-a6cfaba6f982",
												"exec": [
													"var requestId = pm.globals.get('requestId');",
													"var serverAddr = pm.variables.get(\"server_address\");",
													"var server_context = pm.variables.get(\"server_context\");",
													"",
													"pm.test(\"Response code should be 200 (OK)\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Should be produced by the expected AutoRequest\", function () {",
													"    ",
													"    pm.expect(pm.response.text()).to.include(\":producedByAutomationRequest rdf:resource=\\\"\" + serverAddr + \"/\" + server_context + \"/services/serviceProviders/A0/resources/automationRequests/\" + requestId);",
													"});",
													"",
													"pm.test(\"State should be complete\", function () {",
													"    pm.expect(pm.response.text()).to.include(\":state rdf:resource=\\\"http://open-services.net/ns/auto#complete\\\"/>\");",
													"});",
													"",
													"pm.test(\"Verdict should be error\", function () {",
													"    pm.expect(pm.response.text()).to.include(\":verdict rdf:resource=\\\"http://open-services.net/ns/auto#error\\\"/>\");",
													"});",
													"",
													"pm.test(\"Should not contain an SUT refference\", function () {",
													"    pm.expect(pm.response.text()).to.not.include(\"<fit:createdSUT rdf:resource=\\\"\" + serverAddr + \"/\" + server_context + \"/services/serviceProviders/A0/resources/sUTs/\");",
													"});",
													"",
													"pm.test(\"Should not contain the Compilation stdout\", function () {",
													"    pm.expect(pm.response.text()).to.not.include(\"Compilation stdout\");",
													"});",
													"pm.test(\"Should not contain the Compilation stderr\", function () {",
													"    pm.expect(pm.response.text()).to.not.include(\"Compilation stderr\");",
													"});",
													"",
													"pm.test(\"Should contain the program Fetching Output\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"Fetching Output\");",
													"});",
													"pm.test(\"Check program fetching output\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"# SUT fetch failed\\nUnknown host or host unreachable: www.UnreachableServerXXasdfasdfagwer.cz\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "0e22f9d0-a6e8-43bc-8f87-b0861919c0de",
												"exec": [
													"// wait for the request execution to finish",
													" var result_wait_time = pm.variables.get('result_wait_time'); setTimeout(function(){}, [result_wait_time]);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/serviceProviders/A0/resources/automationResults/{{requestId}}",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"serviceProviders",
												"A0",
												"resources",
												"automationResults",
												"{{requestId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "check that SUT does not exist",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2ac8143a-00b8-4352-9f49-a6cfaba6f982",
												"exec": [
													"pm.test(\"Response code should be 404 (not found)\", function () {",
													"    pm.response.to.have.status(404);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "0e22f9d0-a6e8-43bc-8f87-b0861919c0de",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/serviceProviders/A0/resources/sUTs/{{requestId}}",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"serviceProviders",
												"A0",
												"resources",
												"sUTs",
												"{{requestId}}"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "cc1a278c-82a0-45d1-a60d-a764aa709b78",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "ccf63fc5-a3f5-400f-aec6-a24c12e4ddb0",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "8de0b840-ed3f-4134-b0b6-a207af3cb243",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "5a4dd37a-ffd0-4a3e-8801-381b2a805da2",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "sourceGit",
					"item": [
						{
							"name": "basic function",
							"item": [
								{
									"name": "basic",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "28eb1cf1-a957-444a-b541-0affedf688d7",
												"exec": [
													"// save the request ID as a global variable for later tests to use",
													"const response = xml2Json(pm.response.text());",
													"var resrouceAbout = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"].$[\"rdf:about\"];",
													"var resourceAboutSplit = resrouceAbout.split(\"/\");",
													"var resourceId = resourceAboutSplit[resourceAboutSplit.length-1];",
													"pm.globals.set('requestId', resourceId);",
													"",
													"pm.test(\"Response code should be 201 (created)\", function () {",
													"    pm.response.to.have.status(201);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "53694edb-628d-4044-b35a-1fec5eecd915",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/xml"
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>First prototype request</dcterms:title>\n\t<dcterms:description>Test</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{server_address}}/{{server_context}}/services/serviceProviders/A0/resources/automationPlans/0\" />\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>sourceGit</oslc:name>\n\t\t\t<rdf:value>https://github.com/od42/test.git</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>buildCommand</oslc:name>\n\t\t\t<rdf:value>gcc -g TestEchoProgram.cpp -o my_echo</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>launchCommand</oslc:name>\n\t\t\t<rdf:value>./my_echo</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/serviceProviders/A0/resources/createAutoRequest",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"serviceProviders",
												"A0",
												"resources",
												"createAutoRequest"
											]
										}
									},
									"response": []
								},
								{
									"name": "check the result",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2ac8143a-00b8-4352-9f49-a6cfaba6f982",
												"exec": [
													"var requestId = pm.globals.get('requestId');",
													"var serverAddr = pm.variables.get(\"server_address\");",
													"var server_context = pm.variables.get(\"server_context\");",
													"",
													"pm.test(\"Response code should be 200 (OK)\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Should be produced by the expected AutoRequest\", function () {",
													"    ",
													"    pm.expect(pm.response.text()).to.include(\":producedByAutomationRequest rdf:resource=\\\"\" + serverAddr + \"/\" + server_context + \"/services/serviceProviders/A0/resources/automationRequests/\" + requestId);",
													"});",
													"",
													"pm.test(\"State should be complete\", function () {",
													"    pm.expect(pm.response.text()).to.include(\":state rdf:resource=\\\"http://open-services.net/ns/auto#complete\\\"/>\");",
													"});",
													"",
													"pm.test(\"Verdict should be passed\", function () {",
													"    pm.expect(pm.response.text()).to.include(\":verdict rdf:resource=\\\"http://open-services.net/ns/auto#passed\\\"/>\");",
													"});",
													"",
													"pm.test(\"Should contain an SUT refference ID \" + requestId, function () {",
													"    pm.expect(pm.response.text()).to.include(\"<fit:createdSUT rdf:resource=\\\"\" + serverAddr + \"/\" + server_context + \"/services/serviceProviders/A0/resources/sUTs/\" + requestId);",
													"});",
													"",
													"pm.test(\"Should contain the Compilation stdout\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"Compilation stdout\");",
													"});",
													"pm.test(\"Check the Compilation stdout\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"# Compilation completed successfully\");",
													"});",
													"pm.test(\"Should contain the Compilation stderr\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"Compilation stderr\");",
													"});",
													"pm.test(\"Check the Compilation stderr\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"<rdf:value rdf:parseType=\\\"Literal\\\"></rdf:value>\");",
													"});",
													"",
													"pm.test(\"Should contain the program Fetching Output\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"Fetching Output\");",
													"});",
													"pm.test(\"Check program fetching output\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"# SUT fetch successful\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "0e22f9d0-a6e8-43bc-8f87-b0861919c0de",
												"exec": [
													"// wait for the request execution to finish",
													"var result_wait_time = pm.variables.get('result_wait_time');",
													"setTimeout(function(){}, [result_wait_time]);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/serviceProviders/A0/resources/automationResults/{{requestId}}",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"serviceProviders",
												"A0",
												"resources",
												"automationResults",
												"{{requestId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "check the SUT",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2ac8143a-00b8-4352-9f49-a6cfaba6f982",
												"exec": [
													"// get global variable to use in this test",
													"var requestId = pm.globals.get('requestId');",
													"var serverAddr = pm.variables.get(\"server_address\");",
													"var server_context = pm.variables.get(\"server_context\");",
													"",
													"pm.test(\"Response code should be 200 (OK)\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"SUT should have the expected ID: \" + requestId, function () {",
													"    pm.expect(pm.response.text()).to.include(\"fit:SUT rdf:about=\\\"\" + serverAddr + \"/\" + server_context + \"/services/serviceProviders/A0/resources/sUTs/\" + requestId);",
													"});",
													"pm.test(\"SUT producedByAutomationRequest should match the AutomationRequest with ID \" + requestId, function () {",
													"    pm.expect(pm.response.text()).to.include(\"oslc_auto:producedByAutomationRequest rdf:resource=\\\"\" + serverAddr + \"/\" + server_context + \"/services/serviceProviders/A0/resources/automationRequests/\" + requestId);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "0e22f9d0-a6e8-43bc-8f87-b0861919c0de",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/serviceProviders/A0/resources/sUTs/{{requestId}}",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"serviceProviders",
												"A0",
												"resources",
												"sUTs",
												"{{requestId}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "compilation error",
							"item": [
								{
									"name": "program with a syntax error",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "28eb1cf1-a957-444a-b541-0affedf688d7",
												"exec": [
													"// save the request ID as a global variable for later tests to use",
													"const response = xml2Json(pm.response.text());",
													"var resrouceAbout = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"].$[\"rdf:about\"];",
													"var resourceAboutSplit = resrouceAbout.split(\"/\");",
													"var resourceId = resourceAboutSplit[resourceAboutSplit.length-1];",
													"pm.globals.set('requestId', resourceId);",
													"",
													"var serverAddr = pm.variables.get(\"server_address\");",
													"",
													"pm.test(\"Response code should be 201 (created)\", function () {",
													"    pm.response.to.have.status(201);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/xml"
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>First prototype request</dcterms:title>\n\t<dcterms:description>Test</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{server_address}}/{{server_context}}/services/serviceProviders/A0/resources/automationPlans/0\" />\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>sourceGit</oslc:name>\n\t\t\t<rdf:value>https://github.com/od42/test-error.git</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>buildCommand</oslc:name>\n\t\t\t<rdf:value>gcc -g TestEchoProgram.cpp -o my_echo</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>launchCommand</oslc:name>\n\t\t\t<rdf:value>./my_echo</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/serviceProviders/A0/resources/createAutoRequest",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"serviceProviders",
												"A0",
												"resources",
												"createAutoRequest"
											]
										}
									},
									"response": []
								},
								{
									"name": "check the result error",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2ac8143a-00b8-4352-9f49-a6cfaba6f982",
												"exec": [
													"var requestId = pm.globals.get('requestId');",
													"var serverAddr = pm.variables.get(\"server_address\");",
													"var server_context = pm.variables.get(\"server_context\");",
													"",
													"pm.test(\"Response code should be 200 (OK)\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Should be produced by the expected AutoRequest\", function () {",
													"    ",
													"    pm.expect(pm.response.text()).to.include(\":producedByAutomationRequest rdf:resource=\\\"\" + serverAddr + \"/\" + server_context + \"/services/serviceProviders/A0/resources/automationRequests/\" + requestId);",
													"});",
													"",
													"pm.test(\"State should be complete\", function () {",
													"    pm.expect(pm.response.text()).to.include(\":state rdf:resource=\\\"http://open-services.net/ns/auto#complete\\\"/>\");",
													"});",
													"",
													"pm.test(\"Verdict should be failed\", function () {",
													"    pm.expect(pm.response.text()).to.include(\":verdict rdf:resource=\\\"http://open-services.net/ns/auto#failed\\\"/>\");",
													"});",
													"",
													"pm.test(\"Should not contain an SUT refference\", function () {",
													"    pm.expect(pm.response.text()).to.not.include(\"<fit:createdSUT rdf:resource=\\\"\" + serverAddr + \"/\" + server_context + \"/services/serviceProviders/A0/resources/sUTs/\");",
													"});",
													"",
													"pm.test(\"Should contain the Compilation stdout\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"Compilation stdout\");",
													"});",
													"pm.test(\"Check the Compilation stdout\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"# Compilation failed (returned non-zero: 1)\");",
													"});",
													"pm.test(\"Should contain the Compilation stderr\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"Compilation stderr\");",
													"});",
													"pm.test(\"Check the Compilation stderr\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"TestEchoProgram.cpp: In function \");",
													"    pm.expect(pm.response.text()).to.include(\"int main(int, char**)\");",
													"});",
													"",
													"pm.test(\"Should contain the program Fetching Output\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"Fetching Output\");",
													"});",
													"pm.test(\"Check program fetching output\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"# SUT fetch successful\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "0e22f9d0-a6e8-43bc-8f87-b0861919c0de",
												"exec": [
													"// wait for the request execution to finish",
													" var result_wait_time = pm.variables.get('result_wait_time'); setTimeout(function(){}, [result_wait_time]);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/serviceProviders/A0/resources/automationResults/{{requestId}}",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"serviceProviders",
												"A0",
												"resources",
												"automationResults",
												"{{requestId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "check that SUT does not exist",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2ac8143a-00b8-4352-9f49-a6cfaba6f982",
												"exec": [
													"pm.test(\"Response code should be 404 (not found)\", function () {",
													"    pm.response.to.have.status(404);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "0e22f9d0-a6e8-43bc-8f87-b0861919c0de",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/serviceProviders/A0/resources/sUTs/{{requestId}}",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"serviceProviders",
												"A0",
												"resources",
												"sUTs",
												"{{requestId}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "file not found error",
							"item": [
								{
									"name": "non existent file",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "28eb1cf1-a957-444a-b541-0affedf688d7",
												"exec": [
													"// save the request ID as a global variable for later tests to use",
													"const response = xml2Json(pm.response.text());",
													"var resrouceAbout = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"].$[\"rdf:about\"];",
													"var resourceAboutSplit = resrouceAbout.split(\"/\");",
													"var resourceId = resourceAboutSplit[resourceAboutSplit.length-1];",
													"pm.globals.set('requestId', resourceId);",
													"",
													"var serverAddr = pm.variables.get(\"server_address\");",
													"",
													"pm.test(\"Response code should be 201 (created)\", function () {",
													"    pm.response.to.have.status(201);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/xml"
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>First prototype request</dcterms:title>\n\t<dcterms:description>Test</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{server_address}}/{{server_context}}/services/serviceProviders/A0/resources/automationPlans/0\" />\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>sourceGit</oslc:name>\n\t\t\t<rdf:value>https://github.com/od42/non-existent-repo.git</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>buildCommand</oslc:name>\n\t\t\t<rdf:value>gcc -g TestEchoProgram.cpp -o my_echo</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>launchCommand</oslc:name>\n\t\t\t<rdf:value>./my_echo</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/serviceProviders/A0/resources/createAutoRequest",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"serviceProviders",
												"A0",
												"resources",
												"createAutoRequest"
											]
										}
									},
									"response": []
								},
								{
									"name": "check the result error",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2ac8143a-00b8-4352-9f49-a6cfaba6f982",
												"exec": [
													"var requestId = pm.globals.get('requestId');",
													"var serverAddr = pm.variables.get(\"server_address\");",
													"var server_context = pm.variables.get(\"server_context\");",
													"",
													"pm.test(\"Response code should be 200 (OK)\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Should be produced by the expected AutoRequest\", function () {",
													"    ",
													"    pm.expect(pm.response.text()).to.include(\":producedByAutomationRequest rdf:resource=\\\"\" + serverAddr + \"/\" + server_context + \"/services/serviceProviders/A0/resources/automationRequests/\" + requestId);",
													"});",
													"",
													"pm.test(\"State should be complete\", function () {",
													"    pm.expect(pm.response.text()).to.include(\":state rdf:resource=\\\"http://open-services.net/ns/auto#complete\\\"/>\");",
													"});",
													"",
													"pm.test(\"Verdict should be error\", function () {",
													"    pm.expect(pm.response.text()).to.include(\":verdict rdf:resource=\\\"http://open-services.net/ns/auto#error\\\"/>\");",
													"});",
													"",
													"pm.test(\"Should not contain an SUT refference\", function () {",
													"    pm.expect(pm.response.text()).to.not.include(\"<fit:createdSUT rdf:resource=\\\"\" + serverAddr + \"/\" + server_context + \"/services/serviceProviders/A0/resources/sUTs/\");",
													"});",
													"",
													"pm.test(\"Should not contain the Compilation stdout\", function () {",
													"    pm.expect(pm.response.text()).to.not.include(\"Compilation stdout\");",
													"});",
													"pm.test(\"Should not contain the Compilation stderr\", function () {",
													"    pm.expect(pm.response.text()).to.not.include(\"Compilation stderr\");",
													"});",
													"",
													"pm.test(\"Should contain the program Fetching Output\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"Fetching Output\");",
													"});",
													"pm.test(\"Check program fetching output\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"# SUT fetch failed\\nGit clone failed: https://github.com/od42/non-existent-repo.git: Authentication is required but no CredentialsProvider has been registered\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "0e22f9d0-a6e8-43bc-8f87-b0861919c0de",
												"exec": [
													"// wait for the request execution to finish",
													" var result_wait_time = pm.variables.get('result_wait_time'); setTimeout(function(){}, [result_wait_time]);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/serviceProviders/A0/resources/automationResults/{{requestId}}",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"serviceProviders",
												"A0",
												"resources",
												"automationResults",
												"{{requestId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "check that SUT does not exist",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2ac8143a-00b8-4352-9f49-a6cfaba6f982",
												"exec": [
													"pm.test(\"Response code should be 404 (not found)\", function () {",
													"    pm.response.to.have.status(404);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "0e22f9d0-a6e8-43bc-8f87-b0861919c0de",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/serviceProviders/A0/resources/sUTs/{{requestId}}",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"serviceProviders",
												"A0",
												"resources",
												"sUTs",
												"{{requestId}}"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "cc1a278c-82a0-45d1-a60d-a764aa709b78",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "ccf63fc5-a3f5-400f-aec6-a24c12e4ddb0",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "server unreachable error",
							"item": [
								{
									"name": "unreachable server",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "28eb1cf1-a957-444a-b541-0affedf688d7",
												"exec": [
													"// save the request ID as a global variable for later tests to use",
													"const response = xml2Json(pm.response.text());",
													"var resrouceAbout = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"].$[\"rdf:about\"];",
													"var resourceAboutSplit = resrouceAbout.split(\"/\");",
													"var resourceId = resourceAboutSplit[resourceAboutSplit.length-1];",
													"pm.globals.set('requestId', resourceId);",
													"",
													"var serverAddr = pm.variables.get(\"server_address\");",
													"",
													"pm.test(\"Response code should be 201 (created)\", function () {",
													"    pm.response.to.have.status(201);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/xml"
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>First prototype request</dcterms:title>\n\t<dcterms:description>Test</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{server_address}}/{{server_context}}/services/serviceProviders/A0/resources/automationPlans/0\" />\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>sourceGit</oslc:name>\n\t\t\t<rdf:value>http://www.UnreachableServerXXasdfasdfagwer.cz</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>buildCommand</oslc:name>\n\t\t\t<rdf:value>gcc -g TestEchoProgram.cpp -o my_echo</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>launchCommand</oslc:name>\n\t\t\t<rdf:value>./my_echo</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/serviceProviders/A0/resources/createAutoRequest",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"serviceProviders",
												"A0",
												"resources",
												"createAutoRequest"
											]
										}
									},
									"response": []
								},
								{
									"name": "check the result error",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2ac8143a-00b8-4352-9f49-a6cfaba6f982",
												"exec": [
													"var requestId = pm.globals.get('requestId');",
													"var serverAddr = pm.variables.get(\"server_address\");",
													"var server_context = pm.variables.get(\"server_context\");",
													"",
													"pm.test(\"Response code should be 200 (OK)\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Should be produced by the expected AutoRequest\", function () {",
													"    ",
													"    pm.expect(pm.response.text()).to.include(\":producedByAutomationRequest rdf:resource=\\\"\" + serverAddr + \"/\" + server_context + \"/services/serviceProviders/A0/resources/automationRequests/\" + requestId);",
													"});",
													"",
													"pm.test(\"State should be complete\", function () {",
													"    pm.expect(pm.response.text()).to.include(\":state rdf:resource=\\\"http://open-services.net/ns/auto#complete\\\"/>\");",
													"});",
													"",
													"pm.test(\"Verdict should be error\", function () {",
													"    pm.expect(pm.response.text()).to.include(\":verdict rdf:resource=\\\"http://open-services.net/ns/auto#error\\\"/>\");",
													"});",
													"",
													"pm.test(\"Should not contain an SUT refference\", function () {",
													"    pm.expect(pm.response.text()).to.not.include(\"<fit:createdSUT rdf:resource=\\\"\" + serverAddr + \"/\" + server_context + \"/services/serviceProviders/A0/resources/sUTs/\");",
													"});",
													"",
													"pm.test(\"Should not contain the Compilation stdout\", function () {",
													"    pm.expect(pm.response.text()).to.not.include(\"Compilation stdout\");",
													"});",
													"pm.test(\"Should not contain the Compilation stderr\", function () {",
													"    pm.expect(pm.response.text()).to.not.include(\"Compilation stderr\");",
													"});",
													"",
													"pm.test(\"Should contain the program Fetching Output\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"Fetching Output\");",
													"});",
													"pm.test(\"Check program fetching output\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"# SUT fetch failed\\nGit clone failed: Exception caught during execution of fetch command\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "0e22f9d0-a6e8-43bc-8f87-b0861919c0de",
												"exec": [
													"// wait for the request execution to finish",
													" var result_wait_time = pm.variables.get('result_wait_time'); setTimeout(function(){}, [result_wait_time]);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/serviceProviders/A0/resources/automationResults/{{requestId}}",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"serviceProviders",
												"A0",
												"resources",
												"automationResults",
												"{{requestId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "check that SUT does not exist",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2ac8143a-00b8-4352-9f49-a6cfaba6f982",
												"exec": [
													"pm.test(\"Response code should be 404 (not found)\", function () {",
													"    pm.response.to.have.status(404);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "0e22f9d0-a6e8-43bc-8f87-b0861919c0de",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/serviceProviders/A0/resources/sUTs/{{requestId}}",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"serviceProviders",
												"A0",
												"resources",
												"sUTs",
												"{{requestId}}"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "cc1a278c-82a0-45d1-a60d-a764aa709b78",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "ccf63fc5-a3f5-400f-aec6-a24c12e4ddb0",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "8de0b840-ed3f-4134-b0b6-a207af3cb243",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "5a4dd37a-ffd0-4a3e-8801-381b2a805da2",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "sourceBase64",
					"item": [
						{
							"name": "basic function",
							"item": [
								{
									"name": "basic",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "59e5d465-a6cc-4867-9b84-0f9c9950eaaf",
												"exec": [
													"// save the request ID as a global variable for later tests to use",
													"const response = xml2Json(pm.response.text());",
													"var resrouceAbout = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"].$[\"rdf:about\"];",
													"var resourceAboutSplit = resrouceAbout.split(\"/\");",
													"var resourceId = resourceAboutSplit[resourceAboutSplit.length-1];",
													"pm.globals.set('requestId', resourceId);",
													"",
													"pm.test(\"Response code should be 201 (created)\", function () {",
													"    pm.response.to.have.status(201);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "5c41fa71-fc00-4103-88ef-819dc64a4789",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/xml"
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>First prototype request</dcterms:title>\n\t<dcterms:description>Test</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"http://localhost:8081/compilation/services/serviceProviders/A0/resources/automationPlans/0\" />\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>sourceBase64</oslc:name>\n\t\t\t<rdf:value>TestEchoProgram.cpp\nI2luY2x1ZGUgPHN0ZGlvLmg+CgppbnQgbWFpbihpbnQgYXJnYywgY2hhcioqIGFyZ3YpCnsKCXByaW50ZigiJXNcbiIsIGFyZ3ZbMV0pOwoJcmV0dXJuIDA7Cn0K</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>buildCommand</oslc:name>\n\t\t\t<rdf:value>gcc -g TestEchoProgram.cpp -o my_echo</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>launchCommand</oslc:name>\n\t\t\t<rdf:value>./my_echo</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/serviceProviders/A0/resources/createAutoRequest",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"serviceProviders",
												"A0",
												"resources",
												"createAutoRequest"
											]
										}
									},
									"response": []
								},
								{
									"name": "check the result",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ed0d6330-0cea-4303-883b-c9aa037bac1c",
												"exec": [
													"var requestId = pm.globals.get('requestId');",
													"var serverAddr = pm.variables.get(\"server_address\");",
													"var server_context = pm.variables.get(\"server_context\");",
													"",
													"pm.test(\"Response code should be 200 (OK)\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Should be produced by the expected AutoRequest\", function () {",
													"    ",
													"    pm.expect(pm.response.text()).to.include(\":producedByAutomationRequest rdf:resource=\\\"\" + serverAddr + \"/\" + server_context + \"/services/serviceProviders/A0/resources/automationRequests/\" + requestId);",
													"});",
													"",
													"pm.test(\"State should be complete\", function () {",
													"    pm.expect(pm.response.text()).to.include(\":state rdf:resource=\\\"http://open-services.net/ns/auto#complete\\\"/>\");",
													"});",
													"",
													"pm.test(\"Verdict should be passed\", function () {",
													"    pm.expect(pm.response.text()).to.include(\":verdict rdf:resource=\\\"http://open-services.net/ns/auto#passed\\\"/>\");",
													"});",
													"",
													"pm.test(\"Should contain an SUT refference ID \" + requestId, function () {",
													"    pm.expect(pm.response.text()).to.include(\"<fit:createdSUT rdf:resource=\\\"\" + serverAddr + \"/\" + server_context + \"/services/serviceProviders/A0/resources/sUTs/\" + requestId);",
													"});",
													"",
													"",
													"pm.test(\"Should contain the Compilation stdout\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"Compilation stdout\");",
													"});",
													"pm.test(\"Check the Compilation stdout\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"# Compilation completed successfully\");",
													"});",
													"pm.test(\"Should contain the Compilation stderr\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"Compilation stderr\");",
													"});",
													"pm.test(\"Check the Compilation stderr\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"<rdf:value rdf:parseType=\\\"Literal\\\"></rdf:value>\");",
													"});",
													"",
													"pm.test(\"Should contain the program Fetching Output\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"Fetching Output\");",
													"});",
													"pm.test(\"Check program fetching output\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"# SUT fetch successful\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "532b3123-1bca-4cdc-b2fb-586af326db87",
												"exec": [
													"// wait for the request execution to finish",
													"var result_wait_time = pm.variables.get('result_wait_time');",
													"setTimeout(function(){}, [result_wait_time]);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/serviceProviders/A0/resources/automationResults/{{requestId}}",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"serviceProviders",
												"A0",
												"resources",
												"automationResults",
												"{{requestId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "check the SUT",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c5970448-8f94-46ac-832a-b11fb4c61994",
												"exec": [
													"// get global variable to use in this test",
													"var requestId = pm.globals.get('requestId');",
													"var serverAddr = pm.variables.get(\"server_address\");",
													"var server_context = pm.variables.get(\"server_context\");",
													"",
													"pm.test(\"Response code should be 200 (OK)\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"SUT should have the expected ID: \" + requestId, function () {",
													"    pm.expect(pm.response.text()).to.include(\"fit:SUT rdf:about=\\\"\" + serverAddr + \"/\" + server_context + \"/services/serviceProviders/A0/resources/sUTs/\" + requestId);",
													"});",
													"pm.test(\"SUT producedByAutomationRequest should match the AutomationRequest with ID \" + requestId, function () {",
													"    pm.expect(pm.response.text()).to.include(\"oslc_auto:producedByAutomationRequest rdf:resource=\\\"\" + serverAddr + \"/\" + server_context + \"/services/serviceProviders/A0/resources/automationRequests/\" + requestId);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "62b2a5d6-45dd-4d2e-85fc-fe42a439d510",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/serviceProviders/A0/resources/sUTs/{{requestId}}",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"serviceProviders",
												"A0",
												"resources",
												"sUTs",
												"{{requestId}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "invalid characters error",
							"item": [
								{
									"name": "invalid chars",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0a81d386-53df-42a0-b6ed-ebd87d104a6d",
												"exec": [
													"// save the request ID as a global variable for later tests to use",
													"const response = xml2Json(pm.response.text());",
													"var resrouceAbout = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"].$[\"rdf:about\"];",
													"var resourceAboutSplit = resrouceAbout.split(\"/\");",
													"var resourceId = resourceAboutSplit[resourceAboutSplit.length-1];",
													"pm.globals.set('requestId', resourceId);",
													"",
													"var serverAddr = pm.variables.get(\"server_address\");",
													"",
													"pm.test(\"Response code should be 201 (created)\", function () {",
													"    pm.response.to.have.status(201);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/xml"
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>First prototype request</dcterms:title>\n\t<dcterms:description>Test</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"http://localhost:8081/compilation/services/serviceProviders/A0/resources/automationPlans/0\" />\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>sourceBase64</oslc:name>\n\t\t\t<rdf:value>TestEchoProgram.cpp\n\t\t\tI2luY2x1ZGUgPHN0ZGlvLmg+CgppbnQgbWFpbihpbnQgYXJnYywgY2hhcioqIGFyZ3YpCnsKCXByaW50ZigiJXNcbiIsIGFyZ3ZbMV0pOwoJcmV0dXJuIDA7Cn0K</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>buildCommand</oslc:name>\n\t\t\t<rdf:value>gcc -g TestEchoProgram.cpp -o my_echo</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>launchCommand</oslc:name>\n\t\t\t<rdf:value>./my_echo</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/serviceProviders/A0/resources/createAutoRequest",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"serviceProviders",
												"A0",
												"resources",
												"createAutoRequest"
											]
										}
									},
									"response": []
								},
								{
									"name": "check the result error",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c6c73b7d-b49f-4d6e-993d-c9742a565693",
												"exec": [
													"var requestId = pm.globals.get('requestId');",
													"var serverAddr = pm.variables.get(\"server_address\");",
													"var server_context = pm.variables.get(\"server_context\");",
													"",
													"pm.test(\"Response code should be 200 (OK)\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Should be produced by the expected AutoRequest\", function () {",
													"    ",
													"    pm.expect(pm.response.text()).to.include(\":producedByAutomationRequest rdf:resource=\\\"\" + serverAddr + \"/\" + server_context + \"/services/serviceProviders/A0/resources/automationRequests/\" + requestId);",
													"});",
													"",
													"pm.test(\"State should be complete\", function () {",
													"    pm.expect(pm.response.text()).to.include(\":state rdf:resource=\\\"http://open-services.net/ns/auto#complete\\\"/>\");",
													"});",
													"",
													"pm.test(\"Verdict should be error\", function () {",
													"    pm.expect(pm.response.text()).to.include(\":verdict rdf:resource=\\\"http://open-services.net/ns/auto#error\\\"/>\");",
													"});",
													"",
													"pm.test(\"Should not contain an SUT refference\", function () {",
													"    pm.expect(pm.response.text()).to.not.include(\"<fit:createdSUT rdf:resource=\\\"\" + serverAddr + \"/\" + server_context + \"/services/serviceProviders/A0/resources/sUTs/\");",
													"});",
													"",
													"pm.test(\"Should not contain the Compilation stdout\", function () {",
													"    pm.expect(pm.response.text()).to.not.include(\"Compilation stdout\");",
													"});",
													"pm.test(\"Should not contain the Compilation stderr\", function () {",
													"    pm.expect(pm.response.text()).to.not.include(\"Compilation stderr\");",
													"});",
													"",
													"pm.test(\"Should contain the program Fetching Output\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"Fetching Output\");",
													"});",
													"pm.test(\"Check program fetching output\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"# SUT fetch failed\\nIllegal base64 character \");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "438fa926-415d-4643-b15d-6f7ae4506720",
												"exec": [
													"// wait for the request execution to finish",
													" var result_wait_time = pm.variables.get('result_wait_time'); setTimeout(function(){}, [result_wait_time]);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/serviceProviders/A0/resources/automationResults/{{requestId}}",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"serviceProviders",
												"A0",
												"resources",
												"automationResults",
												"{{requestId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "check that SUT does not exist",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5cab5f68-d3b2-4d5f-8ba4-2b6ad87f8c23",
												"exec": [
													"pm.test(\"Response code should be 404 (not found)\", function () {",
													"    pm.response.to.have.status(404);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f9408115-69c4-479f-b857-28472f0a37c6",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/serviceProviders/A0/resources/sUTs/{{requestId}}",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"serviceProviders",
												"A0",
												"resources",
												"sUTs",
												"{{requestId}}"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "327ce6f0-e824-47f5-a2ed-80deda142496",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "4531ccca-fdf7-4331-aa84-a990c74d77d4",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "missing new line error",
							"item": [
								{
									"name": "missing new line",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4e3bd89f-ee45-49a5-90de-5f80e2b4d655",
												"exec": [
													"// save the request ID as a global variable for later tests to use",
													"const response = xml2Json(pm.response.text());",
													"var resrouceAbout = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"].$[\"rdf:about\"];",
													"var resourceAboutSplit = resrouceAbout.split(\"/\");",
													"var resourceId = resourceAboutSplit[resourceAboutSplit.length-1];",
													"pm.globals.set('requestId', resourceId);",
													"",
													"var serverAddr = pm.variables.get(\"server_address\");",
													"",
													"pm.test(\"Response code should be 201 (created)\", function () {",
													"    pm.response.to.have.status(201);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/xml"
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>First prototype request</dcterms:title>\n\t<dcterms:description>Test</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"http://localhost:8081/compilation/services/serviceProviders/A0/resources/automationPlans/0\" />\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>sourceBase64</oslc:name>\n\t\t\t<rdf:value>TestEchoProgram.cppI2luY2x1ZGUgPHN0ZGlvLmg+CgppbnQgbWFpbihpbnQgYXJnYywgY2hhcioqIGFyZ3YpCnsKCXByaW50ZigiJXNcbiIsIGFyZ3ZbMV0pOwoJcmV0dXJuIDA7Cn0K</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>buildCommand</oslc:name>\n\t\t\t<rdf:value>gcc -g TestEchoProgram.cpp -o my_echo</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>launchCommand</oslc:name>\n\t\t\t<rdf:value>./my_echo</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/serviceProviders/A0/resources/createAutoRequest",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"serviceProviders",
												"A0",
												"resources",
												"createAutoRequest"
											]
										}
									},
									"response": []
								},
								{
									"name": "base64 no newline",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/xml"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>First prototype request</dcterms:title>\n\t<dcterms:description>Test</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"http://localhost:8081/compilation/services/serviceProviders/A0/resources/automationPlans/0\" />\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>sourceBase64</oslc:name>\n\t\t\t<rdf:value>TestEchoProgram.cppI2luY2x1ZGUgPHN0ZGlvLmg+CgppbnQgbWFpbihpbnQgYXJnYywgY2hhcioqIGFyZ3YpCnsKCXByaW50ZigiJXNcbiIsIGFyZ3ZbMV0pOwoJcmV0dXJuIDA7Cn0K</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>buildCommand</oslc:name>\n\t\t\t<rdf:value>gcc -g TestEchoProgram.cpp -o my_echo</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>launchCommand</oslc:name>\n\t\t\t<rdf:value>./my_echo</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "http://localhost:8081/compilation/services/serviceProviders/A0/resources/createAutoRequest",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8081",
											"path": [
												"compilation",
												"services",
												"serviceProviders",
												"A0",
												"resources",
												"createAutoRequest"
											]
										}
									},
									"response": []
								},
								{
									"name": "check the result error",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4397257d-e02b-4c76-99a4-ab196e836080",
												"exec": [
													"var requestId = pm.globals.get('requestId');",
													"var serverAddr = pm.variables.get(\"server_address\");",
													"var server_context = pm.variables.get(\"server_context\");",
													"",
													"pm.test(\"Response code should be 200 (OK)\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Should be produced by the expected AutoRequest\", function () {",
													"    ",
													"    pm.expect(pm.response.text()).to.include(\":producedByAutomationRequest rdf:resource=\\\"\" + serverAddr + \"/\" + server_context + \"/services/serviceProviders/A0/resources/automationRequests/\" + requestId);",
													"});",
													"",
													"pm.test(\"State should be complete\", function () {",
													"    pm.expect(pm.response.text()).to.include(\":state rdf:resource=\\\"http://open-services.net/ns/auto#complete\\\"/>\");",
													"});",
													"",
													"pm.test(\"Verdict should be error\", function () {",
													"    pm.expect(pm.response.text()).to.include(\":verdict rdf:resource=\\\"http://open-services.net/ns/auto#error\\\"/>\");",
													"});",
													"",
													"pm.test(\"Should not contain an SUT refference\", function () {",
													"    pm.expect(pm.response.text()).to.not.include(\"<fit:createdSUT rdf:resource=\\\"\" + serverAddr + \"/\" + server_context + \"/services/serviceProviders/A0/resources/sUTs/\");",
													"});",
													"",
													"pm.test(\"Should not contain the Compilation stdout\", function () {",
													"    pm.expect(pm.response.text()).to.not.include(\"Compilation stdout\");",
													"});",
													"pm.test(\"Should not contain the Compilation stderr\", function () {",
													"    pm.expect(pm.response.text()).to.not.include(\"Compilation stderr\");",
													"});",
													"",
													"pm.test(\"Should contain the program Fetching Output\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"Fetching Output\");",
													"});",
													"pm.test(\"Check program fetching output\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"# SUT fetch failed\\nInvalid format of sourceBase64 value. No \\\"\\\\n\\\" delimiter found. Expected format: filename\\\\nbase64\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "9eb81b3d-12bc-4d39-9ad1-e0979d882a10",
												"exec": [
													"// wait for the request execution to finish",
													" var result_wait_time = pm.variables.get('result_wait_time'); setTimeout(function(){}, [result_wait_time]);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/serviceProviders/A0/resources/automationResults/{{requestId}}",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"serviceProviders",
												"A0",
												"resources",
												"automationResults",
												"{{requestId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "check that SUT does not exist",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c09a661c-9d99-44ab-8009-aaee510e7f9c",
												"exec": [
													"pm.test(\"Response code should be 404 (not found)\", function () {",
													"    pm.response.to.have.status(404);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "6f56c7f8-3ebd-4afe-994e-1fc03ad583b6",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/serviceProviders/A0/resources/sUTs/{{requestId}}",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"serviceProviders",
												"A0",
												"resources",
												"sUTs",
												"{{requestId}}"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "826beb25-2188-49cd-adc1-35558f152bea",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "eab8e484-3037-48c1-a1d7-79b5901b7632",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "34ad82de-6a41-4f5d-b224-1dc7ac8887a3",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "bff444ad-e1ea-445a-9926-9932a494f04a",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "with zip",
					"item": [
						{
							"name": "sourceUrl",
							"item": [
								{
									"name": "basic",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bebc04bc-1e58-4571-a6df-ca044ca4cdf0",
												"exec": [
													"// save the request ID as a global variable for later tests to use",
													"const response = xml2Json(pm.response.text());",
													"var resrouceAbout = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"].$[\"rdf:about\"];",
													"var resourceAboutSplit = resrouceAbout.split(\"/\");",
													"var resourceId = resourceAboutSplit[resourceAboutSplit.length-1];",
													"pm.globals.set('requestId', resourceId);",
													"",
													"pm.test(\"Response code should be 201 (created)\", function () {",
													"    pm.response.to.have.status(201);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e44a97d4-3d37-4f44-bdc2-e38b7263d24e",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/xml"
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>First prototype request</dcterms:title>\n\t<dcterms:description>Test</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"http://localhost:8081/compilation/services/serviceProviders/A0/resources/automationPlans/0\" />\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>sourceUrl</oslc:name>\n\t\t\t<rdf:value>http://www.stud.fit.vutbr.cz/~xvasic25/TestEchoProgram.zip</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>unpackZip</oslc:name>\n\t\t\t<rdf:value>true</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>buildCommand</oslc:name>\n\t\t\t<rdf:value>gcc -g TestEchoProgram.cpp -o my_echo</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>launchCommand</oslc:name>\n\t\t\t<rdf:value>./my_echo</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/serviceProviders/A0/resources/createAutoRequest",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"serviceProviders",
												"A0",
												"resources",
												"createAutoRequest"
											]
										}
									},
									"response": []
								},
								{
									"name": "check the result",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3d8c565b-61ad-4f7e-b263-43a48e13fb9c",
												"exec": [
													"var requestId = pm.globals.get('requestId');",
													"var serverAddr = pm.variables.get(\"server_address\");",
													"var server_context = pm.variables.get(\"server_context\");",
													"",
													"pm.test(\"Response code should be 200 (OK)\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Should be produced by the expected AutoRequest\", function () {",
													"    ",
													"    pm.expect(pm.response.text()).to.include(\":producedByAutomationRequest rdf:resource=\\\"\" + serverAddr + \"/\" + server_context + \"/services/serviceProviders/A0/resources/automationRequests/\" + requestId);",
													"});",
													"",
													"pm.test(\"State should be complete\", function () {",
													"    pm.expect(pm.response.text()).to.include(\":state rdf:resource=\\\"http://open-services.net/ns/auto#complete\\\"/>\");",
													"});",
													"",
													"pm.test(\"Verdict should be passed\", function () {",
													"    pm.expect(pm.response.text()).to.include(\":verdict rdf:resource=\\\"http://open-services.net/ns/auto#passed\\\"/>\");",
													"});",
													"",
													"pm.test(\"Should contain an SUT refference ID \" + requestId, function () {",
													"    pm.expect(pm.response.text()).to.include(\"<fit:createdSUT rdf:resource=\\\"\" + serverAddr + \"/\" + server_context + \"/services/serviceProviders/A0/resources/sUTs/\" + requestId);",
													"});",
													"",
													"",
													"pm.test(\"Should contain the Compilation stdout\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"Compilation stdout\");",
													"});",
													"pm.test(\"Check the Compilation stdout\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"# Compilation completed successfully\");",
													"});",
													"pm.test(\"Should contain the Compilation stderr\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"Compilation stderr\");",
													"});",
													"pm.test(\"Check the Compilation stderr\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"<rdf:value rdf:parseType=\\\"Literal\\\"></rdf:value>\");",
													"});",
													"",
													"pm.test(\"Should contain the program Fetching Output\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"Fetching Output\");",
													"});",
													"pm.test(\"Check program fetching output\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"# SUT fetch successful\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "4026caf3-e206-4a7d-9009-d085e77de33f",
												"exec": [
													"// wait for the request execution to finish",
													"var result_wait_time = pm.variables.get('result_wait_time');",
													"setTimeout(function(){}, [result_wait_time]);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/serviceProviders/A0/resources/automationResults/{{requestId}}",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"serviceProviders",
												"A0",
												"resources",
												"automationResults",
												"{{requestId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "check the SUT",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "99db6ee8-3465-4aea-b2bd-50c232ab396a",
												"exec": [
													"// get global variable to use in this test",
													"var requestId = pm.globals.get('requestId');",
													"var serverAddr = pm.variables.get(\"server_address\");",
													"var server_context = pm.variables.get(\"server_context\");",
													"",
													"pm.test(\"Response code should be 200 (OK)\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"SUT should have the expected ID: \" + requestId, function () {",
													"    pm.expect(pm.response.text()).to.include(\"fit:SUT rdf:about=\\\"\" + serverAddr + \"/\" + server_context + \"/services/serviceProviders/A0/resources/sUTs/\" + requestId);",
													"});",
													"pm.test(\"SUT producedByAutomationRequest should match the AutomationRequest with ID \" + requestId, function () {",
													"    pm.expect(pm.response.text()).to.include(\"oslc_auto:producedByAutomationRequest rdf:resource=\\\"\" + serverAddr + \"/\" + server_context + \"/services/serviceProviders/A0/resources/automationRequests/\" + requestId);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "97a4cdcd-0339-46c6-9812-8bbeaad34e4c",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/serviceProviders/A0/resources/sUTs/{{requestId}}",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"serviceProviders",
												"A0",
												"resources",
												"sUTs",
												"{{requestId}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "base64",
							"item": [
								{
									"name": "basic",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2ae75da1-8a96-43be-bfd7-62a59b2fb59d",
												"exec": [
													"// save the request ID as a global variable for later tests to use",
													"const response = xml2Json(pm.response.text());",
													"var resrouceAbout = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"].$[\"rdf:about\"];",
													"var resourceAboutSplit = resrouceAbout.split(\"/\");",
													"var resourceId = resourceAboutSplit[resourceAboutSplit.length-1];",
													"pm.globals.set('requestId', resourceId);",
													"",
													"pm.test(\"Response code should be 201 (created)\", function () {",
													"    pm.response.to.have.status(201);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "314b3fcb-d1aa-47bf-b8f5-e99ce7b47b5b",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/xml"
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>First prototype request</dcterms:title>\n\t<dcterms:description>Test</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"http://localhost:8081/compilation/services/serviceProviders/A0/resources/automationPlans/0\" />\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>sourceBase64</oslc:name>\n\t\t\t<rdf:value>TestEchoProgram.zip\nUEsDBBQACAAIABCDvFAAAAAAAAAAAF4AAAATACAAVGVzdEVjaG9Qcm9ncmFtLmNwcFVUDQAHocnPXqHJz16hyc9edXgLAAEE6AMAAAToAwAAU87MS84pTUlVsCkuScnM18uw4+LKzCtRyE3MzNMAMRKL0pN1FJIzEou0tECcMk2uai7OgiKgXJqGkmpxTJ6SDlg82jBW05qLsyi1pLQoT8HAmquWiwsAUEsHCC08KtBXAAAAXgAAAFBLAQIUAxQACAAIABCDvFAtPCrQVwAAAF4AAAATACAAAAAAAAAAAACkgQAAAABUZXN0RWNob1Byb2dyYW0uY3BwVVQNAAehyc9eocnPXqHJz151eAsAAQToAwAABOgDAABQSwUGAAAAAAEAAQBhAAAAuAAAAAAA</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>unpackZip</oslc:name>\n\t\t\t<rdf:value>true</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>buildCommand</oslc:name>\n\t\t\t<rdf:value>gcc -g TestEchoProgram.cpp -o my_echo</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>launchCommand</oslc:name>\n\t\t\t<rdf:value>./my_echo</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/serviceProviders/A0/resources/createAutoRequest",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"serviceProviders",
												"A0",
												"resources",
												"createAutoRequest"
											]
										}
									},
									"response": []
								},
								{
									"name": "check the result",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0385e59c-d5e8-4ad5-afdd-f8640cb73292",
												"exec": [
													"var requestId = pm.globals.get('requestId');",
													"var serverAddr = pm.variables.get(\"server_address\");",
													"var server_context = pm.variables.get(\"server_context\");",
													"",
													"pm.test(\"Response code should be 200 (OK)\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Should be produced by the expected AutoRequest\", function () {",
													"    ",
													"    pm.expect(pm.response.text()).to.include(\":producedByAutomationRequest rdf:resource=\\\"\" + serverAddr + \"/\" + server_context + \"/services/serviceProviders/A0/resources/automationRequests/\" + requestId);",
													"});",
													"",
													"pm.test(\"State should be complete\", function () {",
													"    pm.expect(pm.response.text()).to.include(\":state rdf:resource=\\\"http://open-services.net/ns/auto#complete\\\"/>\");",
													"});",
													"",
													"pm.test(\"Verdict should be passed\", function () {",
													"    pm.expect(pm.response.text()).to.include(\":verdict rdf:resource=\\\"http://open-services.net/ns/auto#passed\\\"/>\");",
													"});",
													"",
													"pm.test(\"Should contain an SUT refference ID \" + requestId, function () {",
													"    pm.expect(pm.response.text()).to.include(\"<fit:createdSUT rdf:resource=\\\"\" + serverAddr + \"/\" + server_context + \"/services/serviceProviders/A0/resources/sUTs/\" + requestId);",
													"});",
													"",
													"",
													"pm.test(\"Should contain the Compilation stdout\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"Compilation stdout\");",
													"});",
													"pm.test(\"Check the Compilation stdout\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"# Compilation completed successfully\");",
													"});",
													"pm.test(\"Should contain the Compilation stderr\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"Compilation stderr\");",
													"});",
													"pm.test(\"Check the Compilation stderr\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"<rdf:value rdf:parseType=\\\"Literal\\\"></rdf:value>\");",
													"});",
													"",
													"pm.test(\"Should contain the program Fetching Output\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"Fetching Output\");",
													"});",
													"pm.test(\"Check program fetching output\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"# SUT fetch successful\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e6812d42-af5b-4c90-ab76-2de1f3e0ee6d",
												"exec": [
													"// wait for the request execution to finish",
													"var result_wait_time = pm.variables.get('result_wait_time');",
													"setTimeout(function(){}, [result_wait_time]);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/serviceProviders/A0/resources/automationResults/{{requestId}}",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"serviceProviders",
												"A0",
												"resources",
												"automationResults",
												"{{requestId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "check the SUT",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "aeb2f396-f4bd-4eb7-a8bd-3e526e165625",
												"exec": [
													"// get global variable to use in this test",
													"var requestId = pm.globals.get('requestId');",
													"var serverAddr = pm.variables.get(\"server_address\");",
													"var server_context = pm.variables.get(\"server_context\");",
													"",
													"pm.test(\"Response code should be 200 (OK)\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"SUT should have the expected ID: \" + requestId, function () {",
													"    pm.expect(pm.response.text()).to.include(\"fit:SUT rdf:about=\\\"\" + serverAddr + \"/\" + server_context + \"/services/serviceProviders/A0/resources/sUTs/\" + requestId);",
													"});",
													"pm.test(\"SUT producedByAutomationRequest should match the AutomationRequest with ID \" + requestId, function () {",
													"    pm.expect(pm.response.text()).to.include(\"oslc_auto:producedByAutomationRequest rdf:resource=\\\"\" + serverAddr + \"/\" + server_context + \"/services/serviceProviders/A0/resources/automationRequests/\" + requestId);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "75c98163-83ed-4017-8bfd-e511f9407172",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/serviceProviders/A0/resources/sUTs/{{requestId}}",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"serviceProviders",
												"A0",
												"resources",
												"sUTs",
												"{{requestId}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "unzip fail",
							"item": [
								{
									"name": "invalid zip",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "402a8c5f-efd0-4d6c-8de2-400b7d3c897c",
												"exec": [
													"// save the request ID as a global variable for later tests to use",
													"const response = xml2Json(pm.response.text());",
													"var resrouceAbout = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"].$[\"rdf:about\"];",
													"var resourceAboutSplit = resrouceAbout.split(\"/\");",
													"var resourceId = resourceAboutSplit[resourceAboutSplit.length-1];",
													"pm.globals.set('requestId', resourceId);",
													"",
													"var serverAddr = pm.variables.get(\"server_address\");",
													"",
													"pm.test(\"Response code should be 201 (created)\", function () {",
													"    pm.response.to.have.status(201);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/xml"
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>First prototype request</dcterms:title>\n\t<dcterms:description>Test</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"http://localhost:8081/compilation/services/serviceProviders/A0/resources/automationPlans/0\" />\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>sourceBase64</oslc:name>\n\t\t\t<rdf:value>TestEchoProgram.cpp\nI2luY2x1ZGUgPHN0ZGlvLmg+CgppbnQgbWFpbihpbnQgYXJnYywgY2hhcioqIGFyZ3YpCnsKCXByaW50ZigiJXNcbiIsIGFyZ3ZbMV0pOwoJcmV0dXJuIDA7Cn0K</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>unpackZip</oslc:name>\n\t\t\t<rdf:value>true</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>buildCommand</oslc:name>\n\t\t\t<rdf:value>gcc -g TestEchoProgram.cpp -o my_echo</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>launchCommand</oslc:name>\n\t\t\t<rdf:value>./my_echo</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/serviceProviders/A0/resources/createAutoRequest",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"serviceProviders",
												"A0",
												"resources",
												"createAutoRequest"
											]
										}
									},
									"response": []
								},
								{
									"name": "check the result error",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "68aed66e-30d8-4530-ad63-ec2ed8b67f71",
												"exec": [
													"var requestId = pm.globals.get('requestId');",
													"var serverAddr = pm.variables.get(\"server_address\");",
													"var server_context = pm.variables.get(\"server_context\");",
													"",
													"pm.test(\"Response code should be 200 (OK)\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Should be produced by the expected AutoRequest\", function () {",
													"    ",
													"    pm.expect(pm.response.text()).to.include(\":producedByAutomationRequest rdf:resource=\\\"\" + serverAddr + \"/\" + server_context + \"/services/serviceProviders/A0/resources/automationRequests/\" + requestId);",
													"});",
													"",
													"pm.test(\"State should be complete\", function () {",
													"    pm.expect(pm.response.text()).to.include(\":state rdf:resource=\\\"http://open-services.net/ns/auto#complete\\\"/>\");",
													"});",
													"",
													"pm.test(\"Verdict should be error\", function () {",
													"    pm.expect(pm.response.text()).to.include(\":verdict rdf:resource=\\\"http://open-services.net/ns/auto#error\\\"/>\");",
													"});",
													"",
													"pm.test(\"Should not contain an SUT refference\", function () {",
													"    pm.expect(pm.response.text()).to.not.include(\"<fit:createdSUT rdf:resource=\\\"\" + serverAddr + \"/\" + server_context + \"/services/serviceProviders/A0/resources/sUTs/\");",
													"});",
													"",
													"pm.test(\"Should not contain the Compilation stdout\", function () {",
													"    pm.expect(pm.response.text()).to.not.include(\"Compilation stdout\");",
													"});",
													"pm.test(\"Should not contain the Compilation stderr\", function () {",
													"    pm.expect(pm.response.text()).to.not.include(\"Compilation stderr\");",
													"});",
													"",
													"pm.test(\"Should contain the program Fetching Output\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"Fetching Output\");",
													"});",
													"pm.test(\"Check program fetching output\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"# SUT fetch failed\\n\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e7eccaa7-e809-43a1-9103-98a5905ad5c2",
												"exec": [
													"// wait for the request execution to finish",
													" var result_wait_time = pm.variables.get('result_wait_time'); setTimeout(function(){}, [result_wait_time]);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/serviceProviders/A0/resources/automationResults/{{requestId}}",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"serviceProviders",
												"A0",
												"resources",
												"automationResults",
												"{{requestId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "check that SUT does not exist",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "01ae0b1a-f5f1-486f-8233-531c096ef635",
												"exec": [
													"pm.test(\"Response code should be 404 (not found)\", function () {",
													"    pm.response.to.have.status(404);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "82c2682d-bdeb-4b05-96eb-a649cc3eff74",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/serviceProviders/A0/resources/sUTs/{{requestId}}",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"serviceProviders",
												"A0",
												"resources",
												"sUTs",
												"{{requestId}}"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "ff79107e-0756-468a-8b31-7e4d8a0e20bc",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "b307a01c-e33b-41cc-a872-f5863b051446",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "80697eff-c402-43b3-868f-cebb18114e86",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "d49dd370-8c36-4aea-a262-7343d69e4697",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "no compilation",
					"item": [
						{
							"name": "basic function",
							"item": [
								{
									"name": "basic",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "41db83c9-063d-41c8-9833-c1679116a67f",
												"exec": [
													"// save the request ID as a global variable for later tests to use",
													"const response = xml2Json(pm.response.text());",
													"var resrouceAbout = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"].$[\"rdf:about\"];",
													"var resourceAboutSplit = resrouceAbout.split(\"/\");",
													"var resourceId = resourceAboutSplit[resourceAboutSplit.length-1];",
													"pm.globals.set('requestId', resourceId);",
													"",
													"pm.test(\"Response code should be 201 (created)\", function () {",
													"    pm.response.to.have.status(201);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "c2a2cd9d-17cc-4998-a575-04e6a2dfd961",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/xml"
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>First prototype request</dcterms:title>\n\t<dcterms:description>Test</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"http://localhost:8081/compilation/services/serviceProviders/A0/resources/automationPlans/0\" />\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>sourceUrl</oslc:name>\n\t\t\t<rdf:value>http://www.stud.fit.vutbr.cz/~xvasic25/TestEchoProgram.cpp</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>launchCommand</oslc:name>\n\t\t\t<rdf:value>./my_echo</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/serviceProviders/A0/resources/createAutoRequest",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"serviceProviders",
												"A0",
												"resources",
												"createAutoRequest"
											]
										}
									},
									"response": []
								},
								{
									"name": "check the result",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6273da47-dbe7-4bd9-96e1-bfc00a37aad8",
												"exec": [
													"var requestId = pm.globals.get('requestId');",
													"var serverAddr = pm.variables.get(\"server_address\");",
													"var server_context = pm.variables.get(\"server_context\");",
													"",
													"pm.test(\"Response code should be 200 (OK)\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Should be produced by the expected AutoRequest\", function () {",
													"    ",
													"    pm.expect(pm.response.text()).to.include(\":producedByAutomationRequest rdf:resource=\\\"\" + serverAddr + \"/\" + server_context + \"/services/serviceProviders/A0/resources/automationRequests/\" + requestId);",
													"});",
													"",
													"pm.test(\"State should be complete\", function () {",
													"    pm.expect(pm.response.text()).to.include(\":state rdf:resource=\\\"http://open-services.net/ns/auto#complete\\\"/>\");",
													"});",
													"",
													"pm.test(\"Verdict should be passed\", function () {",
													"    pm.expect(pm.response.text()).to.include(\":verdict rdf:resource=\\\"http://open-services.net/ns/auto#passed\\\"/>\");",
													"});",
													"",
													"pm.test(\"Should contain an SUT refference ID \" + requestId, function () {",
													"    pm.expect(pm.response.text()).to.include(\"<fit:createdSUT rdf:resource=\\\"\" + serverAddr + \"/\" + server_context + \"/services/serviceProviders/A0/resources/sUTs/\" + requestId);",
													"});",
													"",
													"",
													"pm.test(\"Should not contain the Compilation stdout\", function () {",
													"    pm.expect(pm.response.text()).to.not.include(\"Compilation stdout\");",
													"});",
													"pm.test(\"Should not contain the Compilation stderr\", function () {",
													"    pm.expect(pm.response.text()).to.not.include(\"Compilation stderr\");",
													"});",
													"",
													"pm.test(\"Should contain the program Fetching Output\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"Fetching Output\");",
													"});",
													"pm.test(\"Check program fetching output\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"# SUT fetch successful\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "acfcbd92-fc3c-47ba-ba8d-962fa60691ef",
												"exec": [
													"// wait for the request execution to finish",
													"var result_wait_time = pm.variables.get('result_wait_time');",
													"setTimeout(function(){}, [result_wait_time]);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/serviceProviders/A0/resources/automationResults/{{requestId}}",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"serviceProviders",
												"A0",
												"resources",
												"automationResults",
												"{{requestId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "check the SUT",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c7512414-e0c9-4b61-894d-857337a7e41e",
												"exec": [
													"// get global variable to use in this test",
													"var requestId = pm.globals.get('requestId');",
													"var serverAddr = pm.variables.get(\"server_address\");",
													"var server_context = pm.variables.get(\"server_context\");",
													"",
													"pm.test(\"Response code should be 200 (OK)\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"SUT should have the expected ID: \" + requestId, function () {",
													"    pm.expect(pm.response.text()).to.include(\"fit:SUT rdf:about=\\\"\" + serverAddr + \"/\" + server_context + \"/services/serviceProviders/A0/resources/sUTs/\" + requestId);",
													"});",
													"pm.test(\"SUT producedByAutomationRequest should match the AutomationRequest with ID \" + requestId, function () {",
													"    pm.expect(pm.response.text()).to.include(\"oslc_auto:producedByAutomationRequest rdf:resource=\\\"\" + serverAddr + \"/\" + server_context + \"/services/serviceProviders/A0/resources/automationRequests/\" + requestId);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "4b6647e6-b963-4b5f-82b1-91bb1b15e0ef",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/serviceProviders/A0/resources/sUTs/{{requestId}}",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"serviceProviders",
												"A0",
												"resources",
												"sUTs",
												"{{requestId}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "82165468-821b-43c9-a083-7db86b5abe8f",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "fe116260-53f4-44e4-9180-7f288ccc399e",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Query Capability",
			"item": [
				{
					"name": "pre init some resources",
					"item": [
						{
							"name": "create AutomationRequest",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "28eb1cf1-a957-444a-b541-0affedf688d7",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "53694edb-628d-4044-b35a-1fec5eecd915",
										"exec": [
											"pm.globals.set(\"AutoPlanId\", \"0\");",
											"",
											"pm.globals.set(\"buildCommand\", \"make\");",
											"pm.globals.set(\"launchCommand\", \"./testEcho\");",
											"pm.globals.set(\"sourceType\", \"sourceGit\");",
											"pm.globals.set(\"sourceVal\", \"https://github.com/od42/test.git\");",
											"",
											"pm.globals.set(\"reqCreator\", \"https://pajda.fit.vutbr.cz/xvasic\");",
											"pm.globals.set(\"reqTitle\", \"Test title\");",
											"pm.globals.set(\"reqDescription\", \"Test description\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/xml"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>special title for search term query</dcterms:title>\n\t<dcterms:description>{{reqDescription}}</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{server_address}}/{{server_context}}/services/serviceProviders/A0/resources/automationPlans/{{AutoPlanId}}\" />\n\t<dcterms:creator rdf:resource=\"{{reqCreator}}\"/>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>buildCommand</oslc:name>\n\t\t\t<rdf:value>{{buildCommand}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>launchCommand</oslc:name>\n\t\t\t<rdf:value>{{launchCommand}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>{{sourceType}}</oslc:name>\n\t\t\t<rdf:value>{{sourceVal}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/serviceProviders/A0/resources/createAutoRequest",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"serviceProviders",
										"A0",
										"resources",
										"createAutoRequest"
									]
								}
							},
							"response": []
						},
						{
							"name": "create AutomationRequest Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "28eb1cf1-a957-444a-b541-0affedf688d7",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "53694edb-628d-4044-b35a-1fec5eecd915",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/xml"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>{{reqTitle}}</dcterms:title>\n\t<dcterms:description>{{reqDescription}}</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{server_address}}/{{server_context}}/services/serviceProviders/A0/resources/automationPlans/{{AutoPlanId}}\" />\n\t<dcterms:creator rdf:resource=\"{{reqCreator}}\"/>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>buildCommand</oslc:name>\n\t\t\t<rdf:value>{{buildCommand}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>launchCommand</oslc:name>\n\t\t\t<rdf:value>{{launchCommand}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>{{sourceType}}</oslc:name>\n\t\t\t<rdf:value>{{sourceVal}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/serviceProviders/A0/resources/createAutoRequest",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"serviceProviders",
										"A0",
										"resources",
										"createAutoRequest"
									]
								}
							},
							"response": []
						},
						{
							"name": "create AutomationRequest Copy Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "28eb1cf1-a957-444a-b541-0affedf688d7",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "53694edb-628d-4044-b35a-1fec5eecd915",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/xml"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>{{reqTitle}}</dcterms:title>\n\t<dcterms:description>{{reqDescription}}</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{server_address}}/{{server_context}}/services/serviceProviders/A0/resources/automationPlans/{{AutoPlanId}}\" />\n\t<dcterms:creator rdf:resource=\"{{reqCreator}}\"/>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>buildCommand</oslc:name>\n\t\t\t<rdf:value>{{buildCommand}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>launchCommand</oslc:name>\n\t\t\t<rdf:value>{{launchCommand}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>{{sourceType}}</oslc:name>\n\t\t\t<rdf:value>{{sourceVal}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/serviceProviders/A0/resources/createAutoRequest",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"serviceProviders",
										"A0",
										"resources",
										"createAutoRequest"
									]
								}
							},
							"response": []
						},
						{
							"name": "create AutomationRequest Copy Copy Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "28eb1cf1-a957-444a-b541-0affedf688d7",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "53694edb-628d-4044-b35a-1fec5eecd915",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/xml"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>{{reqTitle}}</dcterms:title>\n\t<dcterms:description>{{reqDescription}}</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{server_address}}/{{server_context}}/services/serviceProviders/A0/resources/automationPlans/{{AutoPlanId}}\" />\n\t<dcterms:creator rdf:resource=\"{{reqCreator}}\"/>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>buildCommand</oslc:name>\n\t\t\t<rdf:value>{{buildCommand}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>launchCommand</oslc:name>\n\t\t\t<rdf:value>{{launchCommand}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>{{sourceType}}</oslc:name>\n\t\t\t<rdf:value>{{sourceVal}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/serviceProviders/A0/resources/createAutoRequest",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"serviceProviders",
										"A0",
										"resources",
										"createAutoRequest"
									]
								}
							},
							"response": []
						},
						{
							"name": "create AutomationRequest Copy Copy Copy Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "28eb1cf1-a957-444a-b541-0affedf688d7",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "53694edb-628d-4044-b35a-1fec5eecd915",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/xml"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>{{reqTitle}}</dcterms:title>\n\t<dcterms:description>{{reqDescription}}</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{server_address}}/{{server_context}}/services/serviceProviders/A0/resources/automationPlans/{{AutoPlanId}}\" />\n\t<dcterms:creator rdf:resource=\"{{reqCreator}}\"/>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>buildCommand</oslc:name>\n\t\t\t<rdf:value>{{buildCommand}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>launchCommand</oslc:name>\n\t\t\t<rdf:value>{{launchCommand}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>{{sourceType}}</oslc:name>\n\t\t\t<rdf:value>{{sourceVal}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/serviceProviders/A0/resources/createAutoRequest",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"serviceProviders",
										"A0",
										"resources",
										"createAutoRequest"
									]
								}
							},
							"response": []
						},
						{
							"name": "create AutomationRequest Copy Copy Copy Copy Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "28eb1cf1-a957-444a-b541-0affedf688d7",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "53694edb-628d-4044-b35a-1fec5eecd915",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/xml"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>{{reqTitle}}</dcterms:title>\n\t<dcterms:description>{{reqDescription}}</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{server_address}}/{{server_context}}/services/serviceProviders/A0/resources/automationPlans/{{AutoPlanId}}\" />\n\t<dcterms:creator rdf:resource=\"{{reqCreator}}\"/>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>buildCommand</oslc:name>\n\t\t\t<rdf:value>{{buildCommand}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>launchCommand</oslc:name>\n\t\t\t<rdf:value>{{launchCommand}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>{{sourceType}}</oslc:name>\n\t\t\t<rdf:value>{{sourceVal}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/serviceProviders/A0/resources/createAutoRequest",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"serviceProviders",
										"A0",
										"resources",
										"createAutoRequest"
									]
								}
							},
							"response": []
						},
						{
							"name": "create AutomationRequest Copy Copy Copy Copy Copy Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "28eb1cf1-a957-444a-b541-0affedf688d7",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "53694edb-628d-4044-b35a-1fec5eecd915",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/xml"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>{{reqTitle}}</dcterms:title>\n\t<dcterms:description>{{reqDescription}}</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{server_address}}/{{server_context}}/services/serviceProviders/A0/resources/automationPlans/{{AutoPlanId}}\" />\n\t<dcterms:creator rdf:resource=\"{{reqCreator}}\"/>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>buildCommand</oslc:name>\n\t\t\t<rdf:value>{{buildCommand}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>launchCommand</oslc:name>\n\t\t\t<rdf:value>{{launchCommand}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>{{sourceType}}</oslc:name>\n\t\t\t<rdf:value>{{sourceVal}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/serviceProviders/A0/resources/createAutoRequest",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"serviceProviders",
										"A0",
										"resources",
										"createAutoRequest"
									]
								}
							},
							"response": []
						},
						{
							"name": "create AutomationRequest Copy Copy Copy Copy Copy Copy Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "28eb1cf1-a957-444a-b541-0affedf688d7",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "53694edb-628d-4044-b35a-1fec5eecd915",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/xml"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>{{reqTitle}}</dcterms:title>\n\t<dcterms:description>{{reqDescription}}</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{server_address}}/{{server_context}}/services/serviceProviders/A0/resources/automationPlans/{{AutoPlanId}}\" />\n\t<dcterms:creator rdf:resource=\"{{reqCreator}}\"/>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>buildCommand</oslc:name>\n\t\t\t<rdf:value>{{buildCommand}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>launchCommand</oslc:name>\n\t\t\t<rdf:value>{{launchCommand}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>{{sourceType}}</oslc:name>\n\t\t\t<rdf:value>{{sourceVal}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/serviceProviders/A0/resources/createAutoRequest",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"serviceProviders",
										"A0",
										"resources",
										"createAutoRequest"
									]
								}
							},
							"response": []
						},
						{
							"name": "create AutomationRequest Copy Copy Copy Copy Copy Copy Copy Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "28eb1cf1-a957-444a-b541-0affedf688d7",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "53694edb-628d-4044-b35a-1fec5eecd915",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/xml"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>{{reqTitle}}</dcterms:title>\n\t<dcterms:description>{{reqDescription}}</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{server_address}}/{{server_context}}/services/serviceProviders/A0/resources/automationPlans/{{AutoPlanId}}\" />\n\t<dcterms:creator rdf:resource=\"{{reqCreator}}\"/>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>buildCommand</oslc:name>\n\t\t\t<rdf:value>{{buildCommand}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>launchCommand</oslc:name>\n\t\t\t<rdf:value>{{launchCommand}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>{{sourceType}}</oslc:name>\n\t\t\t<rdf:value>{{sourceVal}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/serviceProviders/A0/resources/createAutoRequest",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"serviceProviders",
										"A0",
										"resources",
										"createAutoRequest"
									]
								}
							},
							"response": []
						},
						{
							"name": "create AutomationRequest Copy Copy Copy Copy Copy Copy Copy Copy Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "28eb1cf1-a957-444a-b541-0affedf688d7",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "53694edb-628d-4044-b35a-1fec5eecd915",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/xml"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>{{reqTitle}}</dcterms:title>\n\t<dcterms:description>{{reqDescription}}</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{server_address}}/{{server_context}}/services/serviceProviders/A0/resources/automationPlans/{{AutoPlanId}}\" />\n\t<dcterms:creator rdf:resource=\"{{reqCreator}}\"/>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>buildCommand</oslc:name>\n\t\t\t<rdf:value>{{buildCommand}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>launchCommand</oslc:name>\n\t\t\t<rdf:value>{{launchCommand}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>{{sourceType}}</oslc:name>\n\t\t\t<rdf:value>{{sourceVal}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/serviceProviders/A0/resources/createAutoRequest",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"serviceProviders",
										"A0",
										"resources",
										"createAutoRequest"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Query parameters",
					"item": [
						{
							"name": "limit",
							"item": [
								{
									"name": "query no limit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0a881f7a-ec3c-438d-b7bc-4b56f2a65370",
												"exec": [
													"var requestId = pm.globals.get('requestId');",
													"",
													"pm.test(\"Response code should be 200 (OK)\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Check the query result\", function () {",
													"    pm.expect(pm.response.text()).to.not.include(\">0</oslc:totalCount>\");",
													"    pm.expect(pm.response.text()).to.not.include(\">1</oslc:totalCount>\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/rdf+xml",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/serviceProviders/A0/resources/queryAutoResult",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"serviceProviders",
												"A0",
												"resources",
												"queryAutoResult"
											]
										}
									},
									"response": []
								},
								{
									"name": "query with limit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0a881f7a-ec3c-438d-b7bc-4b56f2a65370",
												"exec": [
													"var requestId = pm.globals.get('requestId');",
													"",
													"pm.test(\"Response code should be 200 (OK)\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Check the query result\", function () {",
													"    pm.expect(pm.response.text()).to.include(\">1</oslc:totalCount>\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/serviceProviders/A0/resources/queryAutoResult?limit=1",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"serviceProviders",
												"A0",
												"resources",
												"queryAutoResult"
											],
											"query": [
												{
													"key": "limit",
													"value": "1"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "page",
							"item": [
								{
									"name": "query no page",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0a881f7a-ec3c-438d-b7bc-4b56f2a65370",
												"exec": [
													"var requestId = pm.globals.get('requestId');",
													"",
													"pm.test(\"Response code should be 200 (OK)\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Check the query result\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"<dcterms:identifier>0</dcterms:identifier>\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/serviceProviders/A0/resources/queryAutoPlan",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"serviceProviders",
												"A0",
												"resources",
												"queryAutoPlan"
											]
										}
									},
									"response": []
								},
								{
									"name": "query with page",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0a881f7a-ec3c-438d-b7bc-4b56f2a65370",
												"exec": [
													"var requestId = pm.globals.get('requestId');",
													"",
													"pm.test(\"Response code should be 200 (OK)\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Check the query result\", function () {",
													"    pm.expect(pm.response.text()).to.not.include(\"<dcterms:identifier>0</dcterms:identifier>\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/serviceProviders/A0/resources/queryAutoPlan?page=1",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"serviceProviders",
												"A0",
												"resources",
												"queryAutoPlan"
											],
											"query": [
												{
													"key": "page",
													"value": "1"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "searchTerms",
							"item": [
								{
									"name": "query with searchTerms",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0a881f7a-ec3c-438d-b7bc-4b56f2a65370",
												"exec": [
													"pm.test(\"Response code should be 200 (OK)\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Check the query result\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"special title for search term query\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/rdf+xml",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/serviceProviders/A0/resources/queryAutoResult?oslc.searchTerms=special title for search term query",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"serviceProviders",
												"A0",
												"resources",
												"queryAutoResult"
											],
											"query": [
												{
													"key": "oslc.searchTerms",
													"value": "special title for search term query"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "where",
							"item": [
								{
									"name": "query with where",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0a881f7a-ec3c-438d-b7bc-4b56f2a65370",
												"exec": [
													"pm.test(\"Response code should be 200 (OK)\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Check the query result\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"<dcterms:identifier>0</dcterms:identifier>\");",
													"    pm.expect(pm.response.text()).to.include(\">1</oslc:totalCount>\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/serviceProviders/A0/resources/queryAutoPlan?oslc.prefix=dcterms=<http://purl.org/dc/terms/>&oslc.where=dcterms:identifier=\"0\"",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"serviceProviders",
												"A0",
												"resources",
												"queryAutoPlan"
											],
											"query": [
												{
													"key": "oslc.prefix",
													"value": "dcterms=<http://purl.org/dc/terms/>"
												},
												{
													"key": "oslc.where",
													"value": "dcterms:identifier=\"0\""
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "query AutomationPlans",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0a881f7a-ec3c-438d-b7bc-4b56f2a65370",
								"exec": [
									"pm.test(\"Response code should be 200 (OK)\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"The result should not be empty\", function () {",
									"    pm.expect(pm.response.text()).to.not.include(\">0</oslc:totalCount>\");",
									"});",
									"",
									"pm.test(\"The result should contain AutomationPlans resources\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"oslc_auto:AutomationPlan\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/rdf+xml"
							}
						],
						"url": {
							"raw": "{{server_address}}/{{server_context}}/services/serviceProviders/A0/resources/queryAutoPlan?",
							"host": [
								"{{server_address}}"
							],
							"path": [
								"{{server_context}}",
								"services",
								"serviceProviders",
								"A0",
								"resources",
								"queryAutoPlan"
							],
							"query": [
								{
									"key": "oslc.prefix",
									"value": "dcterms=<http://purl.org/dc/terms/>",
									"disabled": true
								},
								{
									"key": "oslc.where",
									"value": "dcterms:identifier=\"0\"",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "query AutomationRequests",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0a881f7a-ec3c-438d-b7bc-4b56f2a65370",
								"exec": [
									"var requestId = pm.globals.get('requestId');",
									"",
									"pm.test(\"Response code should be 200 (OK)\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"The result should not be empty\", function () {",
									"    pm.expect(pm.response.text()).to.not.include(\">0</oslc:totalCount>\");",
									"});",
									"",
									"pm.test(\"The result should contain AutomationRequest resources\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"oslc_auto:AutomationRequest\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/rdf+xml",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{server_address}}/{{server_context}}/services/serviceProviders/A0/resources/queryAutoRequest",
							"host": [
								"{{server_address}}"
							],
							"path": [
								"{{server_context}}",
								"services",
								"serviceProviders",
								"A0",
								"resources",
								"queryAutoRequest"
							]
						}
					},
					"response": []
				},
				{
					"name": "query AutomationResults",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0a881f7a-ec3c-438d-b7bc-4b56f2a65370",
								"exec": [
									"var requestId = pm.globals.get('requestId');",
									"",
									"pm.test(\"Response code should be 200 (OK)\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"The result should not be empty\", function () {",
									"    pm.expect(pm.response.text()).to.not.include(\">0</oslc:totalCount>\");",
									"});",
									"",
									"pm.test(\"The result should contain AutomationResult resources\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"oslc_auto:AutomationResult\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/rdf+xml",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{server_address}}/{{server_context}}/services/serviceProviders/A0/resources/queryAutoResult",
							"host": [
								"{{server_address}}"
							],
							"path": [
								"{{server_context}}",
								"services",
								"serviceProviders",
								"A0",
								"resources",
								"queryAutoResult"
							]
						}
					},
					"response": []
				},
				{
					"name": "query SUTs",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0a881f7a-ec3c-438d-b7bc-4b56f2a65370",
								"exec": [
									"var requestId = pm.globals.get('requestId');",
									"",
									"pm.test(\"Response code should be 200 (OK)\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"The result should not be empty\", function () {",
									"    pm.expect(pm.response.text()).to.not.include(\">0</oslc:totalCount>\");",
									"});",
									"",
									"pm.test(\"The result should contain SUT resources\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"fit:SUT\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/rdf+xml",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{server_address}}/{{server_context}}/services/serviceProviders/A0/resources/querySUT",
							"host": [
								"{{server_address}}"
							],
							"path": [
								"{{server_context}}",
								"services",
								"serviceProviders",
								"A0",
								"resources",
								"querySUT"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "TODO AutomationResult Update and Delete",
			"item": [],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "8f018b6e-0428-411a-b4ad-325e537a0497",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "daaefd5b-6bb9-447f-8e40-bdd3ce3f7b76",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "ba8e8f6e-107f-4b55-a64c-0a60943b9bbe",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "5cfeaa17-6b34-4068-84be-2d0d2bc6441b",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "28536e06-ea54-45da-a884-ca94461ee480",
			"key": "server_address",
			"value": "http://localhost:8081",
			"type": "string"
		},
		{
			"id": "e432c438-fd81-4e44-8170-273561a523cf",
			"key": "result_wait_time",
			"value": "2000",
			"type": "string"
		},
		{
			"id": "9821a96f-cb2a-43eb-bc2e-971b536b8d53",
			"key": "server_context",
			"value": "compilation",
			"type": "string"
		},
		{
			"id": "61c8d26c-5993-44a3-9cc3-8c017b06b090",
			"key": "sut_folder",
			"value": "/home/od42/matrix/proj_praxe/generic-analysis-adapter/compilation/tmp",
			"type": "string"
		}
	],
	"protocolProfileBehavior": {}
}