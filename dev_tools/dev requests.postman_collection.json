{
	"info": {
		"_postman_id": "cde78f36-e86f-4560-bd3c-c90fdfd03edd",
		"name": "dev requests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "7000912"
	},
	"item": [
		{
			"name": "compilation provider",
			"item": [
				{
					"name": "query",
					"item": [
						{
							"name": "query AutomationPlans",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/rdf+xml",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://localhost:8081/compilation/services/resources/queryAutomationPlan",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8081",
									"path": [
										"compilation",
										"services",
										"resources",
										"queryAutomationPlan"
									],
									"query": [
										{
											"key": "oslc.searchTerms",
											"value": "TextToFind",
											"description": "Full text search in all properties",
											"disabled": true
										},
										{
											"key": "oslc.where",
											"value": "dcterms:identifier=\"0\"",
											"description": "Equality of a certain property (supports INT, String, and URL). Needs to be used with oslc.prefix.",
											"disabled": true
										},
										{
											"key": "oslc.prefix",
											"value": "dcterms=<http://purl.org/dc/terms/>",
											"description": "Define prefixes used in oslc.where",
											"disabled": true
										},
										{
											"key": "limit",
											"value": "20",
											"description": "Number of resources per response",
											"disabled": true
										},
										{
											"key": "page",
											"value": "0",
											"description": "Number of resources to skip (cycle through pages)",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "query AutomationRequests",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/rdf+xml",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://localhost:8081/compilation/services/resources/queryAutomationRequest",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8081",
									"path": [
										"compilation",
										"services",
										"resources",
										"queryAutomationRequest"
									],
									"query": [
										{
											"key": "oslc.searchTerms",
											"value": "TextToFind",
											"description": "Full text search in all properties",
											"disabled": true
										},
										{
											"key": "oslc.where",
											"value": "dcterms:identifier=\"0\"",
											"description": "Equality of a certain property (supports INT, String, and URL). Needs to be used with oslc.prefix.",
											"disabled": true
										},
										{
											"key": "oslc.prefix",
											"value": "dcterms=<http://purl.org/dc/terms/>",
											"description": "Define prefixes used in oslc.where",
											"disabled": true
										},
										{
											"key": "limit",
											"value": "20",
											"description": "Number of resources per response",
											"disabled": true
										},
										{
											"key": "page",
											"value": "0",
											"description": "Number of resources to skip (cycle through pages)",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "query AutomationResults",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"url": {
									"raw": "http://localhost:8081/compilation/services/resources/queryAutomationResult",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8081",
									"path": [
										"compilation",
										"services",
										"resources",
										"queryAutomationResult"
									],
									"query": [
										{
											"key": "oslc.searchTerms",
											"value": "TextToFind",
											"description": "Full text search in all properties",
											"disabled": true
										},
										{
											"key": "oslc.where",
											"value": "dcterms:identifier=\"0\"",
											"description": "Equality of a certain property (supports INT, String, and URL). Needs to be used with oslc.prefix.",
											"disabled": true
										},
										{
											"key": "oslc.prefix",
											"value": "dcterms=<http://purl.org/dc/terms/>",
											"description": "Define prefixes used in oslc.where",
											"disabled": true
										},
										{
											"key": "limit",
											"value": "20",
											"description": "Number of resources per response",
											"disabled": true
										},
										{
											"key": "page",
											"value": "0",
											"description": "Number of resources to skip (cycle through pages)",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "query SUT",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"url": {
									"raw": "http://localhost:8081/compilation/services/resources/querySUT",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8081",
									"path": [
										"compilation",
										"services",
										"resources",
										"querySUT"
									],
									"query": [
										{
											"key": "oslc.searchTerms",
											"value": "TextToFind",
											"description": "Full text search in all properties",
											"disabled": true
										},
										{
											"key": "oslc.where",
											"value": "dcterms:identifier=\"0\"",
											"description": "Equality of a certain property (supports INT, String, and URL). Needs to be used with oslc.prefix.",
											"disabled": true
										},
										{
											"key": "oslc.prefix",
											"value": "dcterms=<http://purl.org/dc/terms/>",
											"description": "Define prefixes used in oslc.where",
											"disabled": true
										},
										{
											"key": "limit",
											"value": "20",
											"description": "Number of resources per response",
											"disabled": true
										},
										{
											"key": "page",
											"value": "0",
											"description": "Number of resources to skip (cycle through pages)",
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "compile File URL",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/xml",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>First prototype request</dcterms:title>\n\t<dcterms:description>Test</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"http://localhost:8081/compilation/services/resources/automationPlans/0\" />\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>sourceUrl</oslc:name>\n\t\t\t<rdf:value>http://www.stud.fit.vutbr.cz/~xvasic25/TestEchoProgram.cpp</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>buildCommand</oslc:name>\n\t\t\t<rdf:value>gcc -g TestEchoProgram.cpp -o my_echo</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>launchCommand</oslc:name>\n\t\t\t<rdf:value>./my_echo</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>"
						},
						"url": {
							"raw": "http://localhost:8081/compilation/services/resources/createAutomationRequest",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8081",
							"path": [
								"compilation",
								"services",
								"resources",
								"createAutomationRequest"
							]
						}
					},
					"response": []
				},
				{
					"name": "compile Git",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:creator rdf:resource=\"https://pajda.fit.vutbr.cz/xvasic\"/>\n\t<dcterms:title>First prototype request</dcterms:title>\n\t<dcterms:description>Test</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"http://localhost:8081/compilation/services/resources/automationPlans/0\" />\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>sourceGit</oslc:name>\n\t\t\t<rdf:value>https://github.com/od42/test.git</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>buildCommand</oslc:name>\n\t\t\t<rdf:value>make</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>launchCommand</oslc:name>\n\t\t\t<rdf:value>./testEcho</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>"
						},
						"url": {
							"raw": "http://localhost:8081/compilation/services/resources/createAutomationRequest",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8081",
							"path": [
								"compilation",
								"services",
								"resources",
								"createAutomationRequest"
							]
						}
					},
					"response": []
				},
				{
					"name": "compile URL zip",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>First prototype request</dcterms:title>\n\t<dcterms:description>Test</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"http://localhost:8081/compilation/services/resources/automationPlans/0\" />\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>sourceUrl</oslc:name>\n\t\t\t<rdf:value>http://www.stud.fit.vutbr.cz/~xvasic25/TestEchoProgram.zip</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>unpackZip</oslc:name>\n\t\t\t<rdf:value>true</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>buildCommand</oslc:name>\n\t\t\t<rdf:value>gcc -g TestEchoProgram.cpp -o my_echo</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>launchCommand</oslc:name>\n\t\t\t<rdf:value>./my_echo</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>"
						},
						"url": {
							"raw": "http://localhost:8081/compilation/services/resources/createAutomationRequest",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8081",
							"path": [
								"compilation",
								"services",
								"resources",
								"createAutomationRequest"
							]
						}
					},
					"response": []
				},
				{
					"name": "compile base64",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>First prototype request</dcterms:title>\n\t<dcterms:description>Test</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"http://localhost:8081/compilation/services/resources/automationPlans/0\" />\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>sourceBase64</oslc:name>\n\t\t\t<rdf:value>TestEchoProgram.cpp\nI2luY2x1ZGUgPHN0ZGlvLmg+CgppbnQgbWFpbihpbnQgYXJnYywgY2hhcioqIGFyZ3YpCnsKCXByaW50ZigiJXNcbiIsIGFyZ3ZbMV0pOwoJcmV0dXJuIDA7Cn0K</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>buildCommand</oslc:name>\n\t\t\t<rdf:value>gcc -g TestEchoProgram.cpp -o my_echo</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>launchCommand</oslc:name>\n\t\t\t<rdf:value>./my_echo</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>"
						},
						"url": {
							"raw": "http://localhost:8081/compilation/services/resources/createAutomationRequest",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8081",
							"path": [
								"compilation",
								"services",
								"resources",
								"createAutomationRequest"
							]
						}
					},
					"response": []
				},
				{
					"name": "Automation Service Provider",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/rdf+xml"
							}
						],
						"url": {
							"raw": "http://localhost:8081/compilation/services/serviceProviders/A0",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8081",
							"path": [
								"compilation",
								"services",
								"serviceProviders",
								"A0"
							]
						}
					},
					"response": []
				},
				{
					"name": "Service Provider Catologue",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/rdf+xml",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:8081/compilation/services/catalog/singleton",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8081",
							"path": [
								"compilation",
								"services",
								"catalog",
								"singleton"
							]
						}
					},
					"response": []
				},
				{
					"name": "powershell",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/xml",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>First prototype request</dcterms:title>\n\t<dcterms:description>Test</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"http://localhost:8081/compilation/services/resources/automationPlans/0\" />\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>sourceUrl</oslc:name>\n\t\t\t<rdf:value>http://www.stud.fit.vutbr.cz/~xvasic25/TestEchoProgram.cpp</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>buildCommand</oslc:name>\n\t\t\t<rdf:value>ls ; echo \"asdf asdf\"</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>launchCommand</oslc:name>\n\t\t\t<rdf:value>./my_echo</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>"
						},
						"url": {
							"raw": "http://localhost:8081/compilation/services/resources/createAutomationRequest",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8081",
							"path": [
								"compilation",
								"services",
								"resources",
								"createAutomationRequest"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "analysis provider",
			"item": [
				{
					"name": "query",
					"item": [
						{
							"name": "query AutomationPlans",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/rdf+xml",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://localhost:8080/analysis/services/resources/queryAutomationPlan",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"analysis",
										"services",
										"resources",
										"queryAutomationPlan"
									],
									"query": [
										{
											"key": "oslc.searchTerms",
											"value": "TextToFind",
											"description": "Full text search in all properties",
											"disabled": true
										},
										{
											"key": "oslc.where",
											"value": "dcterms:identifier=\"0\"",
											"description": "Equality of a certain property (supports INT, String, and URL). Needs to be used with oslc.prefix.",
											"disabled": true
										},
										{
											"key": "oslc.prefix",
											"value": "dcterms=<http://purl.org/dc/terms/>",
											"description": "Define prefixes used in oslc.where",
											"disabled": true
										},
										{
											"key": "limit",
											"value": "20",
											"description": "Number of resources per response",
											"disabled": true
										},
										{
											"key": "page",
											"value": "0",
											"description": "Number of resources to skip (cycle through pages)",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "query AutomationRequests",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/rdf+xml",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://localhost:8080/analysis/services/resources/queryAutomationRequest",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"analysis",
										"services",
										"resources",
										"queryAutomationRequest"
									],
									"query": [
										{
											"key": "oslc.searchTerms",
											"value": "TextToFind",
											"description": "Full text search in all properties",
											"disabled": true
										},
										{
											"key": "oslc.where",
											"value": "dcterms:identifier=\"0\"",
											"description": "Equality of a certain property (supports INT, String, and URL). Needs to be used with oslc.prefix.",
											"disabled": true
										},
										{
											"key": "oslc.prefix",
											"value": "dcterms=<http://purl.org/dc/terms/>",
											"description": "Define prefixes used in oslc.where",
											"disabled": true
										},
										{
											"key": "limit",
											"value": "20",
											"description": "Number of resources per response",
											"disabled": true
										},
										{
											"key": "page",
											"value": "0",
											"description": "Number of resources to skip (cycle through pages)",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "query AutomationResults",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"url": {
									"raw": "http://localhost:8080/analysis/services/resources/queryAutomationResult",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"analysis",
										"services",
										"resources",
										"queryAutomationResult"
									],
									"query": [
										{
											"key": "oslc.searchTerms",
											"value": "TextToFind",
											"description": "Full text search in all properties",
											"disabled": true
										},
										{
											"key": "oslc.where",
											"value": "dcterms:identifier=\"0\"",
											"description": "Equality of a certain property (supports INT, String, and URL). Needs to be used with oslc.prefix.",
											"disabled": true
										},
										{
											"key": "oslc.prefix",
											"value": "dcterms=<http://purl.org/dc/terms/>",
											"description": "Define prefixes used in oslc.where",
											"disabled": true
										},
										{
											"key": "limit",
											"value": "20",
											"description": "Number of resources per response",
											"disabled": true
										},
										{
											"key": "page",
											"value": "0",
											"description": "Number of resources to skip (cycle through pages)",
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "perun",
					"item": [
						{
							"name": "perun basic usecase",
							"item": [
								{
									"name": "create SUT using the compilation provider Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// save the request ID as a global variable for later tests to use -- used as SUT ID",
													"const response = xml2Json(pm.response.text());",
													"var resrouceAbout = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"].$[\"rdf:about\"];",
													"var resourceAboutSplit = resrouceAbout.split(\"/\");",
													"var requestId = resourceAboutSplit[resourceAboutSplit.length-1];",
													"pm.globals.set('sutId', requestId);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/xml"
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>analysis test</dcterms:title>\n\t<dcterms:description>analysis test</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"http://localhost:8081/compilation/services/resources/automationPlans/0\" />\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>sourceGit</oslc:name>\n\t\t\t<rdf:value>https://github.com/od42/test.git</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>buildCommand</oslc:name>\n\t\t\t<rdf:value>gcc -g TestEchoProgram.cpp -o my_echo</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>launchCommand</oslc:name>\n\t\t\t<rdf:value>./my_echo</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>"
										},
										"url": {
											"raw": "http://localhost:8081/compilation/services/resources/createAutomationRequest",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8081",
											"path": [
												"compilation",
												"services",
												"resources",
												"createAutomationRequest"
											],
											"query": [
												{
													"key": "",
													"value": "",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "init",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// save the request ID as a global variable for later tests to use",
													"const response = xml2Json(pm.response.text());",
													"var resrouceAbout = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"].$[\"rdf:about\"];",
													"var resourceAboutSplit = resrouceAbout.split(\"/\");",
													"var requestId = resourceAboutSplit[resourceAboutSplit.length-1];",
													"pm.globals.set('requestId', requestId);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/xml"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>First prototype request</dcterms:title>\n\t<dcterms:description>Test</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"http://localhost:8080/analysis/services/resources/automationPlans/perun\" />\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>command</oslc:name>\n\t\t\t<rdf:value>init</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>SUT</oslc:name>\n\t\t\t<rdf:value>http://localhost:8081/compilation/services/resources/sUTs/{{sutId}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>outputFileRegex</oslc:name>\n\t\t\t<rdf:value>.*\\.yml</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>"
										},
										"url": {
											"raw": "http://localhost:8080/analysis/services/resources/createAutomationRequest",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"analysis",
												"services",
												"resources",
												"createAutomationRequest"
											]
										}
									},
									"response": []
								},
								{
									"name": "collect",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// save the request ID as a global variable for later tests to use",
													"const response = xml2Json(pm.response.text());",
													"var resrouceAbout = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"].$[\"rdf:about\"];",
													"var resourceAboutSplit = resrouceAbout.split(\"/\");",
													"var requestId = resourceAboutSplit[resourceAboutSplit.length-1];",
													"pm.globals.set('requestId', requestId);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/xml"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>First prototype request</dcterms:title>\n\t<dcterms:description>Test</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"http://localhost:8080/analysis/services/resources/automationPlans/perun\" />\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>command</oslc:name>\n\t\t\t<rdf:value>collect -c ./my_echo -w \"text\" time -w 0 -r 1</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>SUT</oslc:name>\n\t\t\t<rdf:value>http://localhost:8081/compilation/services/resources/sUTs/{{sutId}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>"
										},
										"url": {
											"raw": "http://localhost:8080/analysis/services/resources/createAutomationRequest",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"analysis",
												"services",
												"resources",
												"createAutomationRequest"
											]
										}
									},
									"response": []
								},
								{
									"name": "check output",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://localhost:8080/analysis/services/resources/automationResults/{{requestId}}?Accept=application/rdf+xml",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"analysis",
												"services",
												"resources",
												"automationResults",
												"{{requestId}}"
											],
											"query": [
												{
													"key": "Accept",
													"value": "application/rdf+xml"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "perun showcase adt",
							"item": [
								{
									"name": "git clone",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// save the request ID as a global variable for later tests to use",
													"const response = xml2Json(pm.response.text());",
													"var resrouceAbout = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"].$[\"rdf:about\"];",
													"var resourceAboutSplit = resrouceAbout.split(\"/\");",
													"var requestId = resourceAboutSplit[resourceAboutSplit.length-1];",
													"pm.globals.set('sutId', requestId);",
													"pm.globals.set('requestId', requestId);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/xml"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:creator rdf:resource=\"https://pajda.fit.vutbr.cz/xvasic\"/>\n\t<dcterms:title>First prototype request</dcterms:title>\n\t<dcterms:description>Test</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"http://localhost:8081/compilation/services/resources/automationPlans/0\" />\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>sourceGit</oslc:name>\n\t\t\t<rdf:value>https://github.com/tfiedor/perun-showcase-adt.git</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>buildCommand</oslc:name>\n\t\t\t<rdf:value>make</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>launchCommand</oslc:name>\n\t\t\t<rdf:value>build/list_search</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>"
										},
										"url": {
											"raw": "http://localhost:8081/compilation/services/resources/createAutomationRequest",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8081",
											"path": [
												"compilation",
												"services",
												"resources",
												"createAutomationRequest"
											]
										}
									},
									"response": []
								},
								{
									"name": "perun init -t user",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// save the request ID as a global variable for later tests to use",
													"const response = xml2Json(pm.response.text());",
													"var resrouceAbout = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"].$[\"rdf:about\"];",
													"var resourceAboutSplit = resrouceAbout.split(\"/\");",
													"var requestId = resourceAboutSplit[resourceAboutSplit.length-1];",
													"pm.globals.set('requestId', requestId);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/xml"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>First prototype request</dcterms:title>\n\t<dcterms:description>Test</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"http://localhost:8080/analysis/services/resources/automationPlans/perun\" />\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>command</oslc:name>\n\t\t\t<rdf:value>init -t user</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>SUT</oslc:name>\n\t\t\t<rdf:value>http://localhost:8081/compilation/services/resources/sUTs/{{sutId}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>outputFileRegex</oslc:name>\n\t\t\t<rdf:value>.*\\.yml</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>"
										},
										"url": {
											"raw": "http://localhost:8080/analysis/services/resources/createAutomationRequest",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"analysis",
												"services",
												"resources",
												"createAutomationRequest"
											]
										}
									},
									"response": []
								},
								{
									"name": "local.yml",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/xml"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<rdf:RDF\n    xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n    xmlns:dcterms=\"http://purl.org/dc/terms/\"\n    xmlns:fit=\"http://fit.vutbr.cz/group/verifit/oslc/ns/universal-analysis#\"\n    xmlns:oslc_data=\"http://open-services.net/ns/servicemanagement/1.0/\"\n    xmlns:oslc=\"http://open-services.net/ns/core#\"\n    xmlns:foaf=\"http://xmlns.com/foaf/0.1/#\"\n    xmlns:rdfs=\"http://www.w3.org/2000/01/rdf-schema#\"\n    xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\t\n            <oslc_auto:Contribution>\n                <dcterms:created rdf:datatype=\"http://www.w3.org/2001/XMLSchema#dateTime\"\n        >2020-05-03T18:08:21.441Z</dcterms:created>\n                <dcterms:title rdf:parseType=\"Literal\">local.yml</dcterms:title>\n                <dcterms:description rdf:parseType=\"Literal\">This file was modified or created during execution of this Automation Request. If you want to modify the file (eg. its a configuration file), then post this oslc_auto:Contribution resource to the Contribution creation factory.</dcterms:description>\n                <rdf:value rdf:parseType=\"Literal\">vcs:\n  type: git\n  url: /home/od42/matrix/proj_praxe/generic-analysis-adapter/compilation/tmp/{{sutId}}\n\n## The following sets the executables (binaries / scripts).\n## These will be profiled by selected collectors.\n## Extend the following region with more executables to be profiled:\ncmds:\n- build/list_search\n\n## The following sets argument configurations for the profiled executables\n## Uncomment and edit the following region:\n# args:\n#   - -e\n\n## The following sets the profiling workload for given commands\n## Uncomment and edit the following region:\nworkloads:\n   - 10000\n\n## The following contains the set of collectors (profilers) that will collect performance data.\n## Extend the following region to use more profilers:\ncollectors:\n- name: time\n  params:\n    warmup: 3\n    repeat: 10\n## Try '$ perun collect --help' to obtain list of supported collectors!\n\n## The following contains the ordered list of postprocess phases that are executed after collection.\n## Uncomment and edit the following region (!order matters!):\n# postprocessors:\n#   - name: regression_analysis\n#     params:\n#       method: full\n#   - name: filter\n## Try '$ perun postprocessby --help' to obtain list of supported collectors!\n\n## The following option automatically registers newly collected profiles for current minor version\nprofiles:\n  register_after_run: true\n\n## The following changes the automatically generated name of the profiles\nformat:\n  output_profile_template: '%collector%-of-%cmd%-%workload%-%date%'\n\n## The following options control the degradation checks in repository\ndegradation:\n## Setting the following combination of option to true will make Perun collect new profiles,\n## before checking for degradations and store them in logs at directory .perun/logs/\n  collect_before_check: true\n  log_collect: true\n## Setting this to first (resp. all) will apply the first (resp. all) found check methods\n## for corresponding configurations\n#   apply: first\n## Specification of list of rules for applying degradation checks\n  strategy:\n  - method: average_amount_threshold\n\n## To run your custom steps before any collection (un)comment the following region:\nexecute:\n  pre_run:\n  - make\n  \n  </rdf:value>\n                <fit:absolutePath rdf:parseType=\"Literal\">/home/od42/matrix/proj_praxe/generic-analysis-adapter/compilation/tmp/{{sutId}}/.perun/local.yml</fit:absolutePath>\n            </oslc_auto:Contribution>\n            \n</rdf:RDF>",
											"options": {
												"raw": {
													"language": "xml"
												}
											}
										},
										"url": {
											"raw": "http://localhost:8080/analysis/services/resources/contributions/%252Fhome%252Fod42%252Fmatrix%252Fproj_praxe%252Fgeneric-analysis-adapter%252Fcompilation%252Ftmp%252F{{sutId}}%252F.perun%252Flocal.yml",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"analysis",
												"services",
												"resources",
												"contributions",
												"%252Fhome%252Fod42%252Fmatrix%252Fproj_praxe%252Fgeneric-analysis-adapter%252Fcompilation%252Ftmp%252F{{sutId}}%252F.perun%252Flocal.yml"
											]
										}
									},
									"response": []
								},
								{
									"name": "run matrix",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// save the request ID as a global variable for later tests to use",
													"const response = xml2Json(pm.response.text());",
													"var resrouceAbout = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"].$[\"rdf:about\"];",
													"var resourceAboutSplit = resrouceAbout.split(\"/\");",
													"var requestId = resourceAboutSplit[resourceAboutSplit.length-1];",
													"pm.globals.set('requestId', requestId);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/xml"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>First prototype request</dcterms:title>\n\t<dcterms:description>Test</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"http://localhost:8080/analysis/services/resources/automationPlans/perun\" />\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>command</oslc:name>\n\t\t\t<rdf:value>run matrix</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>SUT</oslc:name>\n\t\t\t<rdf:value>http://localhost:8081/compilation/services/resources/sUTs/{{sutId}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>outputFileRegex</oslc:name>\n\t\t\t<rdf:value>.*\\.perf</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>"
										},
										"url": {
											"raw": "http://localhost:8080/analysis/services/resources/createAutomationRequest",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"analysis",
												"services",
												"resources",
												"createAutomationRequest"
											]
										}
									},
									"response": []
								},
								{
									"name": "check all",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// save the request ID as a global variable for later tests to use",
													"const response = xml2Json(pm.response.text());",
													"var resrouceAbout = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"].$[\"rdf:about\"];",
													"var resourceAboutSplit = resrouceAbout.split(\"/\");",
													"var requestId = resourceAboutSplit[resourceAboutSplit.length-1];",
													"pm.globals.set('requestId', requestId);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/xml"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>First prototype request</dcterms:title>\n\t<dcterms:description>Test</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"http://localhost:8080/analysis/services/resources/automationPlans/perun\" />\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>command</oslc:name>\n\t\t\t<rdf:value>check all</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>SUT</oslc:name>\n\t\t\t<rdf:value>http://localhost:8081/compilation/services/resources/sUTs/{{sutId}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>"
										},
										"url": {
											"raw": "http://localhost:8080/analysis/services/resources/createAutomationRequest",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"analysis",
												"services",
												"resources",
												"createAutomationRequest"
											]
										}
									},
									"response": []
								},
								{
									"name": "check head",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// save the request ID as a global variable for later tests to use",
													"const response = xml2Json(pm.response.text());",
													"var resrouceAbout = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"].$[\"rdf:about\"];",
													"var resourceAboutSplit = resrouceAbout.split(\"/\");",
													"var requestId = resourceAboutSplit[resourceAboutSplit.length-1];",
													"pm.globals.set('requestId', requestId);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/xml"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>First prototype request</dcterms:title>\n\t<dcterms:description>Test</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"http://localhost:8080/analysis/services/resources/automationPlans/perun\" />\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>command</oslc:name>\n\t\t\t<rdf:value>check head</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>SUT</oslc:name>\n\t\t\t<rdf:value>http://localhost:8081/compilation/services/resources/sUTs/{{sutId}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>"
										},
										"url": {
											"raw": "http://localhost:8080/analysis/services/resources/createAutomationRequest",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"analysis",
												"services",
												"resources",
												"createAutomationRequest"
											]
										}
									},
									"response": []
								},
								{
									"name": "check output",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/rdf+xml",
												"type": "text"
											}
										],
										"url": {
											"raw": "http://localhost:8080/analysis/services/resources/automationResults/{{requestId}}?Accept=application/rdf+xml",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"analysis",
												"services",
												"resources",
												"automationResults",
												"{{requestId}}"
											],
											"query": [
												{
													"key": "Accept",
													"value": "application/rdf+xml"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "perun showcase sorts",
							"item": [
								{
									"name": "git clone",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// save the request ID as a global variable for later tests to use",
													"const response = xml2Json(pm.response.text());",
													"var resrouceAbout = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"].$[\"rdf:about\"];",
													"var resourceAboutSplit = resrouceAbout.split(\"/\");",
													"var requestId = resourceAboutSplit[resourceAboutSplit.length-1];",
													"pm.globals.set('sutId', requestId);",
													"pm.globals.set('requestId', requestId);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/xml"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:creator rdf:resource=\"https://pajda.fit.vutbr.cz/xvasic\"/>\n\t<dcterms:title>First prototype request</dcterms:title>\n\t<dcterms:description>Test</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"http://localhost:8081/compilation/services/resources/automationPlans/0\" />\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>sourceGit</oslc:name>\n\t\t\t<rdf:value>https://github.com/tfiedor/perun-showcase-sorts</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>buildCommand</oslc:name>\n\t\t\t<rdf:value>make</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>launchCommand</oslc:name>\n\t\t\t<rdf:value>build/run_sorts</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>"
										},
										"url": {
											"raw": "http://localhost:8081/compilation/services/resources/createAutomationRequest",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8081",
											"path": [
												"compilation",
												"services",
												"resources",
												"createAutomationRequest"
											]
										}
									},
									"response": []
								},
								{
									"name": "perun init -t user",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// save the request ID as a global variable for later tests to use",
													"const response = xml2Json(pm.response.text());",
													"var resrouceAbout = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"].$[\"rdf:about\"];",
													"var resourceAboutSplit = resrouceAbout.split(\"/\");",
													"var requestId = resourceAboutSplit[resourceAboutSplit.length-1];",
													"pm.globals.set('requestId', requestId);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/xml"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>First prototype request</dcterms:title>\n\t<dcterms:description>Test</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"http://localhost:8080/analysis/services/resources/automationPlans/perun\" />\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>command</oslc:name>\n\t\t\t<rdf:value>init -t user</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>SUT</oslc:name>\n\t\t\t<rdf:value>http://localhost:8081/compilation/services/resources/sUTs/{{sutId}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>outputFileRegex</oslc:name>\n\t\t\t<rdf:value>.*\\.yml</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>"
										},
										"url": {
											"raw": "http://localhost:8080/analysis/services/resources/createAutomationRequest",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"analysis",
												"services",
												"resources",
												"createAutomationRequest"
											]
										}
									},
									"response": []
								},
								{
									"name": "local.yml",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/xml"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<rdf:RDF\n    xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n    xmlns:dcterms=\"http://purl.org/dc/terms/\"\n    xmlns:fit=\"http://fit.vutbr.cz/group/verifit/oslc/ns/universal-analysis#\"\n    xmlns:oslc_data=\"http://open-services.net/ns/servicemanagement/1.0/\"\n    xmlns:oslc=\"http://open-services.net/ns/core#\"\n    xmlns:foaf=\"http://xmlns.com/foaf/0.1/#\"\n    xmlns:rdfs=\"http://www.w3.org/2000/01/rdf-schema#\"\n    xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\t\n            <oslc_auto:Contribution>\n                <dcterms:created rdf:datatype=\"http://www.w3.org/2001/XMLSchema#dateTime\"\n        >2020-05-03T18:08:21.441Z</dcterms:created>\n                <dcterms:title rdf:parseType=\"Literal\">local.yml</dcterms:title>\n                <dcterms:description rdf:parseType=\"Literal\">This file was modified or created during execution of this Automation Request. If you want to modify the file (eg. its a configuration file), then post this oslc_auto:Contribution resource to the Contribution creation factory.</dcterms:description>\n                <rdf:value rdf:parseType=\"Literal\">vcs:\n  type: git\n  url: /home/od42/matrix/proj_praxe/generic-analysis-adapter/compilation/tmp/{{sutId}}\n\n## The following sets the executables (binaries / scripts).\n## These will be profiled by selected collectors.\n## Extend the following region with more executables to be profiled:\ncmds:\n- build/run_sorts\n\n## The following sets argument configurations for the profiled executables\n## Uncomment and edit the following region:\n# args:\n#   - -e\n\n## The following sets the profiling workload for given commands\n## Uncomment and edit the following region:\nworkloads:\n- 100 \n#   - world\n\n## The following contains the set of collectors (profilers) that will collect performance data.\n## Extend the following region to use more profilers:\ncollectors:\n- name: time\n  params:\n    warmup: 3\n    repeat: 10\n## Try '$ perun collect --help' to obtain list of supported collectors!\n\n## The following contains the ordered list of postprocess phases that are executed after collection.\n## Uncomment and edit the following region (!order matters!):\n# postprocessors:\n#   - name: regression_analysis\n#     params:\n#       method: full\n#   - name: filter\n## Try '$ perun postprocessby --help' to obtain list of supported collectors!\n\n## The following option automatically registers newly collected profiles for current minor version\nprofiles:\n  register_after_run: true\n\n## The following changes the automatically generated name of the profiles\nformat:\n  output_profile_template: '%collector%-of-%cmd%-%workload%-%date%'\n\n## The following options control the degradation checks in repository\ndegradation:\n## Setting the following combination of option to true will make Perun collect new profiles,\n## before checking for degradations and store them in logs at directory .perun/logs/\n  collect_before_check: true\n  log_collect: true\n## Setting this to first (resp. all) will apply the first (resp. all) found check methods\n## for corresponding configurations\n#   apply: first\n## Specification of list of rules for applying degradation checks\n  strategy:\n  - method: average_amount_threshold\n\n## To run your custom steps before any collection (un)comment the following region:\nexecute:\n  pre_run:\n  - make\n  \n  </rdf:value>\n                <fit:absolutePath rdf:parseType=\"Literal\">/home/od42/matrix/proj_praxe/generic-analysis-adapter/compilation/tmp/{{sutId}}/.perun/local.yml</fit:absolutePath>\n            </oslc_auto:Contribution>\n            \n</rdf:RDF>",
											"options": {
												"raw": {
													"language": "xml"
												}
											}
										},
										"url": {
											"raw": "http://localhost:8080/analysis/services/resources/writeContribution",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"analysis",
												"services",
												"resources",
												"writeContribution"
											]
										}
									},
									"response": []
								},
								{
									"name": "run matrix",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// save the request ID as a global variable for later tests to use",
													"const response = xml2Json(pm.response.text());",
													"var resrouceAbout = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"].$[\"rdf:about\"];",
													"var resourceAboutSplit = resrouceAbout.split(\"/\");",
													"var requestId = resourceAboutSplit[resourceAboutSplit.length-1];",
													"pm.globals.set('requestId', requestId);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/xml"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>First prototype request</dcterms:title>\n\t<dcterms:description>Test</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"http://localhost:8080/analysis/services/resources/automationPlans/perun\" />\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>command</oslc:name>\n\t\t\t<rdf:value>run matrix</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>SUT</oslc:name>\n\t\t\t<rdf:value>http://localhost:8081/compilation/services/resources/sUTs/{{sutId}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>outputFileRegex</oslc:name>\n\t\t\t<rdf:value>.*\\.perf</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>"
										},
										"url": {
											"raw": "http://localhost:8080/analysis/services/resources/createAutomationRequest",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"analysis",
												"services",
												"resources",
												"createAutomationRequest"
											]
										}
									},
									"response": []
								},
								{
									"name": "check all (takes 7mins)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// save the request ID as a global variable for later tests to use",
													"const response = xml2Json(pm.response.text());",
													"var resrouceAbout = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"].$[\"rdf:about\"];",
													"var resourceAboutSplit = resrouceAbout.split(\"/\");",
													"var requestId = resourceAboutSplit[resourceAboutSplit.length-1];",
													"pm.globals.set('requestId', requestId);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/xml"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>First prototype request</dcterms:title>\n\t<dcterms:description>Test</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"http://localhost:8080/analysis/services/resources/automationPlans/perun\" />\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>command</oslc:name>\n\t\t\t<rdf:value>check all</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>SUT</oslc:name>\n\t\t\t<rdf:value>http://localhost:8081/compilation/services/resources/sUTs/{{sutId}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>"
										},
										"url": {
											"raw": "http://localhost:8080/analysis/services/resources/createAutomationRequest",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"analysis",
												"services",
												"resources",
												"createAutomationRequest"
											]
										}
									},
									"response": []
								},
								{
									"name": "check head",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// save the request ID as a global variable for later tests to use",
													"const response = xml2Json(pm.response.text());",
													"var resrouceAbout = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"].$[\"rdf:about\"];",
													"var resourceAboutSplit = resrouceAbout.split(\"/\");",
													"var requestId = resourceAboutSplit[resourceAboutSplit.length-1];",
													"pm.globals.set('requestId', requestId);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/xml"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>First prototype request</dcterms:title>\n\t<dcterms:description>Test</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"http://localhost:8080/analysis/services/resources/automationPlans/perun\" />\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>command</oslc:name>\n\t\t\t<rdf:value>check head</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>SUT</oslc:name>\n\t\t\t<rdf:value>http://localhost:8081/compilation/services/resources/sUTs/{{sutId}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>"
										},
										"url": {
											"raw": "http://localhost:8080/analysis/services/resources/createAutomationRequest",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"analysis",
												"services",
												"resources",
												"createAutomationRequest"
											]
										}
									},
									"response": []
								},
								{
									"name": "check output",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/rdf+xml",
												"type": "text"
											}
										],
										"url": {
											"raw": "http://localhost:8080/analysis/services/resources/automationResults/{{requestId}}?Accept=application/rdf+xml",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"analysis",
												"services",
												"resources",
												"automationResults",
												"{{requestId}}"
											],
											"query": [
												{
													"key": "Accept",
													"value": "application/rdf+xml"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "not working",
							"item": [
								{
									"name": "perun init --configure",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// save the request ID as a global variable for later tests to use",
													"const response = xml2Json(pm.response.text());",
													"var resrouceAbout = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"].$[\"rdf:about\"];",
													"var resourceAboutSplit = resrouceAbout.split(\"/\");",
													"var requestId = resourceAboutSplit[resourceAboutSplit.length-1];",
													"pm.globals.set('requestId', requestId);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/xml"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>First prototype request</dcterms:title>\n\t<dcterms:description>Test</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"http://localhost:8080/analysis/services/resources/automationPlans/perun\" />\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>command</oslc:name>\n\t\t\t<rdf:value>init --configure</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>SUT</oslc:name>\n\t\t\t<rdf:value>http://localhost:8081/compilation/services/resources/sUTs/0</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>"
										},
										"url": {
											"raw": "http://localhost:8080/analysis/services/resources/createAutomationRequest",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"analysis",
												"services",
												"resources",
												"createAutomationRequest"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "perun init",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// save the request ID as a global variable for later tests to use",
											"const response = xml2Json(pm.response.text());",
											"var resrouceAbout = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"].$[\"rdf:about\"];",
											"var resourceAboutSplit = resrouceAbout.split(\"/\");",
											"var requestId = resourceAboutSplit[resourceAboutSplit.length-1];",
											"pm.globals.set('requestId', requestId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>First prototype request</dcterms:title>\n\t<dcterms:description>Test</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"http://localhost:8080/analysis/services/resources/automationPlans/perun\" />\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>command</oslc:name>\n\t\t\t<rdf:value>init</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>SUT</oslc:name>\n\t\t\t<rdf:value>http://localhost:8081/compilation/services/resources/sUTs/0</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>"
								},
								"url": {
									"raw": "http://localhost:8080/analysis/services/resources/createAutomationRequest",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"analysis",
										"services",
										"resources",
										"createAutomationRequest"
									]
								}
							},
							"response": []
						},
						{
							"name": "perun check head",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// save the request ID as a global variable for later tests to use",
											"const response = xml2Json(pm.response.text());",
											"var resrouceAbout = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"].$[\"rdf:about\"];",
											"var resourceAboutSplit = resrouceAbout.split(\"/\");",
											"var requestId = resourceAboutSplit[resourceAboutSplit.length-1];",
											"pm.globals.set('requestId', requestId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>First prototype request</dcterms:title>\n\t<dcterms:description>Test</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"http://localhost:8080/analysis/services/resources/automationPlans/perun\" />\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>command</oslc:name>\n\t\t\t<rdf:value>check head</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>SUT</oslc:name>\n\t\t\t<rdf:value>http://localhost:8081/compilation/services/resources/sUTs/0</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>"
								},
								"url": {
									"raw": "http://localhost:8080/analysis/services/resources/createAutomationRequest",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"analysis",
										"services",
										"resources",
										"createAutomationRequest"
									]
								}
							},
							"response": []
						},
						{
							"name": "perun check all",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// save the request ID as a global variable for later tests to use",
											"const response = xml2Json(pm.response.text());",
											"var resrouceAbout = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"].$[\"rdf:about\"];",
											"var resourceAboutSplit = resrouceAbout.split(\"/\");",
											"var requestId = resourceAboutSplit[resourceAboutSplit.length-1];",
											"pm.globals.set('requestId', requestId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>First prototype request</dcterms:title>\n\t<dcterms:description>Test</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"http://localhost:8080/analysis/services/resources/automationPlans/perun\" />\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>command</oslc:name>\n\t\t\t<rdf:value>check all</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>SUT</oslc:name>\n\t\t\t<rdf:value>http://localhost:8081/compilation/services/resources/sUTs/0</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>"
								},
								"url": {
									"raw": "http://localhost:8080/analysis/services/resources/createAutomationRequest",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"analysis",
										"services",
										"resources",
										"createAutomationRequest"
									]
								}
							},
							"response": []
						},
						{
							"name": "perun status",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// save the request ID as a global variable for later tests to use",
											"const response = xml2Json(pm.response.text());",
											"var resrouceAbout = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"].$[\"rdf:about\"];",
											"var resourceAboutSplit = resrouceAbout.split(\"/\");",
											"var requestId = resourceAboutSplit[resourceAboutSplit.length-1];",
											"pm.globals.set('requestId', requestId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>First prototype request</dcterms:title>\n\t<dcterms:description>Test</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"http://localhost:8080/analysis/services/resources/automationPlans/perun\" />\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>command</oslc:name>\n\t\t\t<rdf:value>status</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>SUT</oslc:name>\n\t\t\t<rdf:value>http://localhost:8081/compilation/services/resources/sUTs/0</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>"
								},
								"url": {
									"raw": "http://localhost:8080/analysis/services/resources/createAutomationRequest",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"analysis",
										"services",
										"resources",
										"createAutomationRequest"
									]
								}
							},
							"response": []
						},
						{
							"name": "modify local.yml before running matrix TODO",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<rdf:RDF\n    xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n    xmlns:dcterms=\"http://purl.org/dc/terms/\"\n    xmlns:fit=\"http://fit.vutbr.cz/group/verifit/oslc/ns/universal-analysis#\"\n    xmlns:oslc_data=\"http://open-services.net/ns/servicemanagement/1.0/\"\n    xmlns:oslc=\"http://open-services.net/ns/core#\"\n    xmlns:foaf=\"http://xmlns.com/foaf/0.1/#\"\n    xmlns:rdfs=\"http://www.w3.org/2000/01/rdf-schema#\"\n    xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\t\n            <oslc_auto:Contribution>\n                <rdf:value rdf:parseType=\"Literal\"> vcs:\n  type: git\n  url: /home/od42/matrix/proj_praxe/generic-analysis-adapter/compilation/tmp/0\n\n## The following sets the executables (binaries / scripts).\n## These will be profiled by selected collectors.\n## Uncomment and edit the following region:\n cmds:\n   - echo\n\n## The following sets argument configurations for the profiled executables\n## Uncomment and edit the following region:\n args:\n   - -e\n\n## The following sets the profiling workload for given commands\n## Uncomment and edit the following region:\n workloads:\n   - hello\n   - world\n\n## The following contains the set of collectors (profilers) that will collect performance data.\n## Uncomment and edit the following region:\n collectors:\n   - name: time\n## Try '$ perun collect --help' to obtain list of supported collectors!\n\n## The following contains the ordered list of postprocess phases that are executed after collection.\n## Uncomment and edit the following region (!order matters!):\n# postprocessors:\n#   - name: regression_analysis\n#     params:\n#       method: full\n#   - name: filter\n## Try '$ perun postprocessby --help' to obtain list of supported collectors!\n\n## The following option automatically registers newly collected profiles for current minor version\n## Uncomment the following to enable this behaviour:\n# profiles:\n#   register_after_run: true\n\n\n## The following options control the degradation checks in repository\n# degradation:\n## Setting the following combination of option to true will make Perun collect new profiles,\n## before checking for degradations and store them in logs at directory .perun/logs/\n#   collect_before_check: true\n#   log_collect: true\n## Setting this to first (resp. all) will apply the first (resp. all) found check methods\n## for corresponding configurations\n#   apply: first\n## Specification of list of rules for applying degradation checks\n#   strategy:\n#     - method: average_amount_threshold\n\n## To run your custom steps before any collection (un)comment the following region:\n# execute:\n#   pre_run:\n#     - make\n</rdf:value>\n            </oslc_auto:Contribution>\n            \n</rdf:RDF>",
									"options": {
										"raw": {
											"language": "xml"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8080/analysis/services/resources/contributions/%252Fhome%252Fod42%252Fmatrix%252Fproj_praxe%252Fgeneric-analysis-adapter%252Fcompilation%252Ftmp%252F11%252F.perun%252Flocal.yml",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"analysis",
										"services",
										"resources",
										"contributions",
										"%252Fhome%252Fod42%252Fmatrix%252Fproj_praxe%252Fgeneric-analysis-adapter%252Fcompilation%252Ftmp%252F11%252F.perun%252Flocal.yml"
									]
								}
							},
							"response": []
						},
						{
							"name": "perun run matrix",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// save the request ID as a global variable for later tests to use",
											"const response = xml2Json(pm.response.text());",
											"var resrouceAbout = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"].$[\"rdf:about\"];",
											"var resourceAboutSplit = resrouceAbout.split(\"/\");",
											"var requestId = resourceAboutSplit[resourceAboutSplit.length-1];",
											"pm.globals.set('requestId', requestId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>First prototype request</dcterms:title>\n\t<dcterms:description>Test</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"http://localhost:8080/analysis/services/resources/automationPlans/perun\" />\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>command</oslc:name>\n\t\t\t<rdf:value>run matrix</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>SUT</oslc:name>\n\t\t\t<rdf:value>http://localhost:8081/compilation/services/resources/sUTs/0</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>"
								},
								"url": {
									"raw": "http://localhost:8080/analysis/services/resources/createAutomationRequest",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"analysis",
										"services",
										"resources",
										"createAutomationRequest"
									]
								}
							},
							"response": []
						},
						{
							"name": "perun show",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// save the request ID as a global variable for later tests to use",
											"const response = xml2Json(pm.response.text());",
											"var resrouceAbout = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"].$[\"rdf:about\"];",
											"var resourceAboutSplit = resrouceAbout.split(\"/\");",
											"var requestId = resourceAboutSplit[resourceAboutSplit.length-1];",
											"pm.globals.set('requestId', requestId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>First prototype request</dcterms:title>\n\t<dcterms:description>Test</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"http://localhost:8080/analysis/services/resources/automationPlans/perun\" />\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>command</oslc:name>\n\t\t\t<rdf:value>show time-echo-[hello]-[hello]-2020-05-07-10-18-50.perf raw</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>SUT</oslc:name>\n\t\t\t<rdf:value>http://localhost:8081/compilation/services/resources/sUTs/0</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>"
								},
								"url": {
									"raw": "http://localhost:8080/analysis/services/resources/createAutomationRequest",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"analysis",
										"services",
										"resources",
										"createAutomationRequest"
									]
								}
							},
							"response": []
						},
						{
							"name": "perun collect",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// save the request ID as a global variable for later tests to use",
											"const response = xml2Json(pm.response.text());",
											"var resrouceAbout = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"].$[\"rdf:about\"];",
											"var resourceAboutSplit = resrouceAbout.split(\"/\");",
											"var requestId = resourceAboutSplit[resourceAboutSplit.length-1];",
											"pm.globals.set('requestId', requestId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>First prototype request</dcterms:title>\n\t<dcterms:description>Test</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"http://localhost:8080/analysis/services/resources/automationPlans/perun\" />\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>command</oslc:name>\n\t\t\t<rdf:value>collect -c perun -w \"--help\" time -w 0 -r 1</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>SUT</oslc:name>\n\t\t\t<rdf:value>http://localhost:8081/compilation/services/resources/sUTs/0</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>"
								},
								"url": {
									"raw": "http://localhost:8080/analysis/services/resources/createAutomationRequest",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"analysis",
										"services",
										"resources",
										"createAutomationRequest"
									]
								}
							},
							"response": []
						},
						{
							"name": "perun run job",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// save the request ID as a global variable for later tests to use",
											"const response = xml2Json(pm.response.text());",
											"var resrouceAbout = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"].$[\"rdf:about\"];",
											"var resourceAboutSplit = resrouceAbout.split(\"/\");",
											"var requestId = resourceAboutSplit[resourceAboutSplit.length-1];",
											"pm.globals.set('requestId', requestId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>First prototype request</dcterms:title>\n\t<dcterms:description>Test</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"http://localhost:8080/analysis/services/resources/automationPlans/perun\" />\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>command</oslc:name>\n\t\t\t<rdf:value>run job --cmd perun -c time -w \"--help\"</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>SUT</oslc:name>\n\t\t\t<rdf:value>http://localhost:8081/compilation/services/resources/sUTs/0</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>"
								},
								"url": {
									"raw": "http://localhost:8080/analysis/services/resources/createAutomationRequest",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"analysis",
										"services",
										"resources",
										"createAutomationRequest"
									]
								}
							},
							"response": []
						},
						{
							"name": "perun config get",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// save the request ID as a global variable for later tests to use",
											"const response = xml2Json(pm.response.text());",
											"var resrouceAbout = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"].$[\"rdf:about\"];",
											"var resourceAboutSplit = resrouceAbout.split(\"/\");",
											"var requestId = resourceAboutSplit[resourceAboutSplit.length-1];",
											"pm.globals.set('requestId', requestId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>First prototype request</dcterms:title>\n\t<dcterms:description>Test</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"http://localhost:8080/analysis/services/resources/automationPlans/perun\" />\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>command</oslc:name>\n\t\t\t<rdf:value>config --local get vcs.type</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>SUT</oslc:name>\n\t\t\t<rdf:value>http://localhost:8081/compilation/services/resources/sUTs/0</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>"
								},
								"url": {
									"raw": "http://localhost:8080/analysis/services/resources/createAutomationRequest",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"analysis",
										"services",
										"resources",
										"createAutomationRequest"
									]
								}
							},
							"response": []
						},
						{
							"name": "perun config set",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// save the request ID as a global variable for later tests to use",
											"const response = xml2Json(pm.response.text());",
											"var resrouceAbout = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"].$[\"rdf:about\"];",
											"var resourceAboutSplit = resrouceAbout.split(\"/\");",
											"var requestId = resourceAboutSplit[resourceAboutSplit.length-1];",
											"pm.globals.set('requestId', requestId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>First prototype request</dcterms:title>\n\t<dcterms:description>Test</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"http://localhost:8080/analysis/services/resources/automationPlans/perun\" />\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>command</oslc:name>\n\t\t\t<rdf:value>config --local set vcs.type git</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>SUT</oslc:name>\n\t\t\t<rdf:value>http://localhost:8081/compilation/services/resources/sUTs/0</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>"
								},
								"url": {
									"raw": "http://localhost:8080/analysis/services/resources/createAutomationRequest",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"analysis",
										"services",
										"resources",
										"createAutomationRequest"
									]
								}
							},
							"response": []
						},
						{
							"name": "perun add ~",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// save the request ID as a global variable for later tests to use",
											"const response = xml2Json(pm.response.text());",
											"var resrouceAbout = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"].$[\"rdf:about\"];",
											"var resourceAboutSplit = resrouceAbout.split(\"/\");",
											"var requestId = resourceAboutSplit[resourceAboutSplit.length-1];",
											"pm.globals.set('requestId', requestId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>First prototype request</dcterms:title>\n\t<dcterms:description>Test</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"http://localhost:8080/analysis/services/resources/automationPlans/perun\" />\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>command</oslc:name>\n\t\t\t<rdf:value>add .perun/jobs/time-perun-\\[_\\]-\\[_--help_\\]-2020-05-09-16-15-42.perf</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>SUT</oslc:name>\n\t\t\t<rdf:value>http://localhost:8081/compilation/services/resources/sUTs/0</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>"
								},
								"url": {
									"raw": "http://localhost:8080/analysis/services/resources/createAutomationRequest",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"analysis",
										"services",
										"resources",
										"createAutomationRequest"
									]
								}
							},
							"response": []
						},
						{
							"name": "perun rm ~",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// save the request ID as a global variable for later tests to use",
											"const response = xml2Json(pm.response.text());",
											"var resrouceAbout = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"].$[\"rdf:about\"];",
											"var resourceAboutSplit = resrouceAbout.split(\"/\");",
											"var requestId = resourceAboutSplit[resourceAboutSplit.length-1];",
											"pm.globals.set('requestId', requestId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>First prototype request</dcterms:title>\n\t<dcterms:description>Test</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"http://localhost:8080/analysis/services/resources/automationPlans/perun\" />\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>command</oslc:name>\n\t\t\t<rdf:value>rm .perun/jobs/time-perun-\\[_\\]-\\[_--help_\\]-2020-05-09-16-15-42.perf</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>SUT</oslc:name>\n\t\t\t<rdf:value>http://localhost:8081/compilation/services/resources/sUTs/0</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>"
								},
								"url": {
									"raw": "http://localhost:8080/analysis/services/resources/createAutomationRequest",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"analysis",
										"services",
										"resources",
										"createAutomationRequest"
									]
								}
							},
							"response": []
						},
						{
							"name": "perun log",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// save the request ID as a global variable for later tests to use",
											"const response = xml2Json(pm.response.text());",
											"var resrouceAbout = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"].$[\"rdf:about\"];",
											"var resourceAboutSplit = resrouceAbout.split(\"/\");",
											"var requestId = resourceAboutSplit[resourceAboutSplit.length-1];",
											"pm.globals.set('requestId', requestId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>First prototype request</dcterms:title>\n\t<dcterms:description>Test</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"http://localhost:8080/analysis/services/resources/automationPlans/perun\" />\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>command</oslc:name>\n\t\t\t<rdf:value>log --short</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>SUT</oslc:name>\n\t\t\t<rdf:value>http://localhost:8081/compilation/services/resources/sUTs/0</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>"
								},
								"url": {
									"raw": "http://localhost:8080/analysis/services/resources/createAutomationRequest",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"analysis",
										"services",
										"resources",
										"createAutomationRequest"
									]
								}
							},
							"response": []
						},
						{
							"name": "check output",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8080/analysis/services/resources/automationResults/{{requestId}}?Accept=application/rdf+xml",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"analysis",
										"services",
										"resources",
										"automationResults",
										"{{requestId}}"
									],
									"query": [
										{
											"key": "Accept",
											"value": "application/rdf+xml"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "anaconda analyse",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>First prototype request</dcterms:title>\n\t<dcterms:description>Test</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"http://localhost:8080/analysis/services/resources/automationPlans/anaconda\" />\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>analyser</oslc:name>\n\t\t\t<rdf:value>atomrace</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>executionParameters</oslc:name>\n\t\t\t<rdf:value>\"Hello World!\"</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>SUT</oslc:name>\n\t\t\t<rdf:value>http://localhost:8081/compilation/services/resources/sUTs/0</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>"
						},
						"url": {
							"raw": "http://localhost:8080/analysis/services/resources/createAutomationRequest",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"analysis",
								"services",
								"resources",
								"createAutomationRequest"
							]
						}
					},
					"response": []
				},
				{
					"name": "valgrind analyse",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>First prototype request</dcterms:title>\n\t<dcterms:description>Test</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"http://localhost:8080/analysis/services/resources/automationPlans/valgrind\" />\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>arguments</oslc:name>\n\t\t\t<rdf:value></rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>SUT</oslc:name>\n\t\t\t<rdf:value>http://localhost:8081/compilation/services/resources/sUTs/0</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>"
						},
						"url": {
							"raw": "http://localhost:8080/analysis/services/resources/createAutomationRequest",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"analysis",
								"services",
								"resources",
								"createAutomationRequest"
							]
						}
					},
					"response": []
				},
				{
					"name": "grep analyse",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>First prototype request</dcterms:title>\n\t<dcterms:description>Test</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"http://localhost:8080/analysis/services/resources/automationPlans/grep\" />\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>pattern</oslc:name>\n\t\t\t<rdf:value>i</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>file</oslc:name>\n\t\t\t<rdf:value>TestEchoProgram.cpp</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>SUT</oslc:name>\n\t\t\t<rdf:value>http://localhost:8081/compilation/services/resources/sUTs/0</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>"
						},
						"url": {
							"raw": "http://localhost:8080/analysis/services/resources/createAutomationRequest",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"analysis",
								"services",
								"resources",
								"createAutomationRequest"
							]
						}
					},
					"response": []
				},
				{
					"name": "Automation Service Provider",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/rdf+xml"
							}
						],
						"url": {
							"raw": "http://localhost:8080/analysis/services/serviceProviders/A0",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"analysis",
								"services",
								"serviceProviders",
								"A0"
							]
						}
					},
					"response": []
				},
				{
					"name": "anaconda AutomationPlan",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/rdf+xml"
							}
						],
						"url": {
							"raw": "http://localhost:8080/analysis/services/resources/automationPlans/0",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"analysis",
								"services",
								"resources",
								"automationPlans",
								"0"
							]
						}
					},
					"response": []
				},
				{
					"name": "perun AutomationPlan",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/rdf+xml"
							}
						],
						"url": {
							"raw": "http://localhost:8080/analysis/services/resources/automationPlans/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"analysis",
								"services",
								"resources",
								"automationPlans",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Service Provider Catologue",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/rdf+xml",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:8080/analysis/services/catalog/singleton",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"analysis",
								"services",
								"catalog",
								"singleton"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "hilite",
			"item": [
				{
					"name": "analyse",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>First prototype request</dcterms:title>\n\t<dcterms:description>Test</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"http://localhost:8080/analysis/services/resources/automationPlans/hilite\" />\n\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>SUT</oslc:name>\n\t\t\t<rdf:value>http://localhost:8081/compilation/services/resources/sUTs/1</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>zipOutputs</oslc:name>\n\t\t\t<rdf:value>true</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>outputFileRegex</oslc:name>\n\t\t\t<rdf:value>.*</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>"
						},
						"url": {
							"raw": "http://localhost:8080/analysis/services/resources/createAutomationRequest",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"analysis",
								"services",
								"resources",
								"createAutomationRequest"
							]
						}
					},
					"response": []
				},
				{
					"name": "deploy URL zip with no compilation",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>First prototype request</dcterms:title>\n\t<dcterms:description>Test</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"http://localhost:10081/compilation/services/resources/automationPlans/0\" />\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>sourceUrl</oslc:name>\n\t\t\t<rdf:value>http://www.stud.fit.vutbr.cz/~xvasic25/TestEchoProgram.zip</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>unpackZip</oslc:name>\n\t\t\t<rdf:value>true</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>launchCommand</oslc:name>\n\t\t\t<rdf:value>config-file.hilite</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>"
						},
						"url": {
							"raw": "http://localhost:10081/compilation/services/resources/createAutomationRequest",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "10081",
							"path": [
								"compilation",
								"services",
								"resources",
								"createAutomationRequest"
							]
						}
					},
					"response": []
				},
				{
					"name": "deploy base64 zip with no compilation",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>First prototype request</dcterms:title>\n\t<dcterms:description>Test</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"http://localhost:8081/compilation/services/resources/automationPlans/0\" />\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>sourceBase64</oslc:name>\n\t\t\t<rdf:value>TestEchoProgram.zip\nUEsDBBQACAAIABCDvFAAAAAAAAAAAF4AAAATACAAVGVzdEVjaG9Qcm9ncmFtLmNwcFVUDQAHocnPXqHJz16hyc9edXgLAAEE6AMAAAToAwAAU87MS84pTUlVsCkuScnM18uw4+LKzCtRyE3MzNMAMRKL0pN1FJIzEou0tECcMk2uai7OgiKgXJqGkmpxTJ6SDlg82jBW05qLsyi1pLQoT8HAmquWiwsAUEsHCC08KtBXAAAAXgAAAFBLAQIUAxQACAAIABCDvFAtPCrQVwAAAF4AAAATACAAAAAAAAAAAACkgQAAAABUZXN0RWNob1Byb2dyYW0uY3BwVVQNAAehyc9eocnPXqHJz151eAsAAQToAwAABOgDAABQSwUGAAAAAAEAAQBhAAAAuAAAAAAA</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>unpackZip</oslc:name>\n\t\t\t<rdf:value>true</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>launchCommand</oslc:name>\n\t\t\t<rdf:value>config-file.hilite</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>"
						},
						"url": {
							"raw": "http://localhost:8081/compilation/services/resources/createAutomationRequest",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8081",
							"path": [
								"compilation",
								"services",
								"resources",
								"createAutomationRequest"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "infer",
			"item": [
				{
					"name": "analyze java_hello example",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>First prototype request</dcterms:title>\n\t<dcterms:description>Test</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"http://localhost:8080/analysis/services/resources/automationPlans/infer\" />\n\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>SUT</oslc:name>\n\t\t\t<rdf:value>http://localhost:8081/compilation/services/resources/sUTs/{{sutId}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>arguments</oslc:name>\n\t\t\t<rdf:value>run --reactive -- make</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>outputFileRegex</oslc:name>\n\t\t\t<rdf:value>.*</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>zipOutputs</oslc:name>\n\t\t\t<rdf:value>true</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>"
						},
						"url": {
							"raw": "http://localhost:8080/analysis/services/resources/createAutomationRequest",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"analysis",
								"services",
								"resources",
								"createAutomationRequest"
							]
						}
					},
					"response": []
				},
				{
					"name": "fetch example",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// save the request ID as a global variable for later tests to use -- used as SUT ID",
									"const response = xml2Json(pm.response.text());",
									"var resrouceAbout = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"].$[\"rdf:about\"];",
									"var resourceAboutSplit = resrouceAbout.split(\"/\");",
									"var requestId = resourceAboutSplit[resourceAboutSplit.length-1];",
									"pm.globals.set('sutId', requestId);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>First prototype request</dcterms:title>\n\t<dcterms:description>Test</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"http://localhost:8081/compilation/services/resources/automationPlans/0\" />\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>sourceFilePath</oslc:name>\n\t\t\t<rdf:value>/home/od42/matrix/proj_praxe/generic-analysis-adapter/compilation/tests/resources/InferExample</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>buildCommand</oslc:name>\n\t\t\t<rdf:value>make</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>"
						},
						"url": {
							"raw": "http://localhost:8081/compilation/services/resources/createAutomationRequest",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8081",
							"path": [
								"compilation",
								"services",
								"resources",
								"createAutomationRequest"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "example",
			"item": [
				{
					"name": "create SUT using the compilation provider",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// save the request ID as a global variable for later tests to use -- used as SUT ID",
									"const response = xml2Json(pm.response.text());",
									"var resrouceAbout = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"].$[\"rdf:about\"];",
									"var resourceAboutSplit = resrouceAbout.split(\"/\");",
									"var requestId = resourceAboutSplit[resourceAboutSplit.length-1];",
									"pm.globals.set('requestId', requestId);",
									"",
									"",
									"pm.test(\"Response code should be 201 (created)\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"var compilation_provider = pm.variables.get(\"compilation_provider\");",
									"var sutId = requestId;",
									"pm.globals.set(\"SUT\", compilation_provider + \"/services/resources/sUTs/\" + sutId);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/xml"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/rdf+xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>analysis test</dcterms:title>\n\t<dcterms:description>analysis test</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{compilation_provider}}/services/resources/automationPlans/0\" />\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>sourceBase64</oslc:name>\n\t\t\t<rdf:value>TestEchoProgram.cpp\nI2luY2x1ZGUgPHN0ZGlvLmg+CgppbnQgbWFpbihpbnQgYXJnYywgY2hhcioqIGFyZ3YpCnsKCXByaW50ZigiJXNcbiIsIGFyZ3ZbMV0pOwoJcmV0dXJuIDA7Cn0K</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>buildCommand</oslc:name>\n\t\t\t<rdf:value>gcc -g TestEchoProgram.cpp -o my_echo</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>launchCommand</oslc:name>\n\t\t\t<rdf:value>./my_echo</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>"
						},
						"url": {
							"raw": "{{compilation_provider}}/services/resources/createAutomationRequest",
							"host": [
								"{{compilation_provider}}"
							],
							"path": [
								"services",
								"resources",
								"createAutomationRequest"
							]
						}
					},
					"response": []
				},
				{
					"name": "wait for #complete (dev requests/example/create sut)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var timeoutSeconds = pm.collectionVariables.get('automation_wait_time');",
									"",
									"var waitCounter = pm.globals.get(\"waitCounter\");",
									"if(!waitCounter) {",
									"    waitCounter = 0;",
									"}",
									"",
									"if (pm.response.code != 200) { // wait for the resource to be created",
									"    if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
									"        setTimeout(function(){}, [1000]); // 1 second",
									"        waitCounter++;",
									"        postman.setNextRequest(pm.info.requestName);",
									"    } else { // timeout, reset counter",
									"        waitCounter = 0;",
									"    }",
									"} else { // wait for the automation to complete",
									"    const response = xml2Json(pm.response.text());",
									"    var state = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"][\"oslc_auto:state\"].$[\"rdf:resource\"];",
									"    if (state == \"http://open-services.net/ns/auto#inProgress\") {",
									"        if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
									"            setTimeout(function(){}, [1000]); // 1 second",
									"            waitCounter++;",
									"            postman.setNextRequest(pm.info.requestName);",
									"        } else { // timeout, reset counter",
									"            waitCounter = 0;",
									"        }",
									"    } else { // wait doen, reset counter",
									"            waitCounter = 0;",
									"    }",
									"}",
									"",
									"pm.globals.set(\"waitCounter\", waitCounter);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/rdf+xml"
							}
						],
						"url": {
							"raw": "{{compilation_provider}}/services/resources/automationRequests/{{requestId}}",
							"host": [
								"{{compilation_provider}}"
							],
							"path": [
								"services",
								"resources",
								"automationRequests",
								"{{requestId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "get result",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/rdf+xml"
							}
						],
						"url": {
							"raw": "{{compilation_provider}}/services/resources/automationResults/{{requestId}}",
							"host": [
								"{{compilation_provider}}"
							],
							"path": [
								"services",
								"resources",
								"automationResults",
								"{{requestId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "analyse AutomationPlan",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var serverAddr = pm.variables.get(\"server_address\");",
									"var server_context = pm.variables.get(\"server_context\");",
									"",
									"pm.test(\"Response code should be 200 (OK)\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/rdf+xml"
							}
						],
						"url": {
							"raw": "{{server_address}}/{{server_context}}/services/resources/automationPlans/example",
							"host": [
								"{{server_address}}"
							],
							"path": [
								"{{server_context}}",
								"services",
								"resources",
								"automationPlans",
								"example"
							]
						}
					},
					"response": []
				},
				{
					"name": "analyse",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response code should be 201 (created)\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"",
									"// save the request ID as a global variable for later tests to use",
									"const response = xml2Json(pm.response.text());",
									"var resrouceAbout = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"].$[\"rdf:about\"];",
									"var resourceAboutSplit = resrouceAbout.split(\"/\");",
									"var requestId = resourceAboutSplit[resourceAboutSplit.length-1];",
									"pm.globals.set('requestId', requestId);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/xml"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/rdf+xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>First prototype request</dcterms:title>\n\t<dcterms:description>Test</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{server_address}}/{{server_context}}/services/resources/automationPlans/example\" />\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>arguments</oslc:name>\n\t\t\t<rdf:value>./my_echo</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>SUT</oslc:name>\n\t\t\t<rdf:value>{{SUT}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>"
						},
						"url": {
							"raw": "{{server_address}}/{{server_context}}/services/resources/createAutomationRequest",
							"host": [
								"{{server_address}}"
							],
							"path": [
								"{{server_context}}",
								"services",
								"resources",
								"createAutomationRequest"
							]
						}
					},
					"response": []
				},
				{
					"name": "wait for #complete (dev requests/example/analyse)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var timeoutSeconds = pm.collectionVariables.get('automation_wait_time');",
									"",
									"var waitCounter = pm.globals.get(\"waitCounter\");",
									"if(!waitCounter) {",
									"    waitCounter = 0;",
									"}",
									"",
									"if (pm.response.code != 200) { // wait for the resource to be created",
									"    if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
									"        setTimeout(function(){}, [1000]); // 1 second",
									"        waitCounter++;",
									"        postman.setNextRequest(pm.info.requestName);",
									"    } else { // timeout, reset counter",
									"        waitCounter = 0;",
									"    }",
									"} else { // wait for the automation to complete",
									"    const response = xml2Json(pm.response.text());",
									"    var state = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"][\"oslc_auto:state\"].$[\"rdf:resource\"];",
									"    if (state == \"http://open-services.net/ns/auto#inProgress\") {",
									"        if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
									"            setTimeout(function(){}, [1000]); // 1 second",
									"            waitCounter++;",
									"            postman.setNextRequest(pm.info.requestName);",
									"        } else { // timeout, reset counter",
									"            waitCounter = 0;",
									"        }",
									"    } else { // wait doen, reset counter",
									"            waitCounter = 0;",
									"    }",
									"}",
									"",
									"pm.globals.set(\"waitCounter\", waitCounter);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/rdf+xml"
							}
						],
						"url": {
							"raw": "{{server_address}}/{{server_context}}/services/resources/automationRequests/{{requestId}}",
							"host": [
								"{{server_address}}"
							],
							"path": [
								"{{server_context}}",
								"services",
								"resources",
								"automationRequests",
								"{{requestId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "check result",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// get global variable to use in this test",
									"var requestId = pm.globals.get('requestId');",
									"var serverAddr = pm.variables.get(\"server_address\");",
									"var server_context = pm.variables.get(\"server_context\");",
									"var AutomationPlanId = pm.variables.get(\"AutomationPlanId\");",
									"var analyser = pm.variables.get(\"analyser\");",
									"var executionParameters= pm.variables.get(\"executionParameters\");",
									"var SUT = pm.variables.get(\"SUT\");",
									"",
									"",
									"pm.test(\"Response code should be 200 (OK)\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/rdf+xml"
							}
						],
						"url": {
							"raw": "{{server_address}}/{{server_context}}/services/resources/automationResults/{{requestId}}",
							"host": [
								"{{server_address}}"
							],
							"path": [
								"{{server_context}}",
								"services",
								"resources",
								"automationResults",
								"{{requestId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "check result Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// get global variable to use in this test",
									"var requestId = pm.globals.get('requestId');",
									"var serverAddr = pm.variables.get(\"server_address\");",
									"var server_context = pm.variables.get(\"server_context\");",
									"var AutomationPlanId = pm.variables.get(\"AutomationPlanId\");",
									"var analyser = pm.variables.get(\"analyser\");",
									"var executionParameters= pm.variables.get(\"executionParameters\");",
									"var SUT = pm.variables.get(\"SUT\");",
									"",
									"",
									"pm.test(\"Response code should be 200 (OK)\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/rdf+xml"
							}
						],
						"url": {
							"raw": "{{server_address}}/{{server_context}}/services/resources/automationResults/{{requestId}}",
							"host": [
								"{{server_address}}"
							],
							"path": [
								"{{server_context}}",
								"services",
								"resources",
								"automationResults",
								"{{requestId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "check result Copy 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// get global variable to use in this test",
									"var requestId = pm.globals.get('requestId');",
									"var serverAddr = pm.variables.get(\"server_address\");",
									"var server_context = pm.variables.get(\"server_context\");",
									"var AutomationPlanId = pm.variables.get(\"AutomationPlanId\");",
									"var analyser = pm.variables.get(\"analyser\");",
									"var executionParameters= pm.variables.get(\"executionParameters\");",
									"var SUT = pm.variables.get(\"SUT\");",
									"",
									"",
									"pm.test(\"Response code should be 200 (OK)\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/rdf+xml"
							}
						],
						"url": {
							"raw": "{{server_address}}/{{server_context}}/services/resources/automationResults/{{requestId}}",
							"host": [
								"{{server_address}}"
							],
							"path": [
								"{{server_context}}",
								"services",
								"resources",
								"automationResults",
								"{{requestId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "example",
			"item": [
				{
					"name": "compile",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>First prototype request</dcterms:title>\n\t<dcterms:description>Test</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"http://localhost:8081/compilation/services/resources/automationPlans/0\" />\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>sourceBase64</oslc:name>\n\t\t\t<rdf:value>TestEchoProgram.cpp\nI2luY2x1ZGUgPHN0ZGlvLmg+CgppbnQgbWFpbihpbnQgYXJnYywgY2hhcioqIGFyZ3YpCnsKCXByaW50ZigiJXNcbiIsIGFyZ3ZbMV0pOwoJcmV0dXJuIDA7Cn0K</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>buildCommand</oslc:name>\n\t\t\t<rdf:value>gcc -g TestEchoProgram.cpp -o my_echo</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>launchCommand</oslc:name>\n\t\t\t<rdf:value>./my_echo</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>"
						},
						"url": {
							"raw": "http://localhost:8081/compilation/services/resources/createAutomationRequest",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8081",
							"path": [
								"compilation",
								"services",
								"resources",
								"createAutomationRequest"
							]
						}
					},
					"response": []
				},
				{
					"name": "analyse",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>First prototype request</dcterms:title>\n\t<dcterms:description>Test</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"http://localhost:8080/analysis/services/resources/automationPlans/example\" />\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>arguments</oslc:name>\n\t\t\t<rdf:value>./my_echo</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>SUT</oslc:name>\n\t\t\t<rdf:value>http://localhost:8081/compilation/services/resources/sUTs/1</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>"
						},
						"url": {
							"raw": "http://localhost:8080/analysis/services/resources/createAutomationRequest",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"analysis",
								"services",
								"resources",
								"createAutomationRequest"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "theta",
			"item": [
				{
					"name": "xcfa",
					"item": [
						{
							"name": "create SUT using the compilation provider",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// save the request ID as a global variable for later tests to use -- used as SUT ID",
											"const response = xml2Json(pm.response.text());",
											"var resrouceAbout = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"].$[\"rdf:about\"];",
											"var resourceAboutSplit = resrouceAbout.split(\"/\");",
											"var requestId = resourceAboutSplit[resourceAboutSplit.length-1];",
											"pm.globals.set('requestId', requestId);",
											"",
											"",
											"pm.test(\"Response code should be 201 (created)\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"var compilation_provider = pm.variables.get(\"compilation_provider\");",
											"var sutId = requestId;",
											"pm.globals.set(\"SUT\", compilation_provider + \"/services/resources/sUTs/\" + sutId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/xml"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>Theta test request</dcterms:title>\n\t<dcterms:description>Testing Theta theta-xcfa-cli through Unite</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{compilation_provider}}/services/resources/automationPlans/0\" />\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>sourceUrl</oslc:name>\n\t\t\t<rdf:value>https://raw.githubusercontent.com/ftsrg/theta/5ae1328155a056e04fc4d3ca68dedcc34b52780c/subprojects/xcfa/xcfa-cli/src/test/resources/c/litmustest/singlethread/00assignment.c</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>buildCommand</oslc:name>\n\t\t\t<rdf:value>gcc -E 00assignment.c | sed '/^#/d' > fileToGiveToTheta.c</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>"
								},
								"url": {
									"raw": "{{compilation_provider}}/services/resources/createAutomationRequest",
									"host": [
										"{{compilation_provider}}"
									],
									"path": [
										"services",
										"resources",
										"createAutomationRequest"
									]
								}
							},
							"response": []
						},
						{
							"name": "wait for #complete (dev requests/theta xcfa/create sut)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var timeoutSeconds = pm.collectionVariables.get('automation_wait_time');",
											"",
											"var waitCounter = pm.globals.get(\"waitCounter\");",
											"if(!waitCounter) {",
											"    waitCounter = 0;",
											"}",
											"",
											"if (pm.response.code != 200) { // wait for the resource to be created",
											"    if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
											"        setTimeout(function(){}, [1000]); // 1 second",
											"        waitCounter++;",
											"        postman.setNextRequest(pm.info.requestName);",
											"    } else { // timeout, reset counter",
											"        waitCounter = 0;",
											"    }",
											"} else { // wait for the automation to complete",
											"    const response = xml2Json(pm.response.text());",
											"    var state = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"][\"oslc_auto:state\"].$[\"rdf:resource\"];",
											"    if (state == \"http://open-services.net/ns/auto#inProgress\") {",
											"        if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
											"            setTimeout(function(){}, [1000]); // 1 second",
											"            waitCounter++;",
											"            postman.setNextRequest(pm.info.requestName);",
											"        } else { // timeout, reset counter",
											"            waitCounter = 0;",
											"        }",
											"    } else { // wait doen, reset counter",
											"            waitCounter = 0;",
											"    }",
											"}",
											"",
											"pm.globals.set(\"waitCounter\", waitCounter);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"url": {
									"raw": "{{compilation_provider}}/services/resources/automationRequests/{{requestId}}",
									"host": [
										"{{compilation_provider}}"
									],
									"path": [
										"services",
										"resources",
										"automationRequests",
										"{{requestId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get SUT creation result",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"desiredState should be #complete\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:desiredState rdf:resource=\\\"http://open-services.net/ns/auto#complete\\\"/>\");",
											"});",
											"pm.test(\"verdict should be #passed\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:verdict rdf:resource=\\\"http://open-services.net/ns/auto#passed\\\"/>\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"url": {
									"raw": "{{compilation_provider}}/services/resources/automationResults/{{requestId}}",
									"host": [
										"{{compilation_provider}}"
									],
									"path": [
										"services",
										"resources",
										"automationResults",
										"{{requestId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "see Theta xcfa Automation plan (optional fyi)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var serverAddr = pm.variables.get(\"server_address\");",
											"var server_context = pm.variables.get(\"server_context\");",
											"",
											"pm.test(\"Response code should be 200 (OK)\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/resources/automationPlans/theta-xcfa-cli",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"resources",
										"automationPlans",
										"theta-xcfa-cli"
									]
								}
							},
							"response": []
						},
						{
							"name": "execute analysis using Theta xcfa",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response code should be 201 (created)\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"",
											"// save the request ID as a global variable for later tests to use",
											"const response = xml2Json(pm.response.text());",
											"var resrouceAbout = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"].$[\"rdf:about\"];",
											"var resourceAboutSplit = resrouceAbout.split(\"/\");",
											"var requestId = resourceAboutSplit[resourceAboutSplit.length-1];",
											"pm.globals.set('requestId', requestId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/xml"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>Theta test request</dcterms:title>\n\t<dcterms:description>Testing Theta theta-xcfa-cli through Unite</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{server_address}}/{{server_context}}/services/resources/automationPlans/theta-xcfa-cli\" />\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>input</oslc:name>\n\t\t\t<rdf:value>fileToGiveToTheta.c</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>SUT</oslc:name>\n\t\t\t<rdf:value>{{SUT}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>"
								},
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/resources/createAutomationRequest",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"resources",
										"createAutomationRequest"
									]
								}
							},
							"response": []
						},
						{
							"name": "wait for #complete (dev requests/theta xcfa/analyse)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var timeoutSeconds = pm.collectionVariables.get('automation_wait_time');",
											"",
											"var waitCounter = pm.globals.get(\"waitCounter\");",
											"if(!waitCounter) {",
											"    waitCounter = 0;",
											"}",
											"",
											"if (pm.response.code != 200) { // wait for the resource to be created",
											"    if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
											"        setTimeout(function(){}, [1000]); // 1 second",
											"        waitCounter++;",
											"        postman.setNextRequest(pm.info.requestName);",
											"    } else { // timeout, reset counter",
											"        waitCounter = 0;",
											"    }",
											"} else { // wait for the automation to complete",
											"    const response = xml2Json(pm.response.text());",
											"    var state = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"][\"oslc_auto:state\"].$[\"rdf:resource\"];",
											"    if (state == \"http://open-services.net/ns/auto#inProgress\") {",
											"        if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
											"            setTimeout(function(){}, [1000]); // 1 second",
											"            waitCounter++;",
											"            postman.setNextRequest(pm.info.requestName);",
											"        } else { // timeout, reset counter",
											"            waitCounter = 0;",
											"        }",
											"    } else { // wait doen, reset counter",
											"            waitCounter = 0;",
											"    }",
											"}",
											"",
											"pm.globals.set(\"waitCounter\", waitCounter);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/resources/automationRequests/{{requestId}}",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"resources",
										"automationRequests",
										"{{requestId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get analysis result",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// get global variable to use in this test",
											"var requestId = pm.globals.get('requestId');",
											"var serverAddr = pm.variables.get(\"server_address\");",
											"var server_context = pm.variables.get(\"server_context\");",
											"var AutomationPlanId = pm.variables.get(\"AutomationPlanId\");",
											"var analyser = pm.variables.get(\"analyser\");",
											"var executionParameters= pm.variables.get(\"executionParameters\");",
											"var SUT = pm.variables.get(\"SUT\");",
											"",
											"",
											"pm.test(\"desiredState should be #complete\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:desiredState rdf:resource=\\\"http://open-services.net/ns/auto#complete\\\"/>\");",
											"});",
											"pm.test(\"verdict should be #passed\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:verdict rdf:resource=\\\"http://open-services.net/ns/auto#passed\\\"/>\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/resources/automationResults/{{requestId}}",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"resources",
										"automationResults",
										"{{requestId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "xsts",
					"item": [
						{
							"name": "create SUT using the compilation provider",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// save the request ID as a global variable for later tests to use -- used as SUT ID",
											"const response = xml2Json(pm.response.text());",
											"var resrouceAbout = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"].$[\"rdf:about\"];",
											"var resourceAboutSplit = resrouceAbout.split(\"/\");",
											"var requestId = resourceAboutSplit[resourceAboutSplit.length-1];",
											"pm.globals.set('requestId', requestId);",
											"",
											"",
											"pm.test(\"Response code should be 201 (created)\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"var compilation_provider = pm.variables.get(\"compilation_provider\");",
											"var sutId = requestId;",
											"pm.globals.set(\"SUT\", compilation_provider + \"/services/resources/sUTs/\" + sutId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/xml"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>Theta test request</dcterms:title>\n\t<dcterms:description>Testing Theta theta-xsts-cli through Unite</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{compilation_provider}}/services/resources/automationPlans/0\" />\n\t\n\t<oslc_auto:inputParameter>\n        <oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>sourceFilePath</oslc:name>\n\t\t\t<rdf:value>./tests/resources/theta-xsts.zip</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n        <oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>unpackZip</oslc:name>\n\t\t\t<rdf:value>true</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n\t<oslc_auto:inputParameter>\n        <oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>compile</oslc:name>\n\t\t\t<rdf:value>false</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>"
								},
								"url": {
									"raw": "{{compilation_provider}}/services/resources/createAutomationRequest",
									"host": [
										"{{compilation_provider}}"
									],
									"path": [
										"services",
										"resources",
										"createAutomationRequest"
									]
								}
							},
							"response": []
						},
						{
							"name": "wait for #complete (dev requests/theta xcfa/create sut)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var timeoutSeconds = pm.collectionVariables.get('automation_wait_time');",
											"",
											"var waitCounter = pm.globals.get(\"waitCounter\");",
											"if(!waitCounter) {",
											"    waitCounter = 0;",
											"}",
											"",
											"if (pm.response.code != 200) { // wait for the resource to be created",
											"    if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
											"        setTimeout(function(){}, [1000]); // 1 second",
											"        waitCounter++;",
											"        postman.setNextRequest(pm.info.requestName);",
											"    } else { // timeout, reset counter",
											"        waitCounter = 0;",
											"    }",
											"} else { // wait for the automation to complete",
											"    const response = xml2Json(pm.response.text());",
											"    var state = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"][\"oslc_auto:state\"].$[\"rdf:resource\"];",
											"    if (state == \"http://open-services.net/ns/auto#inProgress\") {",
											"        if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
											"            setTimeout(function(){}, [1000]); // 1 second",
											"            waitCounter++;",
											"            postman.setNextRequest(pm.info.requestName);",
											"        } else { // timeout, reset counter",
											"            waitCounter = 0;",
											"        }",
											"    } else { // wait doen, reset counter",
											"            waitCounter = 0;",
											"    }",
											"}",
											"",
											"pm.globals.set(\"waitCounter\", waitCounter);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"url": {
									"raw": "{{compilation_provider}}/services/resources/automationRequests/{{requestId}}",
									"host": [
										"{{compilation_provider}}"
									],
									"path": [
										"services",
										"resources",
										"automationRequests",
										"{{requestId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get SUT creation result",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"desiredState should be #complete\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:desiredState rdf:resource=\\\"http://open-services.net/ns/auto#complete\\\"/>\");",
											"});",
											"pm.test(\"verdict should be #passed\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:verdict rdf:resource=\\\"http://open-services.net/ns/auto#passed\\\"/>\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"url": {
									"raw": "{{compilation_provider}}/services/resources/automationResults/{{requestId}}",
									"host": [
										"{{compilation_provider}}"
									],
									"path": [
										"services",
										"resources",
										"automationResults",
										"{{requestId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "see Theta xsts Automation plan (optional fyi)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var serverAddr = pm.variables.get(\"server_address\");",
											"var server_context = pm.variables.get(\"server_context\");",
											"",
											"pm.test(\"Response code should be 200 (OK)\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/resources/automationPlans/theta-xsts-cli",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"resources",
										"automationPlans",
										"theta-xsts-cli"
									]
								}
							},
							"response": []
						},
						{
							"name": "execute analysis using Theta xcfa",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response code should be 201 (created)\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"",
											"// save the request ID as a global variable for later tests to use",
											"const response = xml2Json(pm.response.text());",
											"var resrouceAbout = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"].$[\"rdf:about\"];",
											"var resourceAboutSplit = resrouceAbout.split(\"/\");",
											"var requestId = resourceAboutSplit[resourceAboutSplit.length-1];",
											"pm.globals.set('requestId', requestId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/xml"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>Theta test request</dcterms:title>\n\t<dcterms:description>Testing Theta theta-xsts-cli through Unite</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{server_address}}/{{server_context}}/services/resources/automationPlans/theta-xsts-cli\" />\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>model</oslc:name>\n\t\t\t<rdf:value>*.xsts</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>property</oslc:name>\n\t\t\t<rdf:value>*.prop</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>cex</oslc:name>\n\t\t\t<rdf:value>output.cex</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>outputFileRegex</oslc:name>\n\t\t\t<rdf:value>.*[.]cex</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>outputFilter</oslc:name>\n\t\t\t<rdf:value>addAllFileValues</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>SUT</oslc:name>\n\t\t\t<rdf:value>{{SUT}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>"
								},
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/resources/createAutomationRequest",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"resources",
										"createAutomationRequest"
									]
								}
							},
							"response": []
						},
						{
							"name": "wait for #complete (dev requests/theta xcfa/analyse)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var timeoutSeconds = pm.collectionVariables.get('automation_wait_time');",
											"",
											"var waitCounter = pm.globals.get(\"waitCounter\");",
											"if(!waitCounter) {",
											"    waitCounter = 0;",
											"}",
											"",
											"if (pm.response.code != 200) { // wait for the resource to be created",
											"    if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
											"        setTimeout(function(){}, [1000]); // 1 second",
											"        waitCounter++;",
											"        postman.setNextRequest(pm.info.requestName);",
											"    } else { // timeout, reset counter",
											"        waitCounter = 0;",
											"    }",
											"} else { // wait for the automation to complete",
											"    const response = xml2Json(pm.response.text());",
											"    var state = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"][\"oslc_auto:state\"].$[\"rdf:resource\"];",
											"    if (state == \"http://open-services.net/ns/auto#inProgress\") {",
											"        if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
											"            setTimeout(function(){}, [1000]); // 1 second",
											"            waitCounter++;",
											"            postman.setNextRequest(pm.info.requestName);",
											"        } else { // timeout, reset counter",
											"            waitCounter = 0;",
											"        }",
											"    } else { // wait doen, reset counter",
											"            waitCounter = 0;",
											"    }",
											"}",
											"",
											"pm.globals.set(\"waitCounter\", waitCounter);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/resources/automationRequests/{{requestId}}",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"resources",
										"automationRequests",
										"{{requestId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get analysis result",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// get global variable to use in this test",
											"var requestId = pm.globals.get('requestId');",
											"var serverAddr = pm.variables.get(\"server_address\");",
											"var server_context = pm.variables.get(\"server_context\");",
											"var AutomationPlanId = pm.variables.get(\"AutomationPlanId\");",
											"var analyser = pm.variables.get(\"analyser\");",
											"var executionParameters= pm.variables.get(\"executionParameters\");",
											"var SUT = pm.variables.get(\"SUT\");",
											"",
											"",
											"pm.test(\"desiredState should be #complete\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:desiredState rdf:resource=\\\"http://open-services.net/ns/auto#complete\\\"/>\");",
											"});",
											"pm.test(\"verdict should be #passed\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:verdict rdf:resource=\\\"http://open-services.net/ns/auto#passed\\\"/>\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/resources/automationResults/{{requestId}}",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"resources",
										"automationResults",
										"{{requestId}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "frama-c",
			"item": [
				{
					"name": "basic example",
					"item": [
						{
							"name": "create SUT using the compilation provider",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// save the request ID as a global variable for later tests to use -- used as SUT ID",
											"const response = xml2Json(pm.response.text());",
											"var resrouceAbout = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"].$[\"rdf:about\"];",
											"var resourceAboutSplit = resrouceAbout.split(\"/\");",
											"var requestId = resourceAboutSplit[resourceAboutSplit.length-1];",
											"pm.globals.set('requestId', requestId);",
											"",
											"",
											"pm.test(\"Response code should be 201 (created)\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"var compilation_provider = pm.variables.get(\"compilation_provider\");",
											"var sutId = requestId;",
											"pm.globals.set(\"SUT\", compilation_provider + \"/services/resources/sUTs/\" + sutId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/xml"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>Theta test request</dcterms:title>\n\t<dcterms:description>Testing Theta theta-xcfa-cli through Unite</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{compilation_provider}}/services/resources/automationPlans/0\" />\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>sourceUrl</oslc:name>\n\t\t\t<rdf:value>http://www.stud.fit.vutbr.cz/~xvasic25/frama-c-example.zip</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>unpackZip</oslc:name>\n\t\t\t<rdf:value>true</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>compile</oslc:name>\n\t\t\t<rdf:value>false</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>"
								},
								"url": {
									"raw": "{{compilation_provider}}/services/resources/createAutomationRequest",
									"host": [
										"{{compilation_provider}}"
									],
									"path": [
										"services",
										"resources",
										"createAutomationRequest"
									]
								}
							},
							"response": []
						},
						{
							"name": "wait for #complete (dev requests/framac/create sut)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var timeoutSeconds = pm.collectionVariables.get('automation_wait_time');",
											"",
											"var waitCounter = pm.globals.get(\"waitCounter\");",
											"if(!waitCounter) {",
											"    waitCounter = 0;",
											"}",
											"",
											"if (pm.response.code != 200) { // wait for the resource to be created",
											"    if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
											"        setTimeout(function(){}, [1000]); // 1 second",
											"        waitCounter++;",
											"        postman.setNextRequest(pm.info.requestName);",
											"    } else { // timeout, reset counter",
											"        waitCounter = 0;",
											"    }",
											"} else { // wait for the automation to complete",
											"    const response = xml2Json(pm.response.text());",
											"    var state = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"][\"oslc_auto:state\"].$[\"rdf:resource\"];",
											"    if (state == \"http://open-services.net/ns/auto#inProgress\") {",
											"        if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
											"            setTimeout(function(){}, [1000]); // 1 second",
											"            waitCounter++;",
											"            postman.setNextRequest(pm.info.requestName);",
											"        } else { // timeout, reset counter",
											"            waitCounter = 0;",
											"        }",
											"    } else { // wait doen, reset counter",
											"            waitCounter = 0;",
											"    }",
											"}",
											"",
											"pm.globals.set(\"waitCounter\", waitCounter);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"url": {
									"raw": "{{compilation_provider}}/services/resources/automationRequests/{{requestId}}",
									"host": [
										"{{compilation_provider}}"
									],
									"path": [
										"services",
										"resources",
										"automationRequests",
										"{{requestId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get SUT creation result",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"desiredState should be #complete\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:desiredState rdf:resource=\\\"http://open-services.net/ns/auto#complete\\\"/>\");",
											"});",
											"pm.test(\"verdict should be #passed\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:verdict rdf:resource=\\\"http://open-services.net/ns/auto#passed\\\"/>\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"url": {
									"raw": "{{compilation_provider}}/services/resources/automationResults/{{requestId}}",
									"host": [
										"{{compilation_provider}}"
									],
									"path": [
										"services",
										"resources",
										"automationResults",
										"{{requestId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "see the automation plan",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var serverAddr = pm.variables.get(\"server_address\");",
											"var server_context = pm.variables.get(\"server_context\");",
											"",
											"pm.test(\"Response code should be 200 (OK)\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/resources/automationPlans/frama-c",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"resources",
										"automationPlans",
										"frama-c"
									]
								}
							},
							"response": []
						},
						{
							"name": "execute analysis using the tool",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response code should be 201 (created)\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"",
											"// save the request ID as a global variable for later tests to use",
											"const response = xml2Json(pm.response.text());",
											"var resrouceAbout = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"].$[\"rdf:about\"];",
											"var resourceAboutSplit = resrouceAbout.split(\"/\");",
											"var requestId = resourceAboutSplit[resourceAboutSplit.length-1];",
											"pm.globals.set('requestId', requestId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/xml"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>Theta test request</dcterms:title>\n\t<dcterms:description>Testing Theta theta-xcfa-cli through Unite</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{server_address}}/{{server_context}}/services/resources/automationPlans/frama-c\" />\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>arguments</oslc:name>\n\t\t\t<rdf:value>-eva ./CruiseControl*.c</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>SUT</oslc:name>\n\t\t\t<rdf:value>{{SUT}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>"
								},
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/resources/createAutomationRequest",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"resources",
										"createAutomationRequest"
									]
								}
							},
							"response": []
						},
						{
							"name": "wait for #complete (dev requests/framac/analyse)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var timeoutSeconds = pm.collectionVariables.get('automation_wait_time');",
											"",
											"var waitCounter = pm.globals.get(\"waitCounter\");",
											"if(!waitCounter) {",
											"    waitCounter = 0;",
											"}",
											"",
											"if (pm.response.code != 200) { // wait for the resource to be created",
											"    if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
											"        setTimeout(function(){}, [1000]); // 1 second",
											"        waitCounter++;",
											"        postman.setNextRequest(pm.info.requestName);",
											"    } else { // timeout, reset counter",
											"        waitCounter = 0;",
											"    }",
											"} else { // wait for the automation to complete",
											"    const response = xml2Json(pm.response.text());",
											"    var state = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"][\"oslc_auto:state\"].$[\"rdf:resource\"];",
											"    if (state == \"http://open-services.net/ns/auto#inProgress\") {",
											"        if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
											"            setTimeout(function(){}, [1000]); // 1 second",
											"            waitCounter++;",
											"            postman.setNextRequest(pm.info.requestName);",
											"        } else { // timeout, reset counter",
											"            waitCounter = 0;",
											"        }",
											"    } else { // wait doen, reset counter",
											"            waitCounter = 0;",
											"    }",
											"}",
											"",
											"pm.globals.set(\"waitCounter\", waitCounter);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/resources/automationRequests/{{requestId}}",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"resources",
										"automationRequests",
										"{{requestId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get analysis result",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// get global variable to use in this test",
											"var requestId = pm.globals.get('requestId');",
											"var serverAddr = pm.variables.get(\"server_address\");",
											"var server_context = pm.variables.get(\"server_context\");",
											"var AutomationPlanId = pm.variables.get(\"AutomationPlanId\");",
											"var analyser = pm.variables.get(\"analyser\");",
											"var executionParameters= pm.variables.get(\"executionParameters\");",
											"var SUT = pm.variables.get(\"SUT\");",
											"",
											"",
											"pm.test(\"desiredState should be #complete\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:desiredState rdf:resource=\\\"http://open-services.net/ns/auto#complete\\\"/>\");",
											"});",
											"pm.test(\"verdict should be #passed\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:verdict rdf:resource=\\\"http://open-services.net/ns/auto#passed\\\"/>\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/resources/automationResults/{{requestId}}",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"resources",
										"automationResults",
										"{{requestId}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "bug testing",
			"item": [
				{
					"name": "invalid xml characters",
					"item": [
						{
							"name": "create SUT using the compilation provider",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// save the request ID as a global variable for later tests to use -- used as SUT ID",
											"const response = xml2Json(pm.response.text());",
											"var resrouceAbout = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"].$[\"rdf:about\"];",
											"var resourceAboutSplit = resrouceAbout.split(\"/\");",
											"var requestId = resourceAboutSplit[resourceAboutSplit.length-1];",
											"pm.globals.set('requestId', requestId);",
											"",
											"",
											"pm.test(\"Response code should be 201 (created)\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"var compilation_provider = pm.variables.get(\"compilation_provider\");",
											"var sutId = requestId;",
											"pm.globals.set(\"SUT\", compilation_provider + \"/services/resources/sUTs/\" + sutId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/xml"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<rdf:RDF\n    xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n    xmlns:dcterms=\"http://purl.org/dc/terms/\"\n    xmlns:oslc_data=\"http://open-services.net/ns/servicemanagement/1.0/\"\n    xmlns:oslc=\"http://open-services.net/ns/core#\"\n    xmlns:foaf=\"http://xmlns.com/foaf/0.1/#\"\n    xmlns:fit=\"http://fit.vutbr.cz/group/verifit/oslc/ns/universal-analysis#\"\n    xmlns:rdfs=\"http://www.w3.org/2000/01/rdf-schema#\"\n    xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n    <oslc_auto:AutomationRequest>\n        <oslc_auto:inputParameter>\n            <oslc_auto:ParameterInstance>\n                <!-- rdf:value>mvn -B install</rdf:value> -->\n                <rdf:value>mvn clean install</rdf:value>\n                <oslc:name>buildCommand</oslc:name>\n            </oslc_auto:ParameterInstance>\n        </oslc_auto:inputParameter>\n        <oslc_auto:executesAutomationPlan rdf:resource=\"{{compilation_provider}}/services/resources/automationPlans/0\"/>\n        <oslc_auto:inputParameter>\n            <oslc_auto:ParameterInstance>\n                <rdf:value>false</rdf:value>\n                <oslc:name>compile</oslc:name>\n            </oslc_auto:ParameterInstance>\n        </oslc_auto:inputParameter>\n        <dcterms:title rdf:parseType=\"Literal\">Register SUT</dcterms:title>\n        <dcterms:identifier>1</dcterms:identifier>\n        <oslc_auto:desiredState rdf:resource=\"http://open-services.net/ns/auto#complete\"/>\n        <oslc_auto:inputParameter>\n            <oslc_auto:ParameterInstance>\n                <rdf:value>true</rdf:value>\n                <oslc:name>unpackZip</oslc:name>\n            </oslc_auto:ParameterInstance>\n        </oslc_auto:inputParameter>\n        <oslc_auto:inputParameter>\n            <oslc_auto:ParameterInstance>\n                <rdf:value>input.zip\</rdf:value>\n                <oslc:name>sourceBase64</oslc:name>\n            </oslc_auto:ParameterInstance>\n        </oslc_auto:inputParameter>\n    </oslc_auto:AutomationRequest>\n</rdf:RDF>"
								},
								"url": {
									"raw": "{{compilation_provider}}/services/resources/createAutomationRequest",
									"host": [
										"{{compilation_provider}}"
									],
									"path": [
										"services",
										"resources",
										"createAutomationRequest"
									]
								}
							},
							"response": []
						},
						{
							"name": "wait for #complete (dev requests/but testing/invalid xml/create sut)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var timeoutSeconds = pm.collectionVariables.get('automation_wait_time');",
											"",
											"var waitCounter = pm.globals.get(\"waitCounter\");",
											"if(!waitCounter) {",
											"    waitCounter = 0;",
											"}",
											"",
											"if (pm.response.code != 200) { // wait for the resource to be created",
											"    if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
											"        setTimeout(function(){}, [1000]); // 1 second",
											"        waitCounter++;",
											"        postman.setNextRequest(pm.info.requestName);",
											"    } else { // timeout, reset counter",
											"        waitCounter = 0;",
											"    }",
											"} else { // wait for the automation to complete",
											"    const response = xml2Json(pm.response.text());",
											"    var state = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"][\"oslc_auto:state\"].$[\"rdf:resource\"];",
											"    if (state == \"http://open-services.net/ns/auto#inProgress\") {",
											"        if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
											"            setTimeout(function(){}, [1000]); // 1 second",
											"            waitCounter++;",
											"            postman.setNextRequest(pm.info.requestName);",
											"        } else { // timeout, reset counter",
											"            waitCounter = 0;",
											"        }",
											"    } else { // wait doen, reset counter",
											"            waitCounter = 0;",
											"    }",
											"}",
											"",
											"pm.globals.set(\"waitCounter\", waitCounter);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"url": {
									"raw": "{{compilation_provider}}/services/resources/automationRequests/{{requestId}}",
									"host": [
										"{{compilation_provider}}"
									],
									"path": [
										"services",
										"resources",
										"automationRequests",
										"{{requestId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get result",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"url": {
									"raw": "{{compilation_provider}}/services/resources/automationResults/{{requestId}}",
									"host": [
										"{{compilation_provider}}"
									],
									"path": [
										"services",
										"resources",
										"automationResults",
										"{{requestId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "analyse AutomationPlan",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var serverAddr = pm.variables.get(\"server_address\");",
											"var server_context = pm.variables.get(\"server_context\");",
											"",
											"pm.test(\"Response code should be 200 (OK)\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/resources/automationPlans/example",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"resources",
										"automationPlans",
										"example"
									]
								}
							},
							"response": []
						},
						{
							"name": "analyse",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response code should be 201 (created)\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"",
											"// save the request ID as a global variable for later tests to use",
											"const response = xml2Json(pm.response.text());",
											"var resrouceAbout = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"].$[\"rdf:about\"];",
											"var resourceAboutSplit = resrouceAbout.split(\"/\");",
											"var requestId = resourceAboutSplit[resourceAboutSplit.length-1];",
											"pm.globals.set('requestId', requestId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/xml"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>First prototype request</dcterms:title>\n\t<dcterms:description>Test</dcterms:description>\n    <oslc_auto:executesAutomationPlan rdf:resource=\"{{server_address}}/{{server_context}}//services/resources/automationPlans/infer\"/>\n\t\n        <oslc_auto:inputParameter>\n            <oslc_auto:ParameterInstance>\n                <rdf:value>run</rdf:value>\n                <oslc:name>sub-command</oslc:name>\n            </oslc_auto:ParameterInstance>\n        </oslc_auto:inputParameter>\n        <oslc_auto:inputParameter>\n            <oslc_auto:ParameterInstance>\n                <rdf:value>--reactive</rdf:value>\n                <oslc:name>options</oslc:name>\n            </oslc_auto:ParameterInstance>\n        </oslc_auto:inputParameter>\n        <oslc_auto:inputParameter>\n            <oslc_auto:ParameterInstance>\n                <rdf:value>true</rdf:value>\n                <oslc:name>SUTbuildCommand</oslc:name>\n            </oslc_auto:ParameterInstance>\n        </oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>SUT</oslc:name>\n\t\t\t<rdf:value>{{SUT}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>"
								},
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/resources/createAutomationRequest",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"resources",
										"createAutomationRequest"
									]
								}
							},
							"response": []
						},
						{
							"name": "wait for #complete (dev requests/bug testing/invalid xml/analyse)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var timeoutSeconds = pm.collectionVariables.get('automation_wait_time');",
											"",
											"var waitCounter = pm.globals.get(\"waitCounter\");",
											"if(!waitCounter) {",
											"    waitCounter = 0;",
											"}",
											"",
											"if (pm.response.code != 200) { // wait for the resource to be created",
											"    if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
											"        setTimeout(function(){}, [1000]); // 1 second",
											"        waitCounter++;",
											"        postman.setNextRequest(pm.info.requestName);",
											"    } else { // timeout, reset counter",
											"        waitCounter = 0;",
											"    }",
											"} else { // wait for the automation to complete",
											"    const response = xml2Json(pm.response.text());",
											"    var state = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"][\"oslc_auto:state\"].$[\"rdf:resource\"];",
											"    if (state == \"http://open-services.net/ns/auto#inProgress\") {",
											"        if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
											"            setTimeout(function(){}, [1000]); // 1 second",
											"            waitCounter++;",
											"            postman.setNextRequest(pm.info.requestName);",
											"        } else { // timeout, reset counter",
											"            waitCounter = 0;",
											"        }",
											"    } else { // wait doen, reset counter",
											"            waitCounter = 0;",
											"    }",
											"}",
											"",
											"pm.globals.set(\"waitCounter\", waitCounter);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/resources/automationRequests/{{requestId}}",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"resources",
										"automationRequests",
										"{{requestId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "check result",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// get global variable to use in this test",
											"var requestId = pm.globals.get('requestId');",
											"var serverAddr = pm.variables.get(\"server_address\");",
											"var server_context = pm.variables.get(\"server_context\");",
											"var AutomationPlanId = pm.variables.get(\"AutomationPlanId\");",
											"var analyser = pm.variables.get(\"analyser\");",
											"var executionParameters= pm.variables.get(\"executionParameters\");",
											"var SUT = pm.variables.get(\"SUT\");",
											"",
											"",
											"pm.test(\"Response code should be 200 (OK)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/resources/automationResults/{{requestId}}?enableInProgressOutputs=true",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"resources",
										"automationResults",
										"{{requestId}}"
									],
									"query": [
										{
											"key": "enableInProgressOutputs",
											"value": "true"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	],
	"auth": {
		"type": "basic",
		"basic": [
			{
				"key": "password",
				"value": "{{password}}",
				"type": "string"
			},
			{
				"key": "username",
				"value": "{{username}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "server_address",
			"value": "http://localhost:8080"
		},
		{
			"key": "server_context",
			"value": "analysis"
		},
		{
			"key": "compilation_provider",
			"value": "http://localhost:8081/compilation"
		},
		{
			"key": "username",
			"value": "user"
		},
		{
			"key": "password",
			"value": "user"
		},
		{
			"key": "automation_wait_time",
			"value": "30"
		}
	]
}