// Start of user code Copyright
/*******************************************************************************
 * Copyright (c) 2012 IBM Corporation and others.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * and Eclipse Distribution License v. 1.0 which accompanies this distribution.
 *
 * The Eclipse Public License is available at http://www.eclipse.org/legal/epl-v10.html
 * and the Eclipse Distribution License is available at
 * http://www.eclipse.org/org/documents/edl-v10.php.
 *
 * Contributors:
 *
 *     Russell Boykin       - initial API and implementation
 *     Alberto Giammaria    - initial API and implementation
 *     Chris Peters         - initial API and implementation
 *     Gianluca Bernardini  - initial API and implementation
 *       Sam Padgett          - initial API and implementation
 *     Michael Fiedler      - adapted for OSLC4J
 *     Jad El-khoury        - initial implementation of code generator (422448)
 *     Matthieu Helleboid   - Support for multiple Service Providers.
 *     Anass Radouani       - Support for multiple Service Providers.
 *
 * This file is generated by org.eclipse.lyo.oslc4j.codegenerator
 *******************************************************************************/
// End of user code

package org.eclipse.lyo.oslc.domains.auto;

import java.net.URI;
import java.net.URISyntaxException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.text.SimpleDateFormat;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.TreeSet;
import java.util.Iterator;
import javax.servlet.http.HttpServletRequest;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import javax.ws.rs.core.UriBuilder;

import org.eclipse.lyo.oslc4j.core.OSLC4JUtils;
import org.eclipse.lyo.oslc4j.core.exception.OslcCoreApplicationException;
import org.eclipse.lyo.oslc4j.core.annotation.OslcAllowedValue;
import org.eclipse.lyo.oslc4j.core.annotation.OslcDescription;
import org.eclipse.lyo.oslc4j.core.annotation.OslcMemberProperty;
import org.eclipse.lyo.oslc4j.core.annotation.OslcName;
import org.eclipse.lyo.oslc4j.core.annotation.OslcNamespace;
import org.eclipse.lyo.oslc4j.core.annotation.OslcOccurs;
import org.eclipse.lyo.oslc4j.core.annotation.OslcPropertyDefinition;
import org.eclipse.lyo.oslc4j.core.annotation.OslcRange;
import org.eclipse.lyo.oslc4j.core.annotation.OslcReadOnly;
import org.eclipse.lyo.oslc4j.core.annotation.OslcRepresentation;
import org.eclipse.lyo.oslc4j.core.annotation.OslcResourceShape;
import org.eclipse.lyo.oslc4j.core.annotation.OslcTitle;
import org.eclipse.lyo.oslc4j.core.annotation.OslcValueType;
import org.eclipse.lyo.oslc4j.core.model.AbstractResource;
import org.eclipse.lyo.oslc4j.core.model.Link;
import org.eclipse.lyo.oslc4j.core.model.Occurs;
import org.eclipse.lyo.oslc4j.core.model.OslcConstants;
import org.eclipse.lyo.oslc4j.core.model.Representation;
import org.eclipse.lyo.oslc4j.core.model.ValueType;
import org.eclipse.lyo.oslc4j.core.model.ResourceShape;
import org.eclipse.lyo.oslc4j.core.model.ResourceShapeFactory;

import org.eclipse.lyo.oslc.domains.auto.Oslc_autoDomainConstants;


import org.eclipse.lyo.oslc.domains.auto.Oslc_autoDomainConstants;
import org.eclipse.lyo.oslc.domains.DctermsDomainConstants;
import org.eclipse.lyo.oslc.domains.FoafDomainConstants;
import org.eclipse.lyo.oslc4j.core.model.OslcDomainConstants;
import org.eclipse.lyo.oslc.domains.RdfDomainConstants;
import verifit.analysis.resources.FitDomainConstants;
import verifit.analysis.resources.TextOut;
import org.eclipse.lyo.oslc.domains.Person;
import verifit.analysis.resources.SUT;
import org.eclipse.lyo.oslc.domains.Person;
import org.eclipse.lyo.oslc.domains.auto.ParameterInstance;
import org.eclipse.lyo.oslc.domains.auto.ParameterInstance;
import org.eclipse.lyo.oslc.domains.auto.AutomationRequest;
import org.eclipse.lyo.oslc.domains.auto.AutomationPlan;

// Start of user code imports
// End of user code

// Start of user code preClassCode
// End of user code

// Start of user code classAnnotations
// End of user code
@OslcNamespace(Oslc_autoDomainConstants.AUTOMATIONRESULT_NAMESPACE)
@OslcName(Oslc_autoDomainConstants.AUTOMATIONRESULT_LOCALNAME)
@OslcResourceShape(title = "AutomationResult Resource Shape", describes = Oslc_autoDomainConstants.AUTOMATIONRESULT_TYPE)
public class AutomationResult
    extends AbstractResource
    implements IAutomationResult
{
    // Start of user code attributeAnnotation:contributor
    // End of user code
    private HashSet<Link> contributor = new HashSet<Link>();
    // Start of user code attributeAnnotation:created
    // End of user code
    private Date created;
    // Start of user code attributeAnnotation:creator
    // End of user code
    private HashSet<Link> creator = new HashSet<Link>();
    // Start of user code attributeAnnotation:identifier
    // End of user code
    private String identifier;
    // Start of user code attributeAnnotation:modified
    // End of user code
    private Date modified;
    // Start of user code attributeAnnotation:type
    // End of user code
    private HashSet<Link> type = new HashSet<Link>();
    // Start of user code attributeAnnotation:subject
    // End of user code
    private HashSet<String> subject = new HashSet<String>();
    // Start of user code attributeAnnotation:title
    // End of user code
    private String title;
    // Start of user code attributeAnnotation:instanceShape
    // End of user code
    private URI instanceShape;
    // Start of user code attributeAnnotation:serviceProvider
    // End of user code
    private HashSet<URI> serviceProvider = new HashSet<URI>();
    // Start of user code attributeAnnotation:state
    // End of user code
    private HashSet<Link> state = new HashSet<Link>();
    // Start of user code attributeAnnotation:desiredState
    // End of user code
    private Link desiredState = new Link();
    // Start of user code attributeAnnotation:verdict
    // End of user code
    private HashSet<Link> verdict = new HashSet<Link>();
    // Start of user code attributeAnnotation:contribution
    // End of user code
    private HashSet<TextOut> contribution = new HashSet<TextOut>();
    // Start of user code attributeAnnotation:inputParameter
    // End of user code
    private HashSet<ParameterInstance> inputParameter = new HashSet<ParameterInstance>();
    // Start of user code attributeAnnotation:outputParameter
    // End of user code
    private HashSet<ParameterInstance> outputParameter = new HashSet<ParameterInstance>();
    // Start of user code attributeAnnotation:producedByAutomationRequest
    // End of user code
    private Link producedByAutomationRequest = new Link();
    // Start of user code attributeAnnotation:reportsOnAutomationPlan
    // End of user code
    private Link reportsOnAutomationPlan = new Link();
    // Start of user code attributeAnnotation:createdSUT
    // End of user code
    private Link createdSUT = new Link();
    
    // Start of user code classAttributes
    // End of user code
    // Start of user code classMethods
    // End of user code
    public AutomationResult()
           throws URISyntaxException
    {
        super();
    
        // Start of user code constructor1
        // End of user code
    }
    
    public AutomationResult(final URI about)
           throws URISyntaxException
    {
        super(about);
    
        // Start of user code constructor2
        // End of user code
    }
    
    /**
    * @deprecated Use the methods in class {@link verifit.compilation.VeriFitCompilationResourcesFactory} instead.
    */
    @Deprecated
    public AutomationResult(final String serviceProviderId, final String automationResultId)
           throws URISyntaxException
    {
        this (constructURI(serviceProviderId, automationResultId));
        // Start of user code constructor3
        // End of user code
    }
    
    /**
    * @deprecated Use the methods in class {@link verifit.compilation.VeriFitCompilationResourcesFactory} instead.
    */
    @Deprecated
    public static URI constructURI(final String serviceProviderId, final String automationResultId)
    {
        String basePath = OSLC4JUtils.getServletURI();
        Map<String, Object> pathParameters = new HashMap<String, Object>();
        pathParameters.put("serviceProviderId", serviceProviderId);
        pathParameters.put("automationResultId", automationResultId);
        String instanceURI = "serviceProviders/{serviceProviderId}/resources/automationResults/{automationResultId}";
    
        final UriBuilder builder = UriBuilder.fromUri(basePath);
        return builder.path(instanceURI).buildFromMap(pathParameters);
    }
    
    /**
    * @deprecated Use the methods in class {@link verifit.compilation.VeriFitCompilationResourcesFactory} instead.
    */
    @Deprecated
    public static Link constructLink(final String serviceProviderId, final String automationResultId , final String label)
    {
        return new Link(constructURI(serviceProviderId, automationResultId), label);
    }
    
    /**
    * @deprecated Use the methods in class {@link verifit.compilation.VeriFitCompilationResourcesFactory} instead.
    */
    @Deprecated
    public static Link constructLink(final String serviceProviderId, final String automationResultId)
    {
        return new Link(constructURI(serviceProviderId, automationResultId));
    }
    
    public static ResourceShape createResourceShape() throws OslcCoreApplicationException, URISyntaxException {
        return ResourceShapeFactory.createResourceShape(OSLC4JUtils.getServletURI(),
        OslcConstants.PATH_RESOURCE_SHAPES,
        Oslc_autoDomainConstants.AUTOMATIONRESULT_PATH,
        AutomationResult.class);
    }
    
    
    public String toString()
    {
        return toString(false);
    }
    
    public String toString(boolean asLocalResource)
    {
        String result = "";
        // Start of user code toString_init
        // End of user code
    
        if (asLocalResource) {
            result = result + "{a Local AutomationResult Resource} - update AutomationResult.toString() to present resource as desired.";
            // Start of user code toString_bodyForLocalResource
            // End of user code
        }
        else {
            result = getAbout().toString();
        }
    
        // Start of user code toString_finalize
        // End of user code
    
        return result;
    }
    
    @Deprecated
    public String toHtml()
    {
        return toHtml(false);
    }
    
    @Deprecated
    public String toHtml(boolean asLocalResource)
    {
        String result = "";
        // Start of user code toHtml_init
        // End of user code
    
        if (asLocalResource) {
            result = toString(true);
            // Start of user code toHtml_bodyForLocalResource
            // End of user code
        }
        else {
            result = "<a href=\"" + getAbout() + "\" class=\"oslc-resource-link\">" + toString() + "</a>";
        }
    
        // Start of user code toHtml_finalize
        // End of user code
    
        return result;
    }
    
    public void addContributor(final Link contributor)
    {
        this.contributor.add(contributor);
    }
    
    public void addCreator(final Link creator)
    {
        this.creator.add(creator);
    }
    
    public void addType(final Link type)
    {
        this.type.add(type);
    }
    
    public void addSubject(final String subject)
    {
        this.subject.add(subject);
    }
    
    public void addServiceProvider(final URI serviceProvider)
    {
        this.serviceProvider.add(serviceProvider);
    }
    
    public void addState(final Link state)
    {
        this.state.add(state);
    }
    
    public void addVerdict(final Link verdict)
    {
        this.verdict.add(verdict);
    }
    
    public void addContribution(final TextOut contribution)
    {
        this.contribution.add(contribution);
    }
    
    public void addInputParameter(final ParameterInstance inputParameter)
    {
        this.inputParameter.add(inputParameter);
    }
    
    public void addOutputParameter(final ParameterInstance outputParameter)
    {
        this.outputParameter.add(outputParameter);
    }
    
    
    // Start of user code getterAnnotation:contributor
    // End of user code
    @OslcName("contributor")
    @OslcPropertyDefinition(DctermsDomainConstants.DUBLIN_CORE_NAMSPACE + "contributor")
    @OslcDescription("Contributor or contributors to the resource. It is likely that the target resource will be a foaf:Person but that is not necessarily the case.")
    @OslcOccurs(Occurs.ZeroOrMany)
    @OslcValueType(ValueType.Resource)
    @OslcRange({FoafDomainConstants.PERSON_TYPE})
    @OslcReadOnly(false)
    public Set<Link> getContributor()
    {
        // Start of user code getterInit:contributor
        // End of user code
        return contributor;
    }
    
    // Start of user code getterAnnotation:created
    // End of user code
    @OslcName("created")
    @OslcPropertyDefinition(DctermsDomainConstants.DUBLIN_CORE_NAMSPACE + "created")
    @OslcDescription("Timestamp of resource creation")
    @OslcOccurs(Occurs.ZeroOrOne)
    @OslcValueType(ValueType.DateTime)
    @OslcReadOnly(false)
    public Date getCreated()
    {
        // Start of user code getterInit:created
        // End of user code
        return created;
    }
    
    // Start of user code getterAnnotation:creator
    // End of user code
    @OslcName("creator")
    @OslcPropertyDefinition(DctermsDomainConstants.DUBLIN_CORE_NAMSPACE + "creator")
    @OslcDescription("Creator or creators of the resource. It is likely that the target resource will be a foaf:Person but that is not necessarily the case.")
    @OslcOccurs(Occurs.ZeroOrMany)
    @OslcValueType(ValueType.Resource)
    @OslcRange({FoafDomainConstants.PERSON_TYPE})
    @OslcReadOnly(false)
    public Set<Link> getCreator()
    {
        // Start of user code getterInit:creator
        // End of user code
        return creator;
    }
    
    // Start of user code getterAnnotation:identifier
    // End of user code
    @OslcName("identifier")
    @OslcPropertyDefinition(DctermsDomainConstants.DUBLIN_CORE_NAMSPACE + "identifier")
    @OslcDescription("A unique identifier for a resource. Typically read-only and assigned by the service provider when a resource is created. Not typically intended for end-user display.")
    @OslcOccurs(Occurs.ExactlyOne)
    @OslcValueType(ValueType.String)
    @OslcReadOnly(false)
    public String getIdentifier()
    {
        // Start of user code getterInit:identifier
        // End of user code
        return identifier;
    }
    
    // Start of user code getterAnnotation:modified
    // End of user code
    @OslcName("modified")
    @OslcPropertyDefinition(DctermsDomainConstants.DUBLIN_CORE_NAMSPACE + "modified")
    @OslcDescription("Timestamp of latest resource modification")
    @OslcOccurs(Occurs.ZeroOrOne)
    @OslcValueType(ValueType.DateTime)
    @OslcReadOnly(false)
    public Date getModified()
    {
        // Start of user code getterInit:modified
        // End of user code
        return modified;
    }
    
    // Start of user code getterAnnotation:type
    // End of user code
    @OslcName("type")
    @OslcPropertyDefinition(RdfDomainConstants.RDF_NAMSPACE + "type")
    @OslcDescription("The resource type URIs")
    @OslcOccurs(Occurs.ZeroOrMany)
    @OslcValueType(ValueType.Resource)
    @OslcReadOnly(false)
    public Set<Link> getType()
    {
        // Start of user code getterInit:type
        // End of user code
        return type;
    }
    
    // Start of user code getterAnnotation:subject
    // End of user code
    @OslcName("subject")
    @OslcPropertyDefinition(DctermsDomainConstants.DUBLIN_CORE_NAMSPACE + "subject")
    @OslcDescription("Tag or keyword for a resource. Each occurrence of a dcterms:subject property denotes an additional tag for the resource.")
    @OslcOccurs(Occurs.ZeroOrMany)
    @OslcValueType(ValueType.String)
    @OslcReadOnly(false)
    @OslcTitle("")
    public Set<String> getSubject()
    {
        // Start of user code getterInit:subject
        // End of user code
        return subject;
    }
    
    // Start of user code getterAnnotation:title
    // End of user code
    @OslcName("title")
    @OslcPropertyDefinition(DctermsDomainConstants.DUBLIN_CORE_NAMSPACE + "title")
    @OslcDescription("Title of the resource represented as rich text in XHTML content. SHOULD include only content that is valid inside an XHTML <span> element.")
    @OslcOccurs(Occurs.ZeroOrOne)
    @OslcValueType(ValueType.XMLLiteral)
    @OslcReadOnly(false)
    public String getTitle()
    {
        // Start of user code getterInit:title
        // End of user code
        return title;
    }
    
    // Start of user code getterAnnotation:instanceShape
    // End of user code
    @OslcName("instanceShape")
    @OslcPropertyDefinition(OslcDomainConstants.OSLC_NAMSPACE + "instanceShape")
    @OslcDescription("The URI of a Resource Shape that describes the possible properties, occurrence, value types, allowed values and labels. This shape information is useful in displaying the subject resource as well as guiding clients in performing modifications. Instance shapes may be specific to the authenticated user associated with the request that retrieved the resource, the current state of the resource and other factors and thus should not be cached.")
    @OslcOccurs(Occurs.ZeroOrOne)
    @OslcReadOnly(false)
    public URI getInstanceShape()
    {
        // Start of user code getterInit:instanceShape
        // End of user code
        return instanceShape;
    }
    
    // Start of user code getterAnnotation:serviceProvider
    // End of user code
    @OslcName("serviceProvider")
    @OslcPropertyDefinition(OslcDomainConstants.OSLC_NAMSPACE + "serviceProvider")
    @OslcDescription("A link to the resource's OSLC Service Provider. There may be cases when the subject resource is available from a service provider that implements multiple domain specifications, which could result in multiple values for this property.")
    @OslcOccurs(Occurs.ZeroOrMany)
    @OslcReadOnly(false)
    public Set<URI> getServiceProvider()
    {
        // Start of user code getterInit:serviceProvider
        // End of user code
        return serviceProvider;
    }
    
    // Start of user code getterAnnotation:state
    // End of user code
    @OslcName("state")
    @OslcPropertyDefinition(Oslc_autoDomainConstants.AUTOMATION_NAMSPACE + "state")
    @OslcDescription("Used to indicate the state of the automation request based on values defined by the service provider. Most often a read-only property. It is expected that this will be a resource reference to a definition of a valid automation request state on the service provider.")
    @OslcOccurs(Occurs.OneOrMany)
    @OslcValueType(ValueType.Resource)
    @OslcReadOnly(true)
    public Set<Link> getState()
    {
        // Start of user code getterInit:state
        // End of user code
        return state;
    }
    
    // Start of user code getterAnnotation:desiredState
    // End of user code
    @OslcName("desiredState")
    @OslcPropertyDefinition(Oslc_autoDomainConstants.AUTOMATION_NAMSPACE + "desiredState")
    @OslcDescription("Used to indicate the desired state of the Automation Request based on values defined by the service provider. It is expected that this will be a resource reference to a definition of a valid automation request state on the service provider.")
    @OslcOccurs(Occurs.ZeroOrOne)
    @OslcValueType(ValueType.Resource)
    @OslcReadOnly(false)
    public Link getDesiredState()
    {
        // Start of user code getterInit:desiredState
        // End of user code
        return desiredState;
    }
    
    // Start of user code getterAnnotation:verdict
    // End of user code
    @OslcName("verdict")
    @OslcPropertyDefinition(Oslc_autoDomainConstants.AUTOMATION_NAMSPACE + "verdict")
    @OslcDescription("Used to indicate the verdict of the automation result based on values defined by the service provider. Most often a read-only property. It is expected that this will be a resource reference to a definition of a valid automation result verdict on the service provider.")
    @OslcOccurs(Occurs.OneOrMany)
    @OslcValueType(ValueType.Resource)
    @OslcReadOnly(false)
    public Set<Link> getVerdict()
    {
        // Start of user code getterInit:verdict
        // End of user code
        return verdict;
    }
    
    // Start of user code getterAnnotation:contribution
    // End of user code
    @OslcName("contribution")
    @OslcPropertyDefinition(Oslc_autoDomainConstants.AUTOMATION_NAMSPACE + "contribution")
    @OslcDescription("A result contribution associated with this automation result. It is recommended that the contribution be an inline resource which can be retrieved with the automation result. The recommended attributes beyond the contribution itself are dcterms:title, dcterms:description and dcterms:type to provide a description of the contribution which would be appropriate for display in a simple UI for an automation result.")
    @OslcOccurs(Occurs.ZeroOrMany)
    @OslcValueType(ValueType.LocalResource)
    @OslcRepresentation(Representation.Inline)
    @OslcRange({FitDomainConstants.TEXTOUT_TYPE})
    @OslcReadOnly(false)
    public Set<TextOut> getContribution()
    {
        // Start of user code getterInit:contribution
        // End of user code
        return contribution;
    }
    
    // Start of user code getterAnnotation:inputParameter
    // End of user code
    @OslcName("inputParameter")
    @OslcPropertyDefinition(Oslc_autoDomainConstants.AUTOMATION_NAMSPACE + "inputParameter")
    @OslcDescription("Parameters provided when Automation Requests are created. These include parameters provided by the creator of the Automation Request (whether by delegated UI or HTTP POST) and MAY include additional parameters added by the service provider during Automation Request creation. See the definition of the oslc_auto:parameterDefinition attribute of the Automation Plan for additional guidance on determining which parameters are required. Creators of Automation Requests MAY provide parameters beyond those defined in the Automation Plan without guarantee the service provider will recognize or honor them. It is expected that this attribute is write-able on Automation Request creation and read-only thereafter.")
    @OslcOccurs(Occurs.ZeroOrMany)
    @OslcValueType(ValueType.LocalResource)
    @OslcRepresentation(Representation.Inline)
    @OslcRange({Oslc_autoDomainConstants.PARAMETERINSTANCE_TYPE})
    @OslcReadOnly(false)
    public Set<ParameterInstance> getInputParameter()
    {
        // Start of user code getterInit:inputParameter
        // End of user code
        return inputParameter;
    }
    
    // Start of user code getterAnnotation:outputParameter
    // End of user code
    @OslcName("outputParameter")
    @OslcPropertyDefinition(Oslc_autoDomainConstants.AUTOMATION_NAMSPACE + "outputParameter")
    @OslcDescription("Automation Result output parameters are parameters associated with the automation execution which produced this Result. This includes the final value of all parameters used to initiate the execution and any additional parameters which may have been created during automation execution by the service provider or external agents. The value of a given oslc_auto:outputParameter MAY change as the execution proceeds. Point-in-time accuracy of the values of output parameters is not covered by this specification. Once the Automation Result is in a final state ( oslc_auto:complete or oslc_auto:canceled), the oslc_auto:outputParameter values MUST NOT change.")
    @OslcOccurs(Occurs.ZeroOrMany)
    @OslcValueType(ValueType.LocalResource)
    @OslcRepresentation(Representation.Inline)
    @OslcRange({Oslc_autoDomainConstants.PARAMETERINSTANCE_TYPE})
    @OslcReadOnly(false)
    public Set<ParameterInstance> getOutputParameter()
    {
        // Start of user code getterInit:outputParameter
        // End of user code
        return outputParameter;
    }
    
    // Start of user code getterAnnotation:producedByAutomationRequest
    // End of user code
    @OslcName("producedByAutomationRequest")
    @OslcPropertyDefinition(Oslc_autoDomainConstants.AUTOMATION_NAMSPACE + "producedByAutomationRequest")
    @OslcDescription("Automation Request which produced the Automation Result. It is likely that the target resource will be an oslc_auto:AutomationRequest but that is not necessarily the case.")
    @OslcOccurs(Occurs.ZeroOrOne)
    @OslcValueType(ValueType.Resource)
    @OslcRepresentation(Representation.Reference)
    @OslcRange({Oslc_autoDomainConstants.AUTOMATIONREQUEST_TYPE})
    @OslcReadOnly(false)
    public Link getProducedByAutomationRequest()
    {
        // Start of user code getterInit:producedByAutomationRequest
        // End of user code
        return producedByAutomationRequest;
    }
    
    // Start of user code getterAnnotation:reportsOnAutomationPlan
    // End of user code
    @OslcName("reportsOnAutomationPlan")
    @OslcPropertyDefinition(Oslc_autoDomainConstants.AUTOMATION_NAMSPACE + "reportsOnAutomationPlan")
    @OslcDescription("Automation Plan which the Automation Result reports on. It is likely that the target resource will be an oslc_auto:AutomationPlan but that is not necessarily the case.")
    @OslcOccurs(Occurs.ExactlyOne)
    @OslcValueType(ValueType.Resource)
    @OslcRepresentation(Representation.Reference)
    @OslcRange({Oslc_autoDomainConstants.AUTOMATIONPLAN_TYPE})
    @OslcReadOnly(false)
    public Link getReportsOnAutomationPlan()
    {
        // Start of user code getterInit:reportsOnAutomationPlan
        // End of user code
        return reportsOnAutomationPlan;
    }
    
    // Start of user code getterAnnotation:createdSUT
    // End of user code
    @OslcName("createdSUT")
    @OslcPropertyDefinition(FitDomainConstants.VERIFIT_NAMSPACE + "createdSUT")
    @OslcOccurs(Occurs.ZeroOrOne)
    @OslcValueType(ValueType.Resource)
    @OslcRepresentation(Representation.Reference)
    @OslcRange({FitDomainConstants.SUT_TYPE})
    @OslcReadOnly(false)
    public Link getCreatedSUT()
    {
        // Start of user code getterInit:createdSUT
        // End of user code
        return createdSUT;
    }
    
    
    // Start of user code setterAnnotation:contributor
    // End of user code
    public void setContributor(final Set<Link> contributor )
    {
        // Start of user code setterInit:contributor
        // End of user code
        this.contributor.clear();
        if (contributor != null)
        {
            this.contributor.addAll(contributor);
        }
    
        // Start of user code setterFinalize:contributor
        // End of user code
    }
    
    // Start of user code setterAnnotation:created
    // End of user code
    public void setCreated(final Date created )
    {
        // Start of user code setterInit:created
        // End of user code
        this.created = created;
    
        // Start of user code setterFinalize:created
        // End of user code
    }
    
    // Start of user code setterAnnotation:creator
    // End of user code
    public void setCreator(final Set<Link> creator )
    {
        // Start of user code setterInit:creator
        // End of user code
        this.creator.clear();
        if (creator != null)
        {
            this.creator.addAll(creator);
        }
    
        // Start of user code setterFinalize:creator
        // End of user code
    }
    
    // Start of user code setterAnnotation:identifier
    // End of user code
    public void setIdentifier(final String identifier )
    {
        // Start of user code setterInit:identifier
        // End of user code
        this.identifier = identifier;
    
        // Start of user code setterFinalize:identifier
        // End of user code
    }
    
    // Start of user code setterAnnotation:modified
    // End of user code
    public void setModified(final Date modified )
    {
        // Start of user code setterInit:modified
        // End of user code
        this.modified = modified;
    
        // Start of user code setterFinalize:modified
        // End of user code
    }
    
    // Start of user code setterAnnotation:type
    // End of user code
    public void setType(final Set<Link> type )
    {
        // Start of user code setterInit:type
        // End of user code
        this.type.clear();
        if (type != null)
        {
            this.type.addAll(type);
        }
    
        // Start of user code setterFinalize:type
        // End of user code
    }
    
    // Start of user code setterAnnotation:subject
    // End of user code
    public void setSubject(final Set<String> subject )
    {
        // Start of user code setterInit:subject
        // End of user code
        this.subject.clear();
        if (subject != null)
        {
            this.subject.addAll(subject);
        }
    
        // Start of user code setterFinalize:subject
        // End of user code
    }
    
    // Start of user code setterAnnotation:title
    // End of user code
    public void setTitle(final String title )
    {
        // Start of user code setterInit:title
        // End of user code
        this.title = title;
    
        // Start of user code setterFinalize:title
        // End of user code
    }
    
    // Start of user code setterAnnotation:instanceShape
    // End of user code
    public void setInstanceShape(final URI instanceShape )
    {
        // Start of user code setterInit:instanceShape
        // End of user code
        this.instanceShape = instanceShape;
    
        // Start of user code setterFinalize:instanceShape
        // End of user code
    }
    
    // Start of user code setterAnnotation:serviceProvider
    // End of user code
    public void setServiceProvider(final Set<URI> serviceProvider )
    {
        // Start of user code setterInit:serviceProvider
        // End of user code
        this.serviceProvider.clear();
        if (serviceProvider != null)
        {
            this.serviceProvider.addAll(serviceProvider);
        }
    
        // Start of user code setterFinalize:serviceProvider
        // End of user code
    }
    
    // Start of user code setterAnnotation:state
    // End of user code
    public void setState(final Set<Link> state )
    {
        // Start of user code setterInit:state
        // End of user code
        this.state.clear();
        if (state != null)
        {
            this.state.addAll(state);
        }
    
        // Start of user code setterFinalize:state
        // End of user code
    }
    
    // Start of user code setterAnnotation:desiredState
    // End of user code
    public void setDesiredState(final Link desiredState )
    {
        // Start of user code setterInit:desiredState
        // End of user code
        this.desiredState = desiredState;
    
        // Start of user code setterFinalize:desiredState
        // End of user code
    }
    
    // Start of user code setterAnnotation:verdict
    // End of user code
    public void setVerdict(final Set<Link> verdict )
    {
        // Start of user code setterInit:verdict
        // End of user code
        this.verdict.clear();
        if (verdict != null)
        {
            this.verdict.addAll(verdict);
        }
    
        // Start of user code setterFinalize:verdict
        // End of user code
    }
    
    // Start of user code setterAnnotation:contribution
    // End of user code
    public void setContribution(final Set<TextOut> contribution )
    {
        // Start of user code setterInit:contribution
        // End of user code
        this.contribution.clear();
        if (contribution != null)
        {
            this.contribution.addAll(contribution);
        }
    
        // Start of user code setterFinalize:contribution
        // End of user code
    }
    
    // Start of user code setterAnnotation:inputParameter
    // End of user code
    public void setInputParameter(final Set<ParameterInstance> inputParameter )
    {
        // Start of user code setterInit:inputParameter
        // End of user code
        this.inputParameter.clear();
        if (inputParameter != null)
        {
            this.inputParameter.addAll(inputParameter);
        }
    
        // Start of user code setterFinalize:inputParameter
        // End of user code
    }
    
    // Start of user code setterAnnotation:outputParameter
    // End of user code
    public void setOutputParameter(final Set<ParameterInstance> outputParameter )
    {
        // Start of user code setterInit:outputParameter
        // End of user code
        this.outputParameter.clear();
        if (outputParameter != null)
        {
            this.outputParameter.addAll(outputParameter);
        }
    
        // Start of user code setterFinalize:outputParameter
        // End of user code
    }
    
    // Start of user code setterAnnotation:producedByAutomationRequest
    // End of user code
    public void setProducedByAutomationRequest(final Link producedByAutomationRequest )
    {
        // Start of user code setterInit:producedByAutomationRequest
        // End of user code
        this.producedByAutomationRequest = producedByAutomationRequest;
    
        // Start of user code setterFinalize:producedByAutomationRequest
        // End of user code
    }
    
    // Start of user code setterAnnotation:reportsOnAutomationPlan
    // End of user code
    public void setReportsOnAutomationPlan(final Link reportsOnAutomationPlan )
    {
        // Start of user code setterInit:reportsOnAutomationPlan
        // End of user code
        this.reportsOnAutomationPlan = reportsOnAutomationPlan;
    
        // Start of user code setterFinalize:reportsOnAutomationPlan
        // End of user code
    }
    
    // Start of user code setterAnnotation:createdSUT
    // End of user code
    public void setCreatedSUT(final Link createdSUT )
    {
        // Start of user code setterInit:createdSUT
        // End of user code
        this.createdSUT = createdSUT;
    
        // Start of user code setterFinalize:createdSUT
        // End of user code
    }
    
    
    @Deprecated
    static public String contributorToHtmlForCreation (final HttpServletRequest httpServletRequest)
    {
        String s = "";
    
        // Start of user code "Init:contributorToHtmlForCreation(...)"
        // End of user code
    
        s = s + "<label for=\"contributor\">contributor: </LABEL>";
    
        // Start of user code "Mid:contributorToHtmlForCreation(...)"
        // End of user code
    
        // Start of user code "Finalize:contributorToHtmlForCreation(...)"
        // End of user code
    
        return s;
    }
    
    @Deprecated
    static public String createdToHtmlForCreation (final HttpServletRequest httpServletRequest)
    {
        String s = "";
    
        // Start of user code "Init:createdToHtmlForCreation(...)"
        // End of user code
    
        s = s + "<label for=\"created\">created: </LABEL>";
    
        // Start of user code "Mid:createdToHtmlForCreation(...)"
        // End of user code
    
        s= s + "<input name=\"created\" type=\"text\" style=\"width: 400px\" id=\"created\" >";
        // Start of user code "Finalize:createdToHtmlForCreation(...)"
        // End of user code
    
        return s;
    }
    
    @Deprecated
    static public String creatorToHtmlForCreation (final HttpServletRequest httpServletRequest)
    {
        String s = "";
    
        // Start of user code "Init:creatorToHtmlForCreation(...)"
        // End of user code
    
        s = s + "<label for=\"creator\">creator: </LABEL>";
    
        // Start of user code "Mid:creatorToHtmlForCreation(...)"
        // End of user code
    
        // Start of user code "Finalize:creatorToHtmlForCreation(...)"
        // End of user code
    
        return s;
    }
    
    @Deprecated
    static public String identifierToHtmlForCreation (final HttpServletRequest httpServletRequest)
    {
        String s = "";
    
        // Start of user code "Init:identifierToHtmlForCreation(...)"
        // End of user code
    
        s = s + "<label for=\"identifier\">identifier: </LABEL>";
    
        // Start of user code "Mid:identifierToHtmlForCreation(...)"
        // End of user code
    
        s= s + "<input name=\"identifier\" type=\"text\" style=\"width: 400px\" id=\"identifier\" >";
        // Start of user code "Finalize:identifierToHtmlForCreation(...)"
        // End of user code
    
        return s;
    }
    
    @Deprecated
    static public String modifiedToHtmlForCreation (final HttpServletRequest httpServletRequest)
    {
        String s = "";
    
        // Start of user code "Init:modifiedToHtmlForCreation(...)"
        // End of user code
    
        s = s + "<label for=\"modified\">modified: </LABEL>";
    
        // Start of user code "Mid:modifiedToHtmlForCreation(...)"
        // End of user code
    
        s= s + "<input name=\"modified\" type=\"text\" style=\"width: 400px\" id=\"modified\" >";
        // Start of user code "Finalize:modifiedToHtmlForCreation(...)"
        // End of user code
    
        return s;
    }
    
    @Deprecated
    static public String typeToHtmlForCreation (final HttpServletRequest httpServletRequest)
    {
        String s = "";
    
        // Start of user code "Init:typeToHtmlForCreation(...)"
        // End of user code
    
        s = s + "<label for=\"type\">type: </LABEL>";
    
        // Start of user code "Mid:typeToHtmlForCreation(...)"
        // End of user code
    
        // Start of user code "Finalize:typeToHtmlForCreation(...)"
        // End of user code
    
        return s;
    }
    
    @Deprecated
    static public String subjectToHtmlForCreation (final HttpServletRequest httpServletRequest)
    {
        String s = "";
    
        // Start of user code "Init:subjectToHtmlForCreation(...)"
        // End of user code
    
        s = s + "<label for=\"subject\">subject: </LABEL>";
    
        // Start of user code "Mid:subjectToHtmlForCreation(...)"
        // End of user code
    
        s= s + "<input name=\"subject\" type=\"text\" style=\"width: 400px\" id=\"subject\" >";
        // Start of user code "Finalize:subjectToHtmlForCreation(...)"
        // End of user code
    
        return s;
    }
    
    @Deprecated
    static public String titleToHtmlForCreation (final HttpServletRequest httpServletRequest)
    {
        String s = "";
    
        // Start of user code "Init:titleToHtmlForCreation(...)"
        // End of user code
    
        s = s + "<label for=\"title\">title: </LABEL>";
    
        // Start of user code "Mid:titleToHtmlForCreation(...)"
        // End of user code
    
        s= s + "<input name=\"title\" type=\"text\" style=\"width: 400px\" id=\"title\" >";
        // Start of user code "Finalize:titleToHtmlForCreation(...)"
        // End of user code
    
        return s;
    }
    
    @Deprecated
    static public String instanceShapeToHtmlForCreation (final HttpServletRequest httpServletRequest)
    {
        String s = "";
    
        // Start of user code "Init:instanceShapeToHtmlForCreation(...)"
        // End of user code
    
        s = s + "<label for=\"instanceShape\">instanceShape: </LABEL>";
    
        // Start of user code "Mid:instanceShapeToHtmlForCreation(...)"
        // End of user code
    
        s= s + "<input name=\"instanceShape\" type=\"text\" style=\"width: 400px\" id=\"instanceShape\" >";
        // Start of user code "Finalize:instanceShapeToHtmlForCreation(...)"
        // End of user code
    
        return s;
    }
    
    @Deprecated
    static public String serviceProviderToHtmlForCreation (final HttpServletRequest httpServletRequest)
    {
        String s = "";
    
        // Start of user code "Init:serviceProviderToHtmlForCreation(...)"
        // End of user code
    
        s = s + "<label for=\"serviceProvider\">serviceProvider: </LABEL>";
    
        // Start of user code "Mid:serviceProviderToHtmlForCreation(...)"
        // End of user code
    
        s= s + "<input name=\"serviceProvider\" type=\"text\" style=\"width: 400px\" id=\"serviceProvider\" >";
        // Start of user code "Finalize:serviceProviderToHtmlForCreation(...)"
        // End of user code
    
        return s;
    }
    
    @Deprecated
    static public String stateToHtmlForCreation (final HttpServletRequest httpServletRequest)
    {
        String s = "";
    
        // Start of user code "Init:stateToHtmlForCreation(...)"
        // End of user code
    
        s = s + "<label for=\"state\">state: </LABEL>";
    
        // Start of user code "Mid:stateToHtmlForCreation(...)"
        // End of user code
    
        // Start of user code "Finalize:stateToHtmlForCreation(...)"
        // End of user code
    
        return s;
    }
    
    @Deprecated
    static public String desiredStateToHtmlForCreation (final HttpServletRequest httpServletRequest)
    {
        String s = "";
    
        // Start of user code "Init:desiredStateToHtmlForCreation(...)"
        // End of user code
    
        s = s + "<label for=\"desiredState\">desiredState: </LABEL>";
    
        // Start of user code "Mid:desiredStateToHtmlForCreation(...)"
        // End of user code
    
        // Start of user code "Finalize:desiredStateToHtmlForCreation(...)"
        // End of user code
    
        return s;
    }
    
    @Deprecated
    static public String verdictToHtmlForCreation (final HttpServletRequest httpServletRequest)
    {
        String s = "";
    
        // Start of user code "Init:verdictToHtmlForCreation(...)"
        // End of user code
    
        s = s + "<label for=\"verdict\">verdict: </LABEL>";
    
        // Start of user code "Mid:verdictToHtmlForCreation(...)"
        // End of user code
    
        // Start of user code "Finalize:verdictToHtmlForCreation(...)"
        // End of user code
    
        return s;
    }
    
    @Deprecated
    static public String contributionToHtmlForCreation (final HttpServletRequest httpServletRequest)
    {
        String s = "";
    
        // Start of user code "Init:contributionToHtmlForCreation(...)"
        // End of user code
    
        s = s + "<label for=\"contribution\">contribution: </LABEL>";
    
        // Start of user code "Mid:contributionToHtmlForCreation(...)"
        // End of user code
    
        // Start of user code "Finalize:contributionToHtmlForCreation(...)"
        // End of user code
    
        return s;
    }
    
    @Deprecated
    static public String inputParameterToHtmlForCreation (final HttpServletRequest httpServletRequest)
    {
        String s = "";
    
        // Start of user code "Init:inputParameterToHtmlForCreation(...)"
        // End of user code
    
        s = s + "<label for=\"inputParameter\">inputParameter: </LABEL>";
    
        // Start of user code "Mid:inputParameterToHtmlForCreation(...)"
        // End of user code
    
        // Start of user code "Finalize:inputParameterToHtmlForCreation(...)"
        // End of user code
    
        return s;
    }
    
    @Deprecated
    static public String outputParameterToHtmlForCreation (final HttpServletRequest httpServletRequest)
    {
        String s = "";
    
        // Start of user code "Init:outputParameterToHtmlForCreation(...)"
        // End of user code
    
        s = s + "<label for=\"outputParameter\">outputParameter: </LABEL>";
    
        // Start of user code "Mid:outputParameterToHtmlForCreation(...)"
        // End of user code
    
        // Start of user code "Finalize:outputParameterToHtmlForCreation(...)"
        // End of user code
    
        return s;
    }
    
    @Deprecated
    static public String producedByAutomationRequestToHtmlForCreation (final HttpServletRequest httpServletRequest)
    {
        String s = "";
    
        // Start of user code "Init:producedByAutomationRequestToHtmlForCreation(...)"
        // End of user code
    
        s = s + "<label for=\"producedByAutomationRequest\">producedByAutomationRequest: </LABEL>";
    
        // Start of user code "Mid:producedByAutomationRequestToHtmlForCreation(...)"
        // End of user code
    
        // Start of user code "Finalize:producedByAutomationRequestToHtmlForCreation(...)"
        // End of user code
    
        return s;
    }
    
    @Deprecated
    static public String reportsOnAutomationPlanToHtmlForCreation (final HttpServletRequest httpServletRequest)
    {
        String s = "";
    
        // Start of user code "Init:reportsOnAutomationPlanToHtmlForCreation(...)"
        // End of user code
    
        s = s + "<label for=\"reportsOnAutomationPlan\">reportsOnAutomationPlan: </LABEL>";
    
        // Start of user code "Mid:reportsOnAutomationPlanToHtmlForCreation(...)"
        // End of user code
    
        // Start of user code "Finalize:reportsOnAutomationPlanToHtmlForCreation(...)"
        // End of user code
    
        return s;
    }
    
    @Deprecated
    static public String createdSUTToHtmlForCreation (final HttpServletRequest httpServletRequest)
    {
        String s = "";
    
        // Start of user code "Init:createdSUTToHtmlForCreation(...)"
        // End of user code
    
        s = s + "<label for=\"createdSUT\">createdSUT: </LABEL>";
    
        // Start of user code "Mid:createdSUTToHtmlForCreation(...)"
        // End of user code
    
        // Start of user code "Finalize:createdSUTToHtmlForCreation(...)"
        // End of user code
    
        return s;
    }
    
    
    @Deprecated
    public String contributorToHtml()
    {
        String s = "";
    
        // Start of user code contributortoHtml_mid
        // End of user code
    
        try {
            s = s + "<ul>";
            for(Link next : contributor) {
                s = s + "<li>";
                s = s + (new Person (next.getValue())).toHtml(false);
                s = s + "</li>";
            }
            s = s + "</ul>";
        } catch (Exception e) {
            e.printStackTrace();
        }
    
        // Start of user code contributortoHtml_finalize
        // End of user code
    
        return s;
    }
    
    @Deprecated
    public String createdToHtml()
    {
        String s = "";
    
        // Start of user code createdtoHtml_mid
        // End of user code
    
        try {
            if (created == null) {
                s = s + "<em>null</em>";
            }
            else {
                s = s + created.toString();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    
        // Start of user code createdtoHtml_finalize
        // End of user code
    
        return s;
    }
    
    @Deprecated
    public String creatorToHtml()
    {
        String s = "";
    
        // Start of user code creatortoHtml_mid
        // End of user code
    
        try {
            s = s + "<ul>";
            for(Link next : creator) {
                s = s + "<li>";
                s = s + (new Person (next.getValue())).toHtml(false);
                s = s + "</li>";
            }
            s = s + "</ul>";
        } catch (Exception e) {
            e.printStackTrace();
        }
    
        // Start of user code creatortoHtml_finalize
        // End of user code
    
        return s;
    }
    
    @Deprecated
    public String identifierToHtml()
    {
        String s = "";
    
        // Start of user code identifiertoHtml_mid
        // End of user code
    
        try {
            if (identifier == null) {
                s = s + "<em>null</em>";
            }
            else {
                s = s + identifier.toString();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    
        // Start of user code identifiertoHtml_finalize
        // End of user code
    
        return s;
    }
    
    @Deprecated
    public String modifiedToHtml()
    {
        String s = "";
    
        // Start of user code modifiedtoHtml_mid
        // End of user code
    
        try {
            if (modified == null) {
                s = s + "<em>null</em>";
            }
            else {
                s = s + modified.toString();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    
        // Start of user code modifiedtoHtml_finalize
        // End of user code
    
        return s;
    }
    
    @Deprecated
    public String typeToHtml()
    {
        String s = "";
    
        // Start of user code typetoHtml_mid
        // End of user code
    
        try {
            s = s + "<ul>";
            for(Link next : type) {
                s = s + "<li>";
                if (next.getValue() == null) {
                    s= s + "<em>null</em>";
                }
                else {
                    s = s + "<a href=\"" + next.getValue().toString() + "\">" + next.getValue().toString() + "</a>";
                }
                s = s + "</li>";
            }
            s = s + "</ul>";
        } catch (Exception e) {
            e.printStackTrace();
        }
    
        // Start of user code typetoHtml_finalize
        // End of user code
    
        return s;
    }
    
    @Deprecated
    public String subjectToHtml()
    {
        String s = "";
    
        // Start of user code subjecttoHtml_mid
        // End of user code
    
        try {
            s = s + "<ul>";
            Iterator<String> itr = subject.iterator();
            while(itr.hasNext()) {
                s = s + "<li>";
                s= s + itr.next().toString();
                s = s + "</li>";
            }
            s = s + "</ul>";
        } catch (Exception e) {
            e.printStackTrace();
        }
    
        // Start of user code subjecttoHtml_finalize
        // End of user code
    
        return s;
    }
    
    @Deprecated
    public String titleToHtml()
    {
        String s = "";
    
        // Start of user code titletoHtml_mid
        // End of user code
    
        try {
            if (title == null) {
                s = s + "<em>null</em>";
            }
            else {
                s = s + title.toString();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    
        // Start of user code titletoHtml_finalize
        // End of user code
    
        return s;
    }
    
    @Deprecated
    public String instanceShapeToHtml()
    {
        String s = "";
    
        // Start of user code instanceShapetoHtml_mid
        // End of user code
    
        try {
            if (instanceShape == null) {
                s = s + "<em>null</em>";
            }
            else {
                s = s + instanceShape.toString();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    
        // Start of user code instanceShapetoHtml_finalize
        // End of user code
    
        return s;
    }
    
    @Deprecated
    public String serviceProviderToHtml()
    {
        String s = "";
    
        // Start of user code serviceProvidertoHtml_mid
        // End of user code
    
        try {
            s = s + "<ul>";
            Iterator<URI> itr = serviceProvider.iterator();
            while(itr.hasNext()) {
                s = s + "<li>";
                s= s + itr.next().toString();
                s = s + "</li>";
            }
            s = s + "</ul>";
        } catch (Exception e) {
            e.printStackTrace();
        }
    
        // Start of user code serviceProvidertoHtml_finalize
        // End of user code
    
        return s;
    }
    
    @Deprecated
    public String stateToHtml()
    {
        String s = "";
    
        // Start of user code statetoHtml_mid
        // End of user code
    
        try {
            s = s + "<ul>";
            for(Link next : state) {
                s = s + "<li>";
                if (next.getValue() == null) {
                    s= s + "<em>null</em>";
                }
                else {
                    s = s + "<a href=\"" + next.getValue().toString() + "\">" + next.getValue().toString() + "</a>";
                }
                s = s + "</li>";
            }
            s = s + "</ul>";
        } catch (Exception e) {
            e.printStackTrace();
        }
    
        // Start of user code statetoHtml_finalize
        // End of user code
    
        return s;
    }
    
    @Deprecated
    public String desiredStateToHtml()
    {
        String s = "";
    
        // Start of user code desiredStatetoHtml_mid
        // End of user code
    
        try {
            if ((desiredState == null) || (desiredState.getValue() == null)) {
                s = s + "<em>null</em>";
            }
            else {
                s = s + desiredState.getValue().toString();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    
        // Start of user code desiredStatetoHtml_finalize
        // End of user code
    
        return s;
    }
    
    @Deprecated
    public String verdictToHtml()
    {
        String s = "";
    
        // Start of user code verdicttoHtml_mid
        // End of user code
    
        try {
            s = s + "<ul>";
            for(Link next : verdict) {
                s = s + "<li>";
                if (next.getValue() == null) {
                    s= s + "<em>null</em>";
                }
                else {
                    s = s + "<a href=\"" + next.getValue().toString() + "\">" + next.getValue().toString() + "</a>";
                }
                s = s + "</li>";
            }
            s = s + "</ul>";
        } catch (Exception e) {
            e.printStackTrace();
        }
    
        // Start of user code verdicttoHtml_finalize
        // End of user code
    
        return s;
    }
    
    @Deprecated
    public String contributionToHtml()
    {
        String s = "";
    
        // Start of user code contributiontoHtml_mid
        // End of user code
    
        try {
            s = s + "<ul>";
            for(TextOut next : contribution) {
                s = s + "<li>";
                s = s + next.toHtml(true);
                s = s + "</li>";
            }
            s = s + "</ul>";
        } catch (Exception e) {
            e.printStackTrace();
        }
    
        // Start of user code contributiontoHtml_finalize
        // End of user code
    
        return s;
    }
    
    @Deprecated
    public String inputParameterToHtml()
    {
        String s = "";
    
        // Start of user code inputParametertoHtml_mid
        // End of user code
    
        try {
            s = s + "<ul>";
            for(ParameterInstance next : inputParameter) {
                s = s + "<li>";
                s = s + next.toHtml(true);
                s = s + "</li>";
            }
            s = s + "</ul>";
        } catch (Exception e) {
            e.printStackTrace();
        }
    
        // Start of user code inputParametertoHtml_finalize
        // End of user code
    
        return s;
    }
    
    @Deprecated
    public String outputParameterToHtml()
    {
        String s = "";
    
        // Start of user code outputParametertoHtml_mid
        // End of user code
    
        try {
            s = s + "<ul>";
            for(ParameterInstance next : outputParameter) {
                s = s + "<li>";
                s = s + next.toHtml(true);
                s = s + "</li>";
            }
            s = s + "</ul>";
        } catch (Exception e) {
            e.printStackTrace();
        }
    
        // Start of user code outputParametertoHtml_finalize
        // End of user code
    
        return s;
    }
    
    @Deprecated
    public String producedByAutomationRequestToHtml()
    {
        String s = "";
    
        // Start of user code producedByAutomationRequesttoHtml_mid
        // End of user code
    
        try {
            if ((producedByAutomationRequest == null) || (producedByAutomationRequest.getValue() == null)) {
                s = s + "<em>null</em>";
            }
            else {
                s = s + (new AutomationRequest (producedByAutomationRequest.getValue())).toHtml(false);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    
        // Start of user code producedByAutomationRequesttoHtml_finalize
        // End of user code
    
        return s;
    }
    
    @Deprecated
    public String reportsOnAutomationPlanToHtml()
    {
        String s = "";
    
        // Start of user code reportsOnAutomationPlantoHtml_mid
        // End of user code
    
        try {
            if ((reportsOnAutomationPlan == null) || (reportsOnAutomationPlan.getValue() == null)) {
                s = s + "<em>null</em>";
            }
            else {
                s = s + (new AutomationPlan (reportsOnAutomationPlan.getValue())).toHtml(false);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    
        // Start of user code reportsOnAutomationPlantoHtml_finalize
        // End of user code
    
        return s;
    }
    
    @Deprecated
    public String createdSUTToHtml()
    {
        String s = "";
    
        // Start of user code createdSUTtoHtml_mid
        // End of user code
    
        try {
            if ((createdSUT == null) || (createdSUT.getValue() == null)) {
                s = s + "<em>null</em>";
            }
            else {
                s = s + (new SUT (createdSUT.getValue())).toHtml(false);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    
        // Start of user code createdSUTtoHtml_finalize
        // End of user code
    
        return s;
    }
    
    
}
