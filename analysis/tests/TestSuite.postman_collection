{
	"info": {
		"_postman_id": "52741ca2-b804-41b9-b9bd-467bf0aef2a0",
		"name": "Analysis Tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "get OS to adjust the test suite",
			"item": [
				{
					"name": "get OS",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response code should be 200 (OK)\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.globals.set(\"currentOS\", pm.response.text());"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{server_address}}/{{server_context}}/services/resources/getOS",
							"host": [
								"{{server_address}}"
							],
							"path": [
								"{{server_context}}",
								"services",
								"resources",
								"getOS"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Core Funcionality",
			"item": [
				{
					"name": "basic use case",
					"item": [
						{
							"name": "create SUT using the compilation provider",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// save the request ID as a global variable for later tests to use -- used as SUT ID",
											"const response = xml2Json(pm.response.text());",
											"var resrouceAbout = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"].$[\"rdf:about\"];",
											"var resourceAboutSplit = resrouceAbout.split(\"/\");",
											"var requestId = resourceAboutSplit[resourceAboutSplit.length-1];",
											"pm.globals.set('requestId', requestId);",
											"",
											"",
											"pm.test(\"Response code should be 201 (created)\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"var compilation_provider = pm.variables.get(\"compilation_provider\");",
											"var sutId = requestId;",
											"pm.globals.set(\"SUT\", compilation_provider + \"/services/resources/sUTs/\" + sutId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/xml"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>analysis test</dcterms:title>\n\t<dcterms:description>analysis test</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{compilation_provider}}/services/resources/automationPlans/0\" />\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>sourceBase64</oslc:name>\n\t\t\t<rdf:value>TestEchoProgram.cpp\nI2luY2x1ZGUgPHN0ZGlvLmg+CgppbnQgbWFpbihpbnQgYXJnYywgY2hhcioqIGFyZ3YpCnsKCXByaW50ZigiJXNcbiIsIGFyZ3ZbMV0pOwoJcmV0dXJuIDA7Cn0K</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>buildCommand</oslc:name>\n\t\t\t<rdf:value>gcc -g TestEchoProgram.cpp -o my_echo</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>launchCommand</oslc:name>\n\t\t\t<rdf:value>./my_echo</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>"
								},
								"url": {
									"raw": "{{compilation_provider}}/services/resources/createAutomationRequest",
									"host": [
										"{{compilation_provider}}"
									],
									"path": [
										"services",
										"resources",
										"createAutomationRequest"
									]
								}
							},
							"response": []
						},
						{
							"name": "wait for #complete (analysis/core functionality/basic use case/create sut)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var timeoutSeconds = pm.collectionVariables.get('automation_wait_time');",
											"",
											"var waitCounter = pm.globals.get(\"waitCounter\");",
											"if(!waitCounter) {",
											"    waitCounter = 0;",
											"}",
											"",
											"if (pm.response.code != 200) { // wait for the resource to be created",
											"    if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
											"        setTimeout(function(){}, [1000]); // 1 second",
											"        waitCounter++;",
											"        postman.setNextRequest(pm.info.requestName);",
											"    } else { // timeout, reset counter",
											"        waitCounter = 0;",
											"    }",
											"} else { // wait for the automation to complete",
											"    const response = xml2Json(pm.response.text());",
											"    var state = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"][\"oslc_auto:state\"].$[\"rdf:resource\"];",
											"    if (state == \"http://open-services.net/ns/auto#inProgress\") {",
											"        if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
											"            setTimeout(function(){}, [1000]); // 1 second",
											"            waitCounter++;",
											"            postman.setNextRequest(pm.info.requestName);",
											"        } else { // timeout, reset counter",
											"            waitCounter = 0;",
											"        }",
											"    } else { // wait doen, reset counter",
											"            waitCounter = 0;",
											"    }",
											"}",
											"",
											"pm.globals.set(\"waitCounter\", waitCounter);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"url": {
									"raw": "{{compilation_provider}}/services/resources/automationRequests/{{requestId}}",
									"host": [
										"{{compilation_provider}}"
									],
									"path": [
										"services",
										"resources",
										"automationRequests",
										"{{requestId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "predefined AutomationPlan dummy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var serverAddr = pm.variables.get(\"server_address\");",
											"var server_context = pm.variables.get(\"server_context\");",
											"",
											"pm.test(\"Response code should be 200 (OK)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Response body should contain an AutomationPlan (id:dummy)\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:AutomationPlan rdf:about=\\\"\" + serverAddr + \"/\" + server_context + \"/services/resources/automationPlans/dummy\");",
											"});",
											"pm.test(\"AutomationPlan should contain a dcterms:title property\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:title\");",
											"});",
											"pm.test(\"AutomationPlan should contain a dcterms:created property\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:created\");",
											"});",
											"pm.test(\"AutomationPlan should contain a dcterms:modified property\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:modified\");",
											"});",
											"pm.test(\"AutomationPlan should contain a <dcterms:creator property\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:creator\");",
											"});",
											"pm.test(\"AutomationPlan should contain a arguments parameter definition\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<oslc:name>arguments</oslc:name>\");",
											"});",
											"pm.test(\"AutomationPlan should contain a launchSUT parameter definition\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<oslc:name>launchSUT</oslc:name>\");",
											"});",
											"pm.test(\"AutomationPlan should contain a SUT parameter definition\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<oslc:name>SUT</oslc:name>\");",
											"});",
											"pm.test(\"AutomationPlan should contain a usesExecutionEnvironment property with the expected value\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<oslc_auto:usesExecutionEnvironment rdf:resource=\\\"https://pajda.fit.vutbr.cz/xvasic/oslc-generic-analysis/-/blob/master/analysis/tests/dummy_tool.sh\\\"/>\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/resources/automationPlans/dummy",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"resources",
										"automationPlans",
										"dummy"
									]
								}
							},
							"response": []
						},
						{
							"name": "create AutomationRequest",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response code should be 201 (created)\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"// save the request ID as a global variable for later tests to use",
											"const response = xml2Json(pm.response.text());",
											"var resrouceAbout = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"].$[\"rdf:about\"];",
											"var resourceAboutSplit = resrouceAbout.split(\"/\");",
											"var requestId = resourceAboutSplit[resourceAboutSplit.length-1];",
											"pm.globals.set('requestId', requestId);",
											"",
											"// get global variable to use in this test",
											"var serverAddr = pm.variables.get(\"server_address\");",
											"var server_context = pm.variables.get(\"server_context\");",
											"var AutomationPlanId = pm.globals.get(\"AutomationPlanId\");",
											"var test_arguments = pm.globals.get(\"arguments\");",
											"var SUT = pm.globals.get(\"SUT\");",
											"var reqTitle = pm.globals.get(\"reqTitle\");",
											"var reqDescription = pm.globals.get(\"reqDescription\");",
											"var reqCreator = pm.globals.get(\"reqCreator\");",
											"",
											"",
											"pm.test(\"Response body should contain an AutomationRequest\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:AutomationRequest rdf:about=\\\"\" + serverAddr + \"/\" + server_context + \"/services/resources/automationRequests/\" + requestId);",
											"});",
											"pm.test(\"AutomationRequest state should be #inProgress\", function () {",
											"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#new\\\"/>\");",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#inProgress\\\"/>\");",
											"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#complete\\\"/>\");",
											"});",
											"pm.test(\"AutomationRequest desiredState should be #complete\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:desiredState rdf:resource=\\\"http://open-services.net/ns/auto#complete\\\"/>\");",
											"});",
											"pm.test(\"AutomationRequest should contain a executesAutomationPlan property\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:executesAutomationPlan rdf:resource=\\\"\" + serverAddr + \"/\" + server_context + \"/services/resources/automationPlans/\");",
											"});",
											"pm.test(\"AutomationRequest executesAutomationPlan should match the AutomationPlan with ID \" + AutomationPlanId, function () {",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:executesAutomationPlan rdf:resource=\\\"\" + serverAddr + \"/\" + server_context + \"/services/resources/automationPlans/\" + AutomationPlanId);",
											"});",
											"pm.test(\"AutomationRequest should contain the expected dcterms:title property\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:title rdf:parseType=\\\"Literal\\\">\" + reqTitle + \"</dcterms:title>\");",
											"});",
											"pm.test(\"AutomationRequest should contain the expected dcterms:identifier property\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:identifier>\" + requestId + \"</dcterms:identifier>\");",
											"});",
											"pm.test(\"AutomationRequest contain the expected dcterms:creator property\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:creator rdf:resource=\\\"\" + reqCreator + \"\\\"/>\");",
											"});",
											"pm.test(\"AutomationRequest contain the expected dcterms:description property\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:description rdf:parseType=\\\"Literal\\\">\" + reqDescription + \"</dcterms:description>\");",
											"});",
											"pm.test(\"AutomationRequest should contain a dcterms:created  property\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:created\");",
											"});",
											"pm.test(\"AutomationRequest should contain a dcterms:modified  property\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:modified\");",
											"});",
											"pm.test(\"AutomationRequest should contain a arguments input parameter\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<oslc:name>arguments</oslc:name>\");",
											"});",
											"pm.test(\"AutomationRequest should contain the expected arguments input value\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<rdf:value>\" + test_arguments + \"</rdf:value>\");",
											"});",
											"pm.test(\"AutomationRequest should contain a SUT input parameter\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<oslc:name>SUT</oslc:name>\");",
											"});",
											"pm.test(\"AutomationRequest should contain the expected SUT input value\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<rdf:value>\" + SUT + \"</rdf:value>\");",
											"});",
											"pm.test(\"AutomationRequest should contain a producedAutomationResult refference property\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:producedAutomationResult\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// setup global variables for future requests (GETs)",
											"// attempt to make this sequence of requests into a template that can then be change in this place to change the test",
											"",
											"pm.globals.set(\"AutomationPlanId\", \"dummy\");",
											"",
											"pm.globals.set(\"arguments\", \"test_arguments\");",
											"",
											"pm.globals.set(\"reqCreator\", \"https://pajda.fit.vutbr.cz/xvasic\");",
											"pm.globals.set(\"reqTitle\", \"Test title\");",
											"pm.globals.set(\"reqDescription\", \"Test description\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/xml"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>{{reqTitle}}</dcterms:title>\n\t<dcterms:description>{{reqDescription}}</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{server_address}}/{{server_context}}/services/resources/automationPlans/{{AutomationPlanId}}\" />\n\t<dcterms:creator rdf:resource=\"{{reqCreator}}\"/>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>arguments</oslc:name>\n\t\t\t<rdf:value>{{arguments}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>SUT</oslc:name>\n\t\t\t<rdf:value>{{SUT}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>"
								},
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/resources/createAutomationRequest",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"resources",
										"createAutomationRequest"
									]
								}
							},
							"response": []
						},
						{
							"name": "get AutomationRequest - inProgress",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// get global variable to use in this test",
											"var requestId = pm.globals.get('requestId');",
											"var serverAddr = pm.variables.get(\"server_address\");",
											"var server_context = pm.variables.get(\"server_context\");",
											"var AutomationPlanId = pm.variables.get(\"AutomationPlanId\");",
											"var test_arguments = pm.variables.get(\"arguments\");",
											"var SUT = pm.variables.get(\"SUT\");",
											"var reqTitle = pm.variables.get(\"reqTitle\");",
											"var reqDescription = pm.variables.get(\"reqDescription\");",
											"var reqCreator = pm.variables.get(\"reqCreator\");",
											"",
											"",
											"",
											"pm.test(\"Response code should be 200 (OK)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Response body should contain an AutomationRequest\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:AutomationRequest rdf:about=\\\"\" + serverAddr + \"/\" + server_context + \"/services/resources/automationRequests/\");",
											"});",
											"pm.test(\"AutomationRequest should have the expected ID: \" + requestId, function () {",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:AutomationRequest rdf:about=\\\"\" + serverAddr + \"/\" + server_context + \"/services/resources/automationRequests/\" + requestId);",
											"});",
											"pm.test(\"AutomationRequest desiredState should be #complete\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:desiredState rdf:resource=\\\"http://open-services.net/ns/auto#complete\\\"/>\");",
											"});",
											"pm.test(\"AutomationRequest should contain a executesAutomationPlan property\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:executesAutomationPlan rdf:resource=\\\"\" + serverAddr + \"/\" + server_context + \"/services/resources/automationPlans/\");",
											"});",
											"pm.test(\"AutomationRequest executesAutomationPlan should match the AutomationPlan with ID \" + AutomationPlanId, function () {",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:executesAutomationPlan rdf:resource=\\\"\" + serverAddr + \"/\" + server_context + \"/services/resources/automationPlans/\" + AutomationPlanId);",
											"});",
											"pm.test(\"AutomationRequest should contain the expected dcterms:title property\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:title rdf:parseType=\\\"Literal\\\">\" + reqTitle + \"</dcterms:title>\");",
											"});",
											"pm.test(\"AutomationRequest should contain the expected dcterms:identifier property\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:identifier>\" + requestId + \"</dcterms:identifier>\");",
											"});",
											"pm.test(\"AutomationRequest contain the expected dcterms:creator property\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:creator rdf:resource=\\\"\" + reqCreator + \"\\\"/>\");",
											"});",
											"pm.test(\"AutomationRequest contain the expected dcterms:description property\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:description rdf:parseType=\\\"Literal\\\">\" + reqDescription + \"</dcterms:description>\");",
											"});",
											"pm.test(\"AutomationRequest should contain a dcterms:created  property\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:created\");",
											"});",
											"pm.test(\"AutomationRequest should contain a dcterms:modified  property\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:modified\");",
											"});",
											"pm.test(\"AutomationRequest should contain a arguments input parameter\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<oslc:name>arguments</oslc:name>\");",
											"});",
											"pm.test(\"AutomationRequest should contain the expected arguments input value\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<rdf:value>\" + test_arguments + \"</rdf:value>\");",
											"});",
											"pm.test(\"AutomationRequest should contain a SUT input parameter\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<oslc:name>SUT</oslc:name>\");",
											"});",
											"pm.test(\"AutomationRequest should contain the expected SUT input value\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<rdf:value>\" + SUT + \"</rdf:value>\");",
											"});",
											"",
											"",
											"// these are the only two differences compared to the last test request",
											"pm.test(\"AutomationRequest state should be #inProgress\", function () {",
											"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#new\\\"/>\");",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#inProgress\\\"/>\");",
											"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#complete\\\"/>\");",
											"});",
											"pm.test(\"AutomationRequest should contain a producedAutomationResult refference property with the expected ID (same as the request)\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:producedAutomationResult rdf:resource=\\\"\" + serverAddr + \"/\" + server_context + \"/services/resources/automationResults/\" + requestId);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/resources/automationRequests/{{requestId}}",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"resources",
										"automationRequests",
										"{{requestId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get AutomatinResult - inProgress",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// get global variable to use in this test",
											"var requestId = pm.globals.get('requestId');",
											"var serverAddr = pm.variables.get(\"server_address\");",
											"var server_context = pm.variables.get(\"server_context\");",
											"var AutomationPlanId = pm.variables.get(\"AutomationPlanId\");",
											"var test_arguments = pm.variables.get(\"arguments\");",
											"var SUT = pm.variables.get(\"SUT\");",
											"var reqTitle = pm.variables.get(\"reqTitle\");",
											"var reqDescription = pm.variables.get(\"reqDescription\");",
											"var reqCreator = pm.variables.get(\"reqCreator\");",
											"",
											"",
											"pm.test(\"Response code should be 200 (OK)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Response body should contain an AutomationResult\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:AutomationResult rdf:about=\\\"\" + serverAddr + \"/\" + server_context + \"/services/resources/automationResults/\");",
											"});",
											"pm.test(\"AutomationResult should have the expected ID: \" + requestId, function () {",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:AutomationResult rdf:about=\\\"\" + serverAddr + \"/\" + server_context + \"/services/resources/automationResults/\" + requestId);",
											"});",
											"pm.test(\"AutomationResult desiredState should be #complete\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:desiredState rdf:resource=\\\"http://open-services.net/ns/auto#complete\\\"/>\");",
											"});",
											"pm.test(\"AutomationResult should contain a producedByAutomationRequest property\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:producedByAutomationRequest rdf:resource=\\\"\" + serverAddr + \"/\" + server_context + \"/services/resources/automationRequests/\");",
											"});",
											"pm.test(\"AutomationResult producedByAutomationRequest should match the AutomationRequest with ID \" + requestId, function () {",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:producedByAutomationRequest rdf:resource=\\\"\" + serverAddr + \"/\" + server_context + \"/services/resources/automationRequests/\" + requestId);",
											"});",
											"pm.test(\"AutomationResult should contain the expected dcterms:title property\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:title rdf:parseType=\\\"Literal\\\">Result - \" + reqTitle + \"</dcterms:title>\");",
											"});",
											"pm.test(\"AutomationResult should contain the expected dcterms:identifier property\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:identifier>\" + requestId + \"</dcterms:identifier>\");",
											"});",
											"pm.test(\"AutomationResult contain the expected dcterms:creator property\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:creator rdf:resource=\\\"\" + reqCreator + \"\\\"/>\");",
											"});",
											"pm.test(\"AutomationResult should contain a dcterms:created  property\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:created\");",
											"});",
											"pm.test(\"AutomationResult should contain a dcterms:modified  property\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:modified\");",
											"});",
											"pm.test(\"AutomationRequest should contain the expected arguments input value\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<rdf:value>\" + test_arguments + \"</rdf:value>\");",
											"});",
											"pm.test(\"AutomationRequest should contain a launchSUT output parameter definition\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<oslc:name>launchSUT</oslc:name>\");",
											"});",
											"pm.test(\"AutomationRequest should contain a SUT input parameter\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<oslc:name>SUT</oslc:name>\");",
											"});",
											"pm.test(\"AutomationRequest should contain the expected SUT input value\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<rdf:value>\" + SUT + \"</rdf:value>\");",
											"});",
											"",
											"pm.test(\"AutomationResult state should be #inProgress\", function () {",
											"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#new\\\"/>\");",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#inProgress\\\"/>\");",
											"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#complete\\\"/>\");",
											"});",
											"pm.test(\"AutomationResult verdict should be #unavailable\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:verdict rdf:resource=\\\"http://open-services.net/ns/auto#unavailable\\\"/>\");",
											"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:verdict rdf:resource=\\\"http://open-services.net/ns/auto#passed\\\"/>\");",
											"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#error\\\"/>\");",
											"});",
											"pm.test(\"AutomationResult should not contain any contributions\", function () {",
											"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:contribution\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/resources/automationResults/{{requestId}}",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"resources",
										"automationResults",
										"{{requestId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "wait for #complete (analysis/core functionality/basic use case/analyse)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var timeoutSeconds = pm.collectionVariables.get('automation_wait_time');",
											"",
											"var waitCounter = pm.globals.get(\"waitCounter\");",
											"if(!waitCounter) {",
											"    waitCounter = 0;",
											"}",
											"",
											"if (pm.response.code != 200) { // wait for the resource to be created",
											"    if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
											"        setTimeout(function(){}, [1000]); // 1 second",
											"        waitCounter++;",
											"        postman.setNextRequest(pm.info.requestName);",
											"    } else { // timeout, reset counter",
											"        waitCounter = 0;",
											"    }",
											"} else { // wait for the automation to complete",
											"    const response = xml2Json(pm.response.text());",
											"    var state = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"][\"oslc_auto:state\"].$[\"rdf:resource\"];",
											"    if (state == \"http://open-services.net/ns/auto#inProgress\") {",
											"        if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
											"            setTimeout(function(){}, [1000]); // 1 second",
											"            waitCounter++;",
											"            postman.setNextRequest(pm.info.requestName);",
											"        } else { // timeout, reset counter",
											"            waitCounter = 0;",
											"        }",
											"    } else { // wait doen, reset counter",
											"            waitCounter = 0;",
											"    }",
											"}",
											"",
											"pm.globals.set(\"waitCounter\", waitCounter);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/resources/automationRequests/{{requestId}}",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"resources",
										"automationRequests",
										"{{requestId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get AutomationRequest - complete",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// get global variable to use in this test",
											"var requestId = pm.globals.get('requestId');",
											"var serverAddr = pm.variables.get(\"server_address\");",
											"var server_context = pm.variables.get(\"server_context\");",
											"var AutomationPlanId = pm.variables.get(\"AutomationPlanId\");",
											"var test_arguments = pm.variables.get(\"arguments\");",
											"var SUT = pm.variables.get(\"SUT\");",
											"var reqTitle = pm.variables.get(\"reqTitle\");",
											"var reqDescription = pm.variables.get(\"reqDescription\");",
											"var reqCreator = pm.variables.get(\"reqCreator\");",
											"",
											"",
											"",
											"pm.test(\"Response code should be 200 (OK)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Response body should contain an AutomationRequest\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:AutomationRequest rdf:about=\\\"\" + serverAddr + \"/\" + server_context + \"/services/resources/automationRequests/\");",
											"});",
											"pm.test(\"AutomationRequest should have the expected ID: \" + requestId, function () {",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:AutomationRequest rdf:about=\\\"\" + serverAddr + \"/\" + server_context + \"/services/resources/automationRequests/\" + requestId);",
											"});",
											"pm.test(\"AutomationRequest desiredState should be #complete\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:desiredState rdf:resource=\\\"http://open-services.net/ns/auto#complete\\\"/>\");",
											"});",
											"pm.test(\"AutomationRequest should contain a executesAutomationPlan property\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:executesAutomationPlan rdf:resource=\\\"\" + serverAddr + \"/\" + server_context + \"/services/resources/automationPlans/\");",
											"});",
											"pm.test(\"AutomationRequest executesAutomationPlan should match the AutomationPlan with ID \" + AutomationPlanId, function () {",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:executesAutomationPlan rdf:resource=\\\"\" + serverAddr + \"/\" + server_context + \"/services/resources/automationPlans/\" + AutomationPlanId);",
											"});",
											"pm.test(\"AutomationRequest should contain the expected dcterms:title property\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:title rdf:parseType=\\\"Literal\\\">\" + reqTitle + \"</dcterms:title>\");",
											"});",
											"pm.test(\"AutomationRequest should contain the expected dcterms:identifier property\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:identifier>\" + requestId + \"</dcterms:identifier>\");",
											"});",
											"pm.test(\"AutomationRequest contain the expected dcterms:creator property\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:creator rdf:resource=\\\"\" + reqCreator + \"\\\"/>\");",
											"});",
											"pm.test(\"AutomationRequest contain the expected dcterms:description property\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:description rdf:parseType=\\\"Literal\\\">\" + reqDescription + \"</dcterms:description>\");",
											"});",
											"pm.test(\"AutomationRequest should contain a dcterms:created  property\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:created\");",
											"});",
											"pm.test(\"AutomationRequest should contain a dcterms:modified  property\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:modified\");",
											"});",
											"pm.test(\"AutomationRequest should contain a arguments input parameter\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<oslc:name>arguments</oslc:name>\");",
											"});",
											"pm.test(\"AutomationRequest should contain the expected arguments input value\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<rdf:value>\" + test_arguments + \"</rdf:value>\");",
											"});",
											"pm.test(\"AutomationRequest should contain a SUT input parameter\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<oslc:name>SUT</oslc:name>\");",
											"});",
											"pm.test(\"AutomationRequest should contain the expected SUT input value\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<rdf:value>\" + SUT + \"</rdf:value>\");",
											"});",
											"",
											"",
											"// this is the only difference compared to the last test request",
											"pm.test(\"AutomationRequest state should be #complete\", function () {",
											"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#new\\\"/>\");",
											"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#inProgress\\\"/>\");",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#complete\\\"/>\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/resources/automationRequests/{{requestId}}",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"resources",
										"automationRequests",
										"{{requestId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get AutomatinResult - complete",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// get global variable to use in this test",
											"var requestId = pm.globals.get('requestId');",
											"var serverAddr = pm.variables.get(\"server_address\");",
											"var server_context = pm.variables.get(\"server_context\");",
											"var AutomationPlanId = pm.variables.get(\"AutomationPlanId\");",
											"var test_arguments = pm.variables.get(\"arguments\");",
											"var SUT = pm.variables.get(\"SUT\");",
											"var reqTitle = pm.variables.get(\"reqTitle\");",
											"var reqDescription = pm.variables.get(\"reqDescription\");",
											"var reqCreator = pm.variables.get(\"reqCreator\");",
											"",
											"",
											"pm.test(\"Response code should be 200 (OK)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Response body should contain an AutomationResult\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:AutomationResult rdf:about=\\\"\" + serverAddr + \"/\" + server_context + \"/services/resources/automationResults/\");",
											"});",
											"pm.test(\"AutomationResult should have the expected ID: \" + requestId, function () {",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:AutomationResult rdf:about=\\\"\" + serverAddr + \"/\" + server_context + \"/services/resources/automationResults/\" + requestId);",
											"});",
											"pm.test(\"AutomationResult desiredState should be #complete\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:desiredState rdf:resource=\\\"http://open-services.net/ns/auto#complete\\\"/>\");",
											"});",
											"pm.test(\"AutomationResult should contain a producedByAutomationRequest property\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:producedByAutomationRequest rdf:resource=\\\"\" + serverAddr + \"/\" + server_context + \"/services/resources/automationRequests/\");",
											"});",
											"pm.test(\"AutomationResult producedByAutomationRequest should match the AutomationRequest with ID \" + requestId, function () {",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:producedByAutomationRequest rdf:resource=\\\"\" + serverAddr + \"/\" + server_context + \"/services/resources/automationRequests/\" + requestId);",
											"});",
											"pm.test(\"AutomationResult should contain the expected dcterms:title property\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:title rdf:parseType=\\\"Literal\\\">Result - \" + reqTitle + \"</dcterms:title>\");",
											"});",
											"pm.test(\"AutomationResult should contain the expected dcterms:identifier property\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:identifier>\" + requestId + \"</dcterms:identifier>\");",
											"});",
											"pm.test(\"AutomationResult contain the expected dcterms:creator property\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:creator rdf:resource=\\\"\" + reqCreator + \"\\\"/>\");",
											"});",
											"pm.test(\"AutomationResult should contain a dcterms:created  property\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:created\");",
											"});",
											"pm.test(\"AutomationResult should contain a dcterms:modified  property\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:modified\");",
											"});",
											"pm.test(\"AutomationRequest should contain the expected arguments input value\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<rdf:value>\" + test_arguments + \"</rdf:value>\");",
											"});",
											"pm.test(\"AutomationRequest should contain a launchSUT input parameter definition\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<oslc:name>launchSUT</oslc:name>\");",
											"});",
											"pm.test(\"AutomationRequest should contain a SUT output parameter\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<oslc:name>SUT</oslc:name>\");",
											"});",
											"pm.test(\"AutomationRequest should contain the expected SUT input value\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<rdf:value>\" + SUT + \"</rdf:value>\");",
											"});",
											"",
											"",
											"pm.test(\"AutomationResult state should be #complete\", function () {",
											"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#new\\\"/>\");",
											"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#inProgress\\\"/>\");",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#complete\\\"/>\");",
											"});",
											"pm.test(\"AutomationResult verdict should be #passed\", function () {",
											"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:verdict rdf:resource=\\\"http://open-services.net/ns/auto#unavailable\\\"/>\");",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:verdict rdf:resource=\\\"http://open-services.net/ns/auto#passed\\\"/>\");",
											"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#error\\\"/>\");",
											"});",
											"pm.test(\"AutomationResult should contain contributions\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:contribution\");",
											"});",
											"pm.test(\"AutomationResult should contain a statusMessage\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:title rdf:parseType=\\\"Literal\\\">statusMessage</dcterms:title>\");",
											"});",
											"pm.test(\"AutomationResult statusMessage should have the expected value\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<rdf:value>Executing: \");",
											"    pm.expect(pm.response.text()).to.include(\"Analysis completed successfully\");",
											"});",
											"pm.test(\"AutomationResult should contain analysis stdout\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:title rdf:parseType=\\\"Literal\\\">stdout</dcterms:title>\");",
											"});",
											"pm.test(\"AutomationResult analysis stdout should have the expected value\", function () {",
											"    pm.expect(pm.response.text()).to.include(\">Dummy tool!\");",
											"    pm.expect(pm.response.text()).to.include(\"Your argument: test_arguments\");",
											"    pm.expect(pm.response.text()).to.include(\"SUT: ./my_echo\");",
											"});",
											"pm.test(\"AutomationResult should contain a returnCode\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:title rdf:parseType=\\\"Literal\\\">returnCode</dcterms:title>\");",
											"});",
											"pm.test(\"AutomationResult returnCode should have the expected value\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<rdf:value>0</rdf:value>\");",
											"});",
											"pm.test(\"AutomationResult should contain a executionTime\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:title rdf:parseType=\\\"Literal\\\">executionTime</dcterms:title>\");",
											"});",
											"pm.test(\"AutomationResult should contain analysis stderr\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:title rdf:parseType=\\\"Literal\\\">stderr</dcterms:title>\");",
											"});",
											"pm.test(\"AutomationResult analysis stderr be empty (~)\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<rdf:value></rdf:value>\");",
											"});",
											"pm.test(\"AutomationResult analysis contributions should have valueType string and integer\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"http://www.w3.org/2001/XMLSchema#string\");",
											"    pm.expect(pm.response.text()).to.not.include(\"http://www.w3.org/2001/XMLSchema#base64binary\");",
											"    pm.expect(pm.response.text()).to.not.include(\"http://www.w3.org/2001/XMLSchema#boolean\");",
											"    pm.expect(pm.response.text()).to.include(\"http://www.w3.org/2001/XMLSchema#integer\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/resources/automationResults/{{requestId}}",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"resources",
										"automationResults",
										"{{requestId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Automation Service Provider",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response code should be 200 (OK)\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/rdf+xml"
							}
						],
						"url": {
							"raw": "{{server_address}}/{{server_context}}/services/serviceProviders/A0",
							"host": [
								"{{server_address}}"
							],
							"path": [
								"{{server_context}}",
								"services",
								"serviceProviders",
								"A0"
							]
						}
					},
					"response": []
				},
				{
					"name": "Service Provider Catologue",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response code should be 200 (OK)\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/rdf+xml",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{server_address}}/{{server_context}}/services/catalog/singleton",
							"host": [
								"{{server_address}}"
							],
							"path": [
								"{{server_context}}",
								"services",
								"catalog",
								"singleton"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Error Handeling",
			"item": [
				{
					"name": "SUT invalid launchCommand TODO",
					"item": []
				},
				{
					"name": "General",
					"item": [
						{
							"name": "pre init",
							"item": [
								{
									"name": "create SUT using the compilation provider",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// save the request ID as a global variable for later tests to use -- used as SUT ID",
													"const response = xml2Json(pm.response.text());",
													"var resrouceAbout = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"].$[\"rdf:about\"];",
													"var resourceAboutSplit = resrouceAbout.split(\"/\");",
													"var requestId = resourceAboutSplit[resourceAboutSplit.length-1];",
													"pm.globals.set('requestId', requestId);",
													"",
													"",
													"pm.test(\"Response code should be 201 (created)\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"var compilation_provider = pm.variables.get(\"compilation_provider\");",
													"var sutId = requestId;",
													"pm.globals.set(\"SUT\", compilation_provider + \"/services/resources/sUTs/\" + sutId);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/xml"
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>analysis test</dcterms:title>\n\t<dcterms:description>analysis test</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{compilation_provider}}/services/resources/automationPlans/0\" />\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>sourceGit</oslc:name>\n\t\t\t<rdf:value>https://github.com/od42/test.git</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>buildCommand</oslc:name>\n\t\t\t<rdf:value>gcc -g TestEchoProgram.cpp -o my_echo</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>launchCommand</oslc:name>\n\t\t\t<rdf:value>./my_echo</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>"
										},
										"url": {
											"raw": "{{compilation_provider}}/services/resources/createAutomationRequest",
											"host": [
												"{{compilation_provider}}"
											],
											"path": [
												"services",
												"resources",
												"createAutomationRequest"
											]
										}
									},
									"response": []
								},
								{
									"name": "wait for #complete (analysis/error handeling/pre init)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var timeoutSeconds = pm.collectionVariables.get('automation_wait_time');",
													"",
													"var waitCounter = pm.globals.get(\"waitCounter\");",
													"if(!waitCounter) {",
													"    waitCounter = 0;",
													"}",
													"",
													"if (pm.response.code != 200) { // wait for the resource to be created",
													"    if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
													"        setTimeout(function(){}, [1000]); // 1 second",
													"        waitCounter++;",
													"        postman.setNextRequest(pm.info.requestName);",
													"    } else { // timeout, reset counter",
													"        waitCounter = 0;",
													"    }",
													"} else { // wait for the automation to complete",
													"    const response = xml2Json(pm.response.text());",
													"    var state = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"][\"oslc_auto:state\"].$[\"rdf:resource\"];",
													"    if (state == \"http://open-services.net/ns/auto#inProgress\") {",
													"        if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
													"            setTimeout(function(){}, [1000]); // 1 second",
													"            waitCounter++;",
													"            postman.setNextRequest(pm.info.requestName);",
													"        } else { // timeout, reset counter",
													"            waitCounter = 0;",
													"        }",
													"    } else { // wait doen, reset counter",
													"            waitCounter = 0;",
													"    }",
													"}",
													"",
													"pm.globals.set(\"waitCounter\", waitCounter);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"url": {
											"raw": "{{compilation_provider}}/services/resources/automationRequests/{{requestId}}",
											"host": [
												"{{compilation_provider}}"
											],
											"path": [
												"services",
												"resources",
												"automationRequests",
												"{{requestId}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "empty POST request",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response code should be 400 (bad request)\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Error msg should be - empty creation POST\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<oslc:message>AutomationRequest NOT created - empty creation POST</oslc:message>\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n</rdf:RDF>"
								},
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/resources/createAutomationRequest",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"resources",
										"createAutomationRequest"
									]
								}
							},
							"response": []
						},
						{
							"name": "title property missing",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response code should be 400 (bad request)\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"",
											"pm.test(\"Error msg should be - executesAutomationPlan property missing\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<oslc:message>AutomationRequest NOT created - title property missing</oslc:message>\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:description>Test</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{server_address}}/{{server_context}}/services/resources/automationPlans/0\" />\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>analyser</oslc:name>\n\t\t\t<rdf:value>atomrace</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>executionParameters</oslc:name>\n\t\t\t<rdf:value>\"Hello World!\"</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>SUT</oslc:name>\n\t\t\t<rdf:value>{{SUT}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>"
								},
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/resources/createAutomationRequest",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"resources",
										"createAutomationRequest"
									]
								}
							},
							"response": []
						},
						{
							"name": "executesAutomationPlan property missing",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response code should be 400 (bad request)\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"",
											"pm.test(\"Error msg should be - executesAutomationPlan property missing\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<oslc:message>AutomationRequest NOT created - executesAutomationPlan property missing</oslc:message>\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>First prototype request</dcterms:title>\n\t<dcterms:description>Test</dcterms:description>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>analyser</oslc:name>\n\t\t\t<rdf:value>atomrace</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>executionParameters</oslc:name>\n\t\t\t<rdf:value>\"Hello World!\"</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>SUT</oslc:name>\n\t\t\t<rdf:value>{{SUT}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>"
								},
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/resources/createAutomationRequest",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"resources",
										"createAutomationRequest"
									]
								}
							},
							"response": []
						},
						{
							"name": "executed AutomationPlan not found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response code should be 400 (bad request)\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"",
											"pm.test(\"Error msg should be - AutomationPlan not found\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<oslc:message>AutomationRequest NOT created - AutomationPlan not found\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>First prototype request</dcterms:title>\n\t<dcterms:description>Test</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{server_address}}/{{server_context}}/services/resources/automationPlans/132523465\" />\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>arguments</oslc:name>\n\t\t\t<rdf:value>HelloWorld</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>SUT</oslc:name>\n\t\t\t<rdf:value>{{SUT}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>"
								},
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/resources/createAutomationRequest",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"resources",
										"createAutomationRequest"
									]
								}
							},
							"response": []
						},
						{
							"name": "unknown input parameter",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response code should be 400 (bad request)\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Error msg should be - AutomationRequest NOT created - unrecognized input parameters\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<oslc:message>AutomationRequest NOT created - 'invalid input' input parameter not recognized</oslc:message>\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>First prototype request</dcterms:title>\n\t<dcterms:description>Test</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{server_address}}/{{server_context}}/services/resources/automationPlans/dummy\" />\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>invalid input</oslc:name>\n\t\t\t<rdf:value>invalid value</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>arguments</oslc:name>\n\t\t\t<rdf:value>HelloWorld</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>SUT</oslc:name>\n\t\t\t<rdf:value>{{SUT}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>"
								},
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/resources/createAutomationRequest",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"resources",
										"createAutomationRequest"
									]
								}
							},
							"response": []
						},
						{
							"name": "SUT input param missing",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response code should be 400 (bad request)\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Error msg should be - AutomationRequest NOT created - unrecognized input parameters\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<oslc:message>AutomationRequest NOT created - 'SUT' input parameter missing</oslc:message>\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>First prototype request</dcterms:title>\n\t<dcterms:description>Test</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{server_address}}/{{server_context}}/services/resources/automationPlans/dummy\" />\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>arguments</oslc:name>\n\t\t\t<rdf:value>HelloWorld</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>"
								},
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/resources/createAutomationRequest",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"resources",
										"createAutomationRequest"
									]
								}
							},
							"response": []
						},
						{
							"name": "SUT non existent resource",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response code should be 400 (bad request)\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Error msg should be - AutomationRequest NOT created - unrecognized input parameters\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<oslc:message>AutomationRequest NOT created - Failed to get refferenced SUT\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>First prototype request</dcterms:title>\n\t<dcterms:description>Test</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{server_address}}/{{server_context}}/services/resources/automationPlans/dummy\" />\n\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>arguments</oslc:name>\n\t\t\t<rdf:value>HelloWorld</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>SUT</oslc:name>\n\t\t\t<rdf:value>{{compilation_provider}}/services/resources/sUTs/234523</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>"
								},
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/resources/createAutomationRequest",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"resources",
										"createAutomationRequest"
									]
								}
							},
							"response": []
						},
						{
							"name": "SUT resource provider unreachable",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response code should be 400 (bad request)\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Error msg should be - AutomationRequest NOT created - connection refused\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Connection refused\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>First prototype request</dcterms:title>\n\t<dcterms:description>Test</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{server_address}}/{{server_context}}/services/resources/automationPlans/dummy\" />\n\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>arguments</oslc:name>\n\t\t\t<rdf:value>HelloWorld</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>SUT</oslc:name>\n\t\t\t<rdf:value>http://localhost:8085/compilation/services/resources/sUTs/234523</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>"
								},
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/resources/createAutomationRequest",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"resources",
										"createAutomationRequest"
									]
								}
							},
							"response": []
						},
						{
							"name": "resource not found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response code should be 404 (not found)\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/resources/automationPlans/123456789",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"resources",
										"automationPlans",
										"123456789"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "SUT property missing",
					"item": [
						{
							"name": "launchCommand missing",
							"item": [
								{
									"name": "create SUT with no launchCommand",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// save the request ID as a global variable for later tests to use -- used as SUT ID",
													"const response = xml2Json(pm.response.text());",
													"var resrouceAbout = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"].$[\"rdf:about\"];",
													"var resourceAboutSplit = resrouceAbout.split(\"/\");",
													"var requestId = resourceAboutSplit[resourceAboutSplit.length-1];",
													"pm.globals.set('requestId', requestId);",
													"",
													"",
													"pm.test(\"Response code should be 201 (created)\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"var compilation_provider = pm.variables.get(\"compilation_provider\");",
													"var sutId = requestId;",
													"pm.globals.set(\"SUT\", compilation_provider + \"/services/resources/sUTs/\" + sutId);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/xml"
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>analysis test</dcterms:title>\n\t<dcterms:description>analysis test</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{compilation_provider}}/services/resources/automationPlans/0\" />\n\t\n\t<oslc_auto:inputParameter>\n        <oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>sourceBase64</oslc:name>\n\t\t\t<rdf:value>TestEchoProgram.cpp\nI2luY2x1ZGUgPHN0ZGlvLmg+CgppbnQgbWFpbihpbnQgYXJnYywgY2hhcioqIGFyZ3YpCnsKCXByaW50ZigiJXNcbiIsIGFyZ3ZbMV0pOwoJcmV0dXJuIDA7Cn0K</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>buildCommand</oslc:name>\n\t\t\t<rdf:value>gcc -g TestEchoProgram.cpp -o my_echo</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>"
										},
										"url": {
											"raw": "{{compilation_provider}}/services/resources/createAutomationRequest",
											"host": [
												"{{compilation_provider}}"
											],
											"path": [
												"services",
												"resources",
												"createAutomationRequest"
											]
										}
									},
									"response": []
								},
								{
									"name": "wait for #complete (analysis/error handeling/sut property missing/launch command)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var timeoutSeconds = pm.collectionVariables.get('automation_wait_time');",
													"",
													"var waitCounter = pm.globals.get(\"waitCounter\");",
													"if(!waitCounter) {",
													"    waitCounter = 0;",
													"}",
													"",
													"if (pm.response.code != 200) { // wait for the resource to be created",
													"    if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
													"        setTimeout(function(){}, [1000]); // 1 second",
													"        waitCounter++;",
													"        postman.setNextRequest(pm.info.requestName);",
													"    } else { // timeout, reset counter",
													"        waitCounter = 0;",
													"    }",
													"} else { // wait for the automation to complete",
													"    const response = xml2Json(pm.response.text());",
													"    var state = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"][\"oslc_auto:state\"].$[\"rdf:resource\"];",
													"    if (state == \"http://open-services.net/ns/auto#inProgress\") {",
													"        if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
													"            setTimeout(function(){}, [1000]); // 1 second",
													"            waitCounter++;",
													"            postman.setNextRequest(pm.info.requestName);",
													"        } else { // timeout, reset counter",
													"            waitCounter = 0;",
													"        }",
													"    } else { // wait doen, reset counter",
													"            waitCounter = 0;",
													"    }",
													"}",
													"",
													"pm.globals.set(\"waitCounter\", waitCounter);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"url": {
											"raw": "{{compilation_provider}}/services/resources/automationRequests/{{requestId}}",
											"host": [
												"{{compilation_provider}}"
											],
											"path": [
												"services",
												"resources",
												"automationRequests",
												"{{requestId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "try to analyze with a tool that uses launchCommand",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response code should be 400 (bad request)\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"pm.test(\"Response should contain an error message\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"referenced SUT is missing a launchCommand\")",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"",
													"// setup global variables for future requests (GETs)",
													"// attempt to make this sequence of requests into a template that can then be change in this place to change the test",
													"",
													"pm.globals.set(\"AutomationPlanId\", \"dummy\");",
													"",
													"pm.globals.set(\"arguments\", \"test_arguments\");",
													"",
													"pm.globals.set(\"reqCreator\", \"https://pajda.fit.vutbr.cz/xvasic\");",
													"pm.globals.set(\"reqTitle\", \"Test title\");",
													"pm.globals.set(\"reqDescription\", \"Test description\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/xml"
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{server_address}}/{{server_context}}/services/resources/automationPlans/dummy\" />\n\t<dcterms:title>test</dcterms:title>\n\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>arguments</oslc:name>\n\t\t\t<rdf:value>asdfasdf</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>SUT</oslc:name>\n\t\t\t<rdf:value>{{SUT}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>"
										},
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/resources/createAutomationRequest",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"resources",
												"createAutomationRequest"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "buildCommand missing",
							"item": [
								{
									"name": "create SUT with no buildCommand",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// save the request ID as a global variable for later tests to use -- used as SUT ID",
													"const response = xml2Json(pm.response.text());",
													"var resrouceAbout = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"].$[\"rdf:about\"];",
													"var resourceAboutSplit = resrouceAbout.split(\"/\");",
													"var requestId = resourceAboutSplit[resourceAboutSplit.length-1];",
													"pm.globals.set('requestId', requestId);",
													"",
													"",
													"pm.test(\"Response code should be 201 (created)\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"var compilation_provider = pm.variables.get(\"compilation_provider\");",
													"var sutId = requestId;",
													"pm.globals.set(\"SUT\", compilation_provider + \"/services/resources/sUTs/\" + sutId);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/xml"
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>analysis test</dcterms:title>\n\t<dcterms:description>analysis test</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{compilation_provider}}/services/resources/automationPlans/0\" />\n\t\n\t<oslc_auto:inputParameter>\n        <oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>sourceBase64</oslc:name>\n\t\t\t<rdf:value>TestEchoProgram.cpp\nI2luY2x1ZGUgPHN0ZGlvLmg+CgppbnQgbWFpbihpbnQgYXJnYywgY2hhcioqIGFyZ3YpCnsKCXByaW50ZigiJXNcbiIsIGFyZ3ZbMV0pOwoJcmV0dXJuIDA7Cn0K</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>launchCommand</oslc:name>\n\t\t\t<rdf:value>./my_echo</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n    \n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>"
										},
										"url": {
											"raw": "{{compilation_provider}}/services/resources/createAutomationRequest",
											"host": [
												"{{compilation_provider}}"
											],
											"path": [
												"services",
												"resources",
												"createAutomationRequest"
											]
										}
									},
									"response": []
								},
								{
									"name": "wait for #complete (analysis/error handeling/sut property missing/build command)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var timeoutSeconds = pm.collectionVariables.get('automation_wait_time');",
													"",
													"var waitCounter = pm.globals.get(\"waitCounter\");",
													"if(!waitCounter) {",
													"    waitCounter = 0;",
													"}",
													"",
													"if (pm.response.code != 200) { // wait for the resource to be created",
													"    if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
													"        setTimeout(function(){}, [1000]); // 1 second",
													"        waitCounter++;",
													"        postman.setNextRequest(pm.info.requestName);",
													"    } else { // timeout, reset counter",
													"        waitCounter = 0;",
													"    }",
													"} else { // wait for the automation to complete",
													"    const response = xml2Json(pm.response.text());",
													"    var state = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"][\"oslc_auto:state\"].$[\"rdf:resource\"];",
													"    if (state == \"http://open-services.net/ns/auto#inProgress\") {",
													"        if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
													"            setTimeout(function(){}, [1000]); // 1 second",
													"            waitCounter++;",
													"            postman.setNextRequest(pm.info.requestName);",
													"        } else { // timeout, reset counter",
													"            waitCounter = 0;",
													"        }",
													"    } else { // wait doen, reset counter",
													"            waitCounter = 0;",
													"    }",
													"}",
													"",
													"pm.globals.set(\"waitCounter\", waitCounter);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"url": {
											"raw": "{{compilation_provider}}/services/resources/automationRequests/{{requestId}}",
											"host": [
												"{{compilation_provider}}"
											],
											"path": [
												"services",
												"resources",
												"automationRequests",
												"{{requestId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "try to analyze with a tool that uses buildCommand",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response code should be 400 (bad request)\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"pm.test(\"Response should contain an error message\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"referenced SUT is missing a buildCommand\")",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/xml"
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{server_address}}/{{server_context}}/services/resources/automationPlans/dummy\" />\n\t<dcterms:title>test</dcterms:title>\n\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>arguments</oslc:name>\n\t\t\t<rdf:value>asdfasdf</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>SUT</oslc:name>\n\t\t\t<rdf:value>{{SUT}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>"
										},
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/resources/createAutomationRequest",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"resources",
												"createAutomationRequest"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Common Input Parameters",
			"item": [
				{
					"name": "pre init",
					"item": [
						{
							"name": "create SUT using the compilation provider",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// save the request ID as a global variable for later tests to use -- used as SUT ID",
											"const response = xml2Json(pm.response.text());",
											"var resrouceAbout = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"].$[\"rdf:about\"];",
											"var resourceAboutSplit = resrouceAbout.split(\"/\");",
											"var requestId = resourceAboutSplit[resourceAboutSplit.length-1];",
											"pm.globals.set('requestId', requestId);",
											"",
											"",
											"pm.test(\"Response code should be 201 (created)\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"var compilation_provider = pm.variables.get(\"compilation_provider\");",
											"var sutId = requestId;",
											"pm.globals.set(\"SUT\", compilation_provider + \"/services/resources/sUTs/\" + sutId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/xml"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>analysis test</dcterms:title>\n\t<dcterms:description>analysis test</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{compilation_provider}}/services/resources/automationPlans/0\" />\n\t\n\t<oslc_auto:inputParameter>\n        <oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>sourceBase64</oslc:name>\n\t\t\t<rdf:value>TestEchoProgram.cpp\nI2luY2x1ZGUgPHN0ZGlvLmg+CgppbnQgbWFpbihpbnQgYXJnYywgY2hhcioqIGFyZ3YpCnsKCXByaW50ZigiJXNcbiIsIGFyZ3ZbMV0pOwoJcmV0dXJuIDA7Cn0K</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>buildCommand</oslc:name>\n\t\t\t<rdf:value>gcc -g TestEchoProgram.cpp -o my_echo</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>launchCommand</oslc:name>\n\t\t\t<rdf:value>./my_echo</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>"
								},
								"url": {
									"raw": "{{compilation_provider}}/services/resources/createAutomationRequest",
									"host": [
										"{{compilation_provider}}"
									],
									"path": [
										"services",
										"resources",
										"createAutomationRequest"
									]
								}
							},
							"response": []
						},
						{
							"name": "wait for #complete (analysis/common input paramters/pre init)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var timeoutSeconds = pm.collectionVariables.get('automation_wait_time');",
											"",
											"var waitCounter = pm.globals.get(\"waitCounter\");",
											"if(!waitCounter) {",
											"    waitCounter = 0;",
											"}",
											"",
											"if (pm.response.code != 200) { // wait for the resource to be created",
											"    if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
											"        setTimeout(function(){}, [1000]); // 1 second",
											"        waitCounter++;",
											"        postman.setNextRequest(pm.info.requestName);",
											"    } else { // timeout, reset counter",
											"        waitCounter = 0;",
											"    }",
											"} else { // wait for the automation to complete",
											"    const response = xml2Json(pm.response.text());",
											"    var state = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"][\"oslc_auto:state\"].$[\"rdf:resource\"];",
											"    if (state == \"http://open-services.net/ns/auto#inProgress\") {",
											"        if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
											"            setTimeout(function(){}, [1000]); // 1 second",
											"            waitCounter++;",
											"            postman.setNextRequest(pm.info.requestName);",
											"        } else { // timeout, reset counter",
											"            waitCounter = 0;",
											"        }",
											"    } else { // wait doen, reset counter",
											"            waitCounter = 0;",
											"    }",
											"}",
											"",
											"pm.globals.set(\"waitCounter\", waitCounter);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"url": {
									"raw": "{{compilation_provider}}/services/resources/automationRequests/{{requestId}}",
									"host": [
										"{{compilation_provider}}"
									],
									"path": [
										"services",
										"resources",
										"automationRequests",
										"{{requestId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "timeout",
					"item": [
						{
							"name": "timeout long enough",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Response code should be 201 (created)\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"",
											"// save the request ID as a global variable for later tests to use",
											"const response = xml2Json(pm.response.text());",
											"var resrouceAbout = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"].$[\"rdf:about\"];",
											"var resourceAboutSplit = resrouceAbout.split(\"/\");",
											"var requestId = resourceAboutSplit[resourceAboutSplit.length-1];",
											"pm.globals.set('requestId', requestId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{server_address}}/{{server_context}}/services/resources/automationPlans/dummy\" />\n\t<dcterms:title>test</dcterms:title>\n\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>arguments</oslc:name>\n\t\t\t<rdf:value>asdfasdf</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>timeout</oslc:name>\n\t\t\t<rdf:value>10</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>SUT</oslc:name>\n\t\t\t<rdf:value>{{SUT}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>",
									"options": {
										"raw": {
											"language": "xml"
										}
									}
								},
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/resources/createAutomationRequest",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"resources",
										"createAutomationRequest"
									]
								}
							},
							"response": []
						},
						{
							"name": "wait for #complete (analysis/common input paramters/timeout/long)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var timeoutSeconds = pm.collectionVariables.get('automation_wait_time');",
											"",
											"var waitCounter = pm.globals.get(\"waitCounter\");",
											"if(!waitCounter) {",
											"    waitCounter = 0;",
											"}",
											"",
											"if (pm.response.code != 200) { // wait for the resource to be created",
											"    if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
											"        setTimeout(function(){}, [1000]); // 1 second",
											"        waitCounter++;",
											"        postman.setNextRequest(pm.info.requestName);",
											"    } else { // timeout, reset counter",
											"        waitCounter = 0;",
											"    }",
											"} else { // wait for the automation to complete",
											"    const response = xml2Json(pm.response.text());",
											"    var state = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"][\"oslc_auto:state\"].$[\"rdf:resource\"];",
											"    if (state == \"http://open-services.net/ns/auto#inProgress\") {",
											"        if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
											"            setTimeout(function(){}, [1000]); // 1 second",
											"            waitCounter++;",
											"            postman.setNextRequest(pm.info.requestName);",
											"        } else { // timeout, reset counter",
											"            waitCounter = 0;",
											"        }",
											"    } else { // wait doen, reset counter",
											"            waitCounter = 0;",
											"    }",
											"}",
											"",
											"pm.globals.set(\"waitCounter\", waitCounter);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/resources/automationRequests/{{requestId}}",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"resources",
										"automationRequests",
										"{{requestId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get result",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// get global variable to use in this test",
											"var requestId = pm.globals.get('requestId');",
											"var serverAddr = pm.variables.get(\"server_address\");",
											"var server_context = pm.variables.get(\"server_context\");",
											"var AutomationPlanId = pm.variables.get(\"AutomationPlanId\");",
											"var test_arguments = pm.variables.get(\"arguments\");",
											"var SUT = pm.variables.get(\"SUT\");",
											"",
											"",
											"pm.test(\"Response code should be 200 (OK)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"AutomationResult state should be #complete\", function () {",
											"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#new\\\"/>\");",
											"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#inProgress\\\"/>\");",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#complete\\\"/>\");",
											"});",
											"pm.test(\"AutomationResult verdict should be #passed\", function () {",
											"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:verdict rdf:resource=\\\"http://open-services.net/ns/auto#unavailable\\\"/>\");",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:verdict rdf:resource=\\\"http://open-services.net/ns/auto#passed\\\"/>\");",
											"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#error\\\"/>\");",
											"});",
											"pm.test(\"AutomationResult analysis statusMessage should have the expected value\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Executing: \");",
											"    pm.expect(pm.response.text()).to.include(\"Analysis completed successfully\");",
											"});",
											"pm.test(\"returnCode should be 0\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<rdf:value>0</rdf:value>\");",
											"});",
											"pm.test(\"AutomationResult analysis stderr be empty (~)\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<rdf:value></rdf:value>\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/resources/automationResults/{{requestId}}",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"resources",
										"automationResults",
										"{{requestId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "timeout too short",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"",
											"pm.test(\"Response code should be 201 (created)\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"",
											"// save the request ID as a global variable for later tests to use",
											"const response = xml2Json(pm.response.text());",
											"var resrouceAbout = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"].$[\"rdf:about\"];",
											"var resourceAboutSplit = resrouceAbout.split(\"/\");",
											"var requestId = resourceAboutSplit[resourceAboutSplit.length-1];",
											"pm.globals.set('requestId', requestId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{server_address}}/{{server_context}}/services/resources/automationPlans/dummy\" />\n\t<dcterms:title>test</dcterms:title>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>arguments</oslc:name>\n\t\t\t<rdf:value>asdfasdf</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>timeout</oslc:name>\n\t\t\t<rdf:value>2</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>SUT</oslc:name>\n\t\t\t<rdf:value>{{SUT}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>",
									"options": {
										"raw": {
											"language": "xml"
										}
									}
								},
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/resources/createAutomationRequest",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"resources",
										"createAutomationRequest"
									]
								}
							},
							"response": []
						},
						{
							"name": "wait for #complete (analysis/common input paramters/timeout/short)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var timeoutSeconds = pm.collectionVariables.get('automation_wait_time');",
											"",
											"var waitCounter = pm.globals.get(\"waitCounter\");",
											"if(!waitCounter) {",
											"    waitCounter = 0;",
											"}",
											"",
											"if (pm.response.code != 200) { // wait for the resource to be created",
											"    if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
											"        setTimeout(function(){}, [1000]); // 1 second",
											"        waitCounter++;",
											"        postman.setNextRequest(pm.info.requestName);",
											"    } else { // timeout, reset counter",
											"        waitCounter = 0;",
											"    }",
											"} else { // wait for the automation to complete",
											"    const response = xml2Json(pm.response.text());",
											"    var state = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"][\"oslc_auto:state\"].$[\"rdf:resource\"];",
											"    if (state == \"http://open-services.net/ns/auto#inProgress\") {",
											"        if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
											"            setTimeout(function(){}, [1000]); // 1 second",
											"            waitCounter++;",
											"            postman.setNextRequest(pm.info.requestName);",
											"        } else { // timeout, reset counter",
											"            waitCounter = 0;",
											"        }",
											"    } else { // wait doen, reset counter",
											"            waitCounter = 0;",
											"    }",
											"}",
											"",
											"pm.globals.set(\"waitCounter\", waitCounter);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/resources/automationRequests/{{requestId}}",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"resources",
										"automationRequests",
										"{{requestId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get result timeouted",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// get global variable to use in this test",
											"var requestId = pm.globals.get('requestId');",
											"var serverAddr = pm.variables.get(\"server_address\");",
											"var server_context = pm.variables.get(\"server_context\");",
											"var AutomationPlanId = pm.variables.get(\"AutomationPlanId\");",
											"var test_arguments = pm.variables.get(\"arguments\");",
											"var SUT = pm.variables.get(\"SUT\");",
											"",
											"",
											"pm.test(\"Response code should be 200 (OK)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"AutomationResult state should be #complete\", function () {",
											"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#new\\\"/>\");",
											"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#inProgress\\\"/>\");",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#complete\\\"/>\");",
											"});",
											"pm.test(\"AutomationResult verdict should be #failed\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:verdict rdf:resource=\\\"http://open-services.net/ns/auto#failed\\\"/>\");",
											"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:verdict rdf:resource=\\\"http://open-services.net/ns/auto#unavailable\\\"/>\");",
											"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:verdict rdf:resource=\\\"http://open-services.net/ns/auto#passed\\\"/>\");",
											"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#error\\\"/>\");",
											"});",
											"",
											"pm.test(\"AutomationResult analysis statusMessage should have the expected value\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Executing: \");",
											"    pm.expect(pm.response.text()).to.include(\"Analysis aborted \");",
											"    pm.expect(pm.response.text()).to.include(\"timeout (2 seconds)\");",
											"});",
											"",
											"pm.test(\"returnCode should be 1 (win) or 0 (linux) \", function () {",
											"    if (pm.response.text().includes(\"<rdf:value>1</rdf:value>\"))",
											"    {",
											"        pm.expect(pm.response.text()).to.include(\"<rdf:value>1</rdf:value>\");",
											"    }",
											"    else if (pm.response.text().includes(\"<rdf:value>0</rdf:value>\"))",
											"    {",
											"        pm.expect(pm.response.text()).to.include(\"<rdf:value>0</rdf:value>\");",
											"    }",
											"    else",
											"    {",
											"        pm.expect(false);",
											"    }",
											"});",
											"",
											"pm.test(\"AutomationResult analysis stderr be empty (~)\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<rdf:value></rdf:value>\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/resources/automationResults/{{requestId}}",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"resources",
										"automationResults",
										"{{requestId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "outputFileRegex",
					"item": [
						{
							"name": "outputFileRegex no matches",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"",
											"pm.test(\"Response code should be 201 (created)\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"",
											"// save the request ID as a global variable for later tests to use",
											"const response = xml2Json(pm.response.text());",
											"var resrouceAbout = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"].$[\"rdf:about\"];",
											"var resourceAboutSplit = resrouceAbout.split(\"/\");",
											"var requestId = resourceAboutSplit[resourceAboutSplit.length-1];",
											"pm.globals.set('requestId', requestId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{server_address}}/{{server_context}}/services/resources/automationPlans/dummy\" />\n\t<dcterms:title>test</dcterms:title>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>arguments</oslc:name>\n\t\t\t<rdf:value>asdfasdf</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>outputFileRegex</oslc:name>\n\t\t\t<rdf:value>.^</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>SUT</oslc:name>\n\t\t\t<rdf:value>{{SUT}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>",
									"options": {
										"raw": {
											"language": "xml"
										}
									}
								},
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/resources/createAutomationRequest",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"resources",
										"createAutomationRequest"
									]
								}
							},
							"response": []
						},
						{
							"name": "wait for #complete (analysis/common input paramters/otputfileregex/nomatch)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var timeoutSeconds = pm.collectionVariables.get('automation_wait_time');",
											"",
											"var waitCounter = pm.globals.get(\"waitCounter\");",
											"if(!waitCounter) {",
											"    waitCounter = 0;",
											"}",
											"",
											"if (pm.response.code != 200) { // wait for the resource to be created",
											"    if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
											"        setTimeout(function(){}, [1000]); // 1 second",
											"        waitCounter++;",
											"        postman.setNextRequest(pm.info.requestName);",
											"    } else { // timeout, reset counter",
											"        waitCounter = 0;",
											"    }",
											"} else { // wait for the automation to complete",
											"    const response = xml2Json(pm.response.text());",
											"    var state = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"][\"oslc_auto:state\"].$[\"rdf:resource\"];",
											"    if (state == \"http://open-services.net/ns/auto#inProgress\") {",
											"        if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
											"            setTimeout(function(){}, [1000]); // 1 second",
											"            waitCounter++;",
											"            postman.setNextRequest(pm.info.requestName);",
											"        } else { // timeout, reset counter",
											"            waitCounter = 0;",
											"        }",
											"    } else { // wait doen, reset counter",
											"            waitCounter = 0;",
											"    }",
											"}",
											"",
											"pm.globals.set(\"waitCounter\", waitCounter);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/resources/automationRequests/{{requestId}}",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"resources",
										"automationRequests",
										"{{requestId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get result",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// get global variable to use in this test",
											"var requestId = pm.globals.get('requestId');",
											"var serverAddr = pm.variables.get(\"server_address\");",
											"var server_context = pm.variables.get(\"server_context\");",
											"var AutomationPlanId = pm.variables.get(\"AutomationPlanId\");",
											"var test_arguments = pm.variables.get(\"arguments\");",
											"var SUT = pm.variables.get(\"SUT\");",
											"",
											"",
											"pm.test(\"Response code should be 200 (OK)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"AutomationResult state should be #complete\", function () {",
											"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#new\\\"/>\");",
											"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#inProgress\\\"/>\");",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#complete\\\"/>\");",
											"});",
											"pm.test(\"AutomationResult verdict should be #passed\", function () {",
											"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:verdict rdf:resource=\\\"http://open-services.net/ns/auto#unavailable\\\"/>\");",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:verdict rdf:resource=\\\"http://open-services.net/ns/auto#passed\\\"/>\");",
											"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#error\\\"/>\");",
											"});",
											"pm.test(\"AutomationResult analysis stderr be empty (~)\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<rdf:value></rdf:value>\");",
											"});",
											"pm.test(\"AutomationResult statusMessage should have the expected value\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Executing: \");",
											"    pm.expect(pm.response.text()).to.include(\"Analysis completed successfully\");",
											"});",
											"pm.test(\"returnCode should be 0\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<rdf:value>0</rdf:value>\");",
											"});",
											"pm.test(\"AutomationResult does not contain any regex match file contributions\", function () {",
											"    pm.expect(pm.response.text()).to.not.include(\"This file was modified or created during execution\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/resources/automationResults/{{requestId}}",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"resources",
										"automationResults",
										"{{requestId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "outputFileRegex match all",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response code should be 201 (created)\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"",
											"// save the request ID as a global variable for later tests to use",
											"const response = xml2Json(pm.response.text());",
											"var resrouceAbout = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"].$[\"rdf:about\"];",
											"var resourceAboutSplit = resrouceAbout.split(\"/\");",
											"var requestId = resourceAboutSplit[resourceAboutSplit.length-1];",
											"pm.globals.set('requestId', requestId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{server_address}}/{{server_context}}/services/resources/automationPlans/dummy\" />\n\t<dcterms:title>test</dcterms:title>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>arguments</oslc:name>\n\t\t\t<rdf:value>asdfasdf</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>outputFileRegex</oslc:name>\n\t\t\t<rdf:value>.*</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>SUT</oslc:name>\n\t\t\t<rdf:value>{{SUT}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>",
									"options": {
										"raw": {
											"language": "xml"
										}
									}
								},
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/resources/createAutomationRequest",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"resources",
										"createAutomationRequest"
									]
								}
							},
							"response": []
						},
						{
							"name": "wait for #complete (analysis/common input paramters/otputfileregex/match all)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var timeoutSeconds = pm.collectionVariables.get('automation_wait_time');",
											"",
											"var waitCounter = pm.globals.get(\"waitCounter\");",
											"if(!waitCounter) {",
											"    waitCounter = 0;",
											"}",
											"",
											"if (pm.response.code != 200) { // wait for the resource to be created",
											"    if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
											"        setTimeout(function(){}, [1000]); // 1 second",
											"        waitCounter++;",
											"        postman.setNextRequest(pm.info.requestName);",
											"    } else { // timeout, reset counter",
											"        waitCounter = 0;",
											"    }",
											"} else { // wait for the automation to complete",
											"    const response = xml2Json(pm.response.text());",
											"    var state = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"][\"oslc_auto:state\"].$[\"rdf:resource\"];",
											"    if (state == \"http://open-services.net/ns/auto#inProgress\") {",
											"        if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
											"            setTimeout(function(){}, [1000]); // 1 second",
											"            waitCounter++;",
											"            postman.setNextRequest(pm.info.requestName);",
											"        } else { // timeout, reset counter",
											"            waitCounter = 0;",
											"        }",
											"    } else { // wait doen, reset counter",
											"            waitCounter = 0;",
											"    }",
											"}",
											"",
											"pm.globals.set(\"waitCounter\", waitCounter);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/resources/automationRequests/{{requestId}}",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"resources",
										"automationRequests",
										"{{requestId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get result",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// get global variable to use in this test",
											"var requestId = pm.globals.get('requestId');",
											"var serverAddr = pm.variables.get(\"server_address\");",
											"var server_context = pm.variables.get(\"server_context\");",
											"var AutomationPlanId = pm.variables.get(\"AutomationPlanId\");",
											"var test_arguments = pm.variables.get(\"arguments\");",
											"var SUT = pm.variables.get(\"SUT\");",
											"",
											"",
											"pm.test(\"Response code should be 200 (OK)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"AutomationResult state should be #complete\", function () {",
											"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#new\\\"/>\");",
											"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#inProgress\\\"/>\");",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#complete\\\"/>\");",
											"});",
											"pm.test(\"AutomationResult verdict should be #passed\", function () {",
											"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:verdict rdf:resource=\\\"http://open-services.net/ns/auto#unavailable\\\"/>\");",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:verdict rdf:resource=\\\"http://open-services.net/ns/auto#passed\\\"/>\");",
											"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#error\\\"/>\");",
											"});",
											"pm.test(\"AutomationResult analysis stderr be empty (~)\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<rdf:value></rdf:value>\");",
											"});",
											"pm.test(\"AutomationResult statusMessage should have the expected value\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Executing: \");",
											"    pm.expect(pm.response.text()).to.include(\"Analysis completed successfully\");",
											"});",
											"pm.test(\"returnCode should be 0\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<rdf:value>0</rdf:value>\");",
											"});",
											"pm.test(\"AutomationResult contains regex match file contributions\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"File produced or modified during execution\");",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:title rdf:parseType=\\\"Literal\\\">file2</dcterms:title>\");",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:title rdf:parseType=\\\"Literal\\\">file1</dcterms:title>\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/resources/automationResults/{{requestId}}",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"resources",
										"automationResults",
										"{{requestId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "zipOutputs",
					"item": [
						{
							"name": "zipOutputs",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response code should be 201 (created)\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"",
											"// save the request ID as a global variable for later tests to use",
											"const response = xml2Json(pm.response.text());",
											"var resrouceAbout = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"].$[\"rdf:about\"];",
											"var resourceAboutSplit = resrouceAbout.split(\"/\");",
											"var requestId = resourceAboutSplit[resourceAboutSplit.length-1];",
											"pm.globals.set('requestId', requestId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{server_address}}/{{server_context}}/services/resources/automationPlans/dummy\" />\n\t<dcterms:title>test</dcterms:title>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>arguments</oslc:name>\n\t\t\t<rdf:value>asdfasdf</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>outputFileRegex</oslc:name>\n\t\t\t<rdf:value>.*</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>zipOutputs</oslc:name>\n\t\t\t<rdf:value>true</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>SUT</oslc:name>\n\t\t\t<rdf:value>{{SUT}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>",
									"options": {
										"raw": {
											"language": "xml"
										}
									}
								},
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/resources/createAutomationRequest",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"resources",
										"createAutomationRequest"
									]
								}
							},
							"response": []
						},
						{
							"name": "wait for #complete (analysis/common input paramters/zipoutputs)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var timeoutSeconds = pm.collectionVariables.get('automation_wait_time');",
											"",
											"var waitCounter = pm.globals.get(\"waitCounter\");",
											"if(!waitCounter) {",
											"    waitCounter = 0;",
											"}",
											"",
											"if (pm.response.code != 200) { // wait for the resource to be created",
											"    if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
											"        setTimeout(function(){}, [1000]); // 1 second",
											"        waitCounter++;",
											"        postman.setNextRequest(pm.info.requestName);",
											"    } else { // timeout, reset counter",
											"        waitCounter = 0;",
											"    }",
											"} else { // wait for the automation to complete",
											"    const response = xml2Json(pm.response.text());",
											"    var state = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"][\"oslc_auto:state\"].$[\"rdf:resource\"];",
											"    if (state == \"http://open-services.net/ns/auto#inProgress\") {",
											"        if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
											"            setTimeout(function(){}, [1000]); // 1 second",
											"            waitCounter++;",
											"            postman.setNextRequest(pm.info.requestName);",
											"        } else { // timeout, reset counter",
											"            waitCounter = 0;",
											"        }",
											"    } else { // wait doen, reset counter",
											"            waitCounter = 0;",
											"    }",
											"}",
											"",
											"pm.globals.set(\"waitCounter\", waitCounter);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/resources/automationRequests/{{requestId}}",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"resources",
										"automationRequests",
										"{{requestId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get result",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// get global variable to use in this test",
											"var requestId = pm.globals.get('requestId');",
											"var serverAddr = pm.variables.get(\"server_address\");",
											"var server_context = pm.variables.get(\"server_context\");",
											"var AutomationPlanId = pm.variables.get(\"AutomationPlanId\");",
											"var test_arguments = pm.variables.get(\"arguments\");",
											"var SUT = pm.variables.get(\"SUT\");",
											"",
											"",
											"pm.test(\"Response code should be 200 (OK)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"AutomationResult state should be #complete\", function () {",
											"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#new\\\"/>\");",
											"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#inProgress\\\"/>\");",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#complete\\\"/>\");",
											"});",
											"pm.test(\"AutomationResult verdict should be #passed\", function () {",
											"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:verdict rdf:resource=\\\"http://open-services.net/ns/auto#unavailable\\\"/>\");",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:verdict rdf:resource=\\\"http://open-services.net/ns/auto#passed\\\"/>\");",
											"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#error\\\"/>\");",
											"});",
											"pm.test(\"AutomationResult statusMessage should have the expected value\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Executing: \");",
											"    pm.expect(pm.response.text()).to.include(\"Analysis completed successfully\");",
											"});",
											"pm.test(\"returnCode should be 0\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<rdf:value>0</rdf:value>\");",
											"});",
											"pm.test(\"AutomationResult analysis stderr be empty (~)\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<rdf:value></rdf:value>\");",
											"});",
											"",
											"pm.test(\"AutomationResult does not contain regex match file contributions\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"This is a ZIP of all other file contributions. To download the file directly send a GET accepting application/octet-stream to the URI in the fit:fileURI property.\");",
											"    pm.expect(pm.response.text()).to.include(\".zip</dcterms:title>\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/resources/automationResults/{{requestId}}",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"resources",
										"automationResults",
										"{{requestId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "launchCommand",
					"item": [
						{
							"name": "launchCommand",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response code should be 201 (created)\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"// save the request ID as a global variable for later tests to use",
											"const response = xml2Json(pm.response.text());",
											"var resrouceAbout = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"].$[\"rdf:about\"];",
											"var resourceAboutSplit = resrouceAbout.split(\"/\");",
											"var requestId = resourceAboutSplit[resourceAboutSplit.length-1];",
											"pm.globals.set('requestId', requestId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{server_address}}/{{server_context}}/services/resources/automationPlans/dummy\" />\n\t<dcterms:title>test</dcterms:title>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>arguments</oslc:name>\n\t\t\t<rdf:value>asdfasdf</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>SUT</oslc:name>\n\t\t\t<rdf:value>{{SUT}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>",
									"options": {
										"raw": {
											"language": "xml"
										}
									}
								},
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/resources/createAutomationRequest",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"resources",
										"createAutomationRequest"
									]
								}
							},
							"response": []
						},
						{
							"name": "wait for #complete (analysis/common input paramters/launchcommand)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var timeoutSeconds = pm.collectionVariables.get('automation_wait_time');",
											"",
											"var waitCounter = pm.globals.get(\"waitCounter\");",
											"if(!waitCounter) {",
											"    waitCounter = 0;",
											"}",
											"",
											"if (pm.response.code != 200) { // wait for the resource to be created",
											"    if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
											"        setTimeout(function(){}, [1000]); // 1 second",
											"        waitCounter++;",
											"        postman.setNextRequest(pm.info.requestName);",
											"    } else { // timeout, reset counter",
											"        waitCounter = 0;",
											"    }",
											"} else { // wait for the automation to complete",
											"    const response = xml2Json(pm.response.text());",
											"    var state = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"][\"oslc_auto:state\"].$[\"rdf:resource\"];",
											"    if (state == \"http://open-services.net/ns/auto#inProgress\") {",
											"        if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
											"            setTimeout(function(){}, [1000]); // 1 second",
											"            waitCounter++;",
											"            postman.setNextRequest(pm.info.requestName);",
											"        } else { // timeout, reset counter",
											"            waitCounter = 0;",
											"        }",
											"    } else { // wait doen, reset counter",
											"            waitCounter = 0;",
											"    }",
											"}",
											"",
											"pm.globals.set(\"waitCounter\", waitCounter);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/resources/automationRequests/{{requestId}}",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"resources",
										"automationRequests",
										"{{requestId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get result",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// get global variable to use in this test",
											"var requestId = pm.globals.get('requestId');",
											"var serverAddr = pm.variables.get(\"server_address\");",
											"var server_context = pm.variables.get(\"server_context\");",
											"var AutomationPlanId = pm.variables.get(\"AutomationPlanId\");",
											"var test_arguments = pm.variables.get(\"arguments\");",
											"var SUT = pm.variables.get(\"SUT\");",
											"",
											"pm.test(\"Response code should be 200 (OK)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"AutomationResult state should be #complete\", function () {",
											"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#new\\\"/>\");",
											"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#inProgress\\\"/>\");",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#complete\\\"/>\");",
											"});",
											"pm.test(\"AutomationResult verdict should be #passed\", function () {",
											"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:verdict rdf:resource=\\\"http://open-services.net/ns/auto#unavailable\\\"/>\");",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:verdict rdf:resource=\\\"http://open-services.net/ns/auto#passed\\\"/>\");",
											"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#error\\\"/>\");",
											"});",
											"pm.test(\"AutomationResult statusMessage should have the expected value\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Executing: \");",
											"    pm.expect(pm.response.text()).to.include(\"Analysis completed successfully\");",
											"    if (pm.response.text().includes(\"analysis/tests/dummy_tool.sh  asdfasdf ./my_echo\"))",
											"    {",
											"        pm.expect(pm.response.text()).to.include(\"analysis/tests/dummy_tool.sh  asdfasdf ./my_echo\");",
											"    }",
											"    else if (pm.response.text().includes(\"analysis\\\\tests\\\\dummy_tool.bat  asdfasdf my_echo\"))",
											"    {",
											"        pm.expect(pm.response.text()).to.include(\"analysis\\\\tests\\\\dummy_tool.bat  asdfasdf my_echo\");",
											"    }",
											"    else",
											"    {",
											"        pm.expect(false);",
											"    }",
											"});",
											"pm.test(\"returnCode should be 0\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<rdf:value>0</rdf:value>\");",
											"});",
											"pm.test(\"there should be a launchSUT output parameter with the expected value\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<oslc:name>launchSUT</oslc:name>\");",
											"    pm.expect(pm.response.text()).to.include(\"<rdf:value>2</rdf:value>\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/resources/automationResults/{{requestId}}",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"resources",
										"automationResults",
										"{{requestId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "buildCommand",
					"item": [
						{
							"name": "buildCommand",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response code should be 201 (created)\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"// save the request ID as a global variable for later tests to use",
											"const response = xml2Json(pm.response.text());",
											"var resrouceAbout = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"].$[\"rdf:about\"];",
											"var resourceAboutSplit = resrouceAbout.split(\"/\");",
											"var requestId = resourceAboutSplit[resourceAboutSplit.length-1];",
											"pm.globals.set('requestId', requestId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{server_address}}/{{server_context}}/services/resources/automationPlans/dummy\" />\n\t<dcterms:title>test</dcterms:title>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>arguments</oslc:name>\n\t\t\t<rdf:value>asdfasdf</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>SUT</oslc:name>\n\t\t\t<rdf:value>{{SUT}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>",
									"options": {
										"raw": {
											"language": "xml"
										}
									}
								},
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/resources/createAutomationRequest",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"resources",
										"createAutomationRequest"
									]
								}
							},
							"response": []
						},
						{
							"name": "wait for #complete (analysis/common input paramters/buildcommand)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var timeoutSeconds = pm.collectionVariables.get('automation_wait_time');",
											"",
											"var waitCounter = pm.globals.get(\"waitCounter\");",
											"if(!waitCounter) {",
											"    waitCounter = 0;",
											"}",
											"",
											"if (pm.response.code != 200) { // wait for the resource to be created",
											"    if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
											"        setTimeout(function(){}, [1000]); // 1 second",
											"        waitCounter++;",
											"        postman.setNextRequest(pm.info.requestName);",
											"    } else { // timeout, reset counter",
											"        waitCounter = 0;",
											"    }",
											"} else { // wait for the automation to complete",
											"    const response = xml2Json(pm.response.text());",
											"    var state = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"][\"oslc_auto:state\"].$[\"rdf:resource\"];",
											"    if (state == \"http://open-services.net/ns/auto#inProgress\") {",
											"        if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
											"            setTimeout(function(){}, [1000]); // 1 second",
											"            waitCounter++;",
											"            postman.setNextRequest(pm.info.requestName);",
											"        } else { // timeout, reset counter",
											"            waitCounter = 0;",
											"        }",
											"    } else { // wait doen, reset counter",
											"            waitCounter = 0;",
											"    }",
											"}",
											"",
											"pm.globals.set(\"waitCounter\", waitCounter);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/resources/automationRequests/{{requestId}}",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"resources",
										"automationRequests",
										"{{requestId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get result",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// get global variable to use in this test",
											"var requestId = pm.globals.get('requestId');",
											"var serverAddr = pm.variables.get(\"server_address\");",
											"var server_context = pm.variables.get(\"server_context\");",
											"var AutomationPlanId = pm.variables.get(\"AutomationPlanId\");",
											"var test_arguments = pm.variables.get(\"arguments\");",
											"var SUT = pm.variables.get(\"SUT\");",
											"",
											"pm.test(\"Response code should be 200 (OK)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"AutomationResult state should be #complete\", function () {",
											"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#new\\\"/>\");",
											"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#inProgress\\\"/>\");",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#complete\\\"/>\");",
											"});",
											"pm.test(\"AutomationResult verdict should be #passed\", function () {",
											"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:verdict rdf:resource=\\\"http://open-services.net/ns/auto#unavailable\\\"/>\");",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:verdict rdf:resource=\\\"http://open-services.net/ns/auto#passed\\\"/>\");",
											"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#error\\\"/>\");",
											"});",
											"pm.test(\"AutomationResult statusMessage should have the expected value\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Executing: \");",
											"    pm.expect(pm.response.text()).to.include(\"Analysis completed successfully\");",
											"    pm.expect(pm.response.text()).to.include(\"gcc -g TestEchoProgram.cpp -o my_echo\");",
											"});",
											"pm.test(\"returnCode should be 0\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<rdf:value>0</rdf:value>\");",
											"});",
											"pm.test(\"there should be a SUTbuildCommand output parameter with the expected value\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<oslc:name>SUTbuildCommand</oslc:name>\");",
											"    pm.expect(pm.response.text()).to.include(\"<rdf:value>2</rdf:value>\");",
											"});",
											"pm.test(\"there should be an output parameter with the buildCommand\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<rdf:value>3</rdf:value>\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/resources/automationResults/{{requestId}}",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"resources",
										"automationResults",
										"{{requestId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "toolCommand",
					"item": [
						{
							"name": "toolCommand",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Response code should be 201 (created)\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"",
											"// save the request ID as a global variable for later tests to use",
											"const response = xml2Json(pm.response.text());",
											"var resrouceAbout = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"].$[\"rdf:about\"];",
											"var resourceAboutSplit = resrouceAbout.split(\"/\");",
											"var requestId = resourceAboutSplit[resourceAboutSplit.length-1];",
											"pm.globals.set('requestId', requestId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{server_address}}/{{server_context}}/services/resources/automationPlans/dummy\" />\n\t<dcterms:title>test</dcterms:title>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>arguments</oslc:name>\n\t\t\t<rdf:value></rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>outputFileRegex</oslc:name>\n\t\t\t<rdf:value>.*</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>toolCommand</oslc:name>\n\t\t\t<rdf:value>false</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>SUT</oslc:name>\n\t\t\t<rdf:value>{{SUT}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>",
									"options": {
										"raw": {
											"language": "xml"
										}
									}
								},
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/resources/createAutomationRequest",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"resources",
										"createAutomationRequest"
									]
								}
							},
							"response": []
						},
						{
							"name": "wait for #complete (analysis/common input paramters/toolcommand)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var timeoutSeconds = pm.collectionVariables.get('automation_wait_time');",
											"",
											"var waitCounter = pm.globals.get(\"waitCounter\");",
											"if(!waitCounter) {",
											"    waitCounter = 0;",
											"}",
											"",
											"if (pm.response.code != 200) { // wait for the resource to be created",
											"    if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
											"        setTimeout(function(){}, [1000]); // 1 second",
											"        waitCounter++;",
											"        postman.setNextRequest(pm.info.requestName);",
											"    } else { // timeout, reset counter",
											"        waitCounter = 0;",
											"    }",
											"} else { // wait for the automation to complete",
											"    const response = xml2Json(pm.response.text());",
											"    var state = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"][\"oslc_auto:state\"].$[\"rdf:resource\"];",
											"    if (state == \"http://open-services.net/ns/auto#inProgress\") {",
											"        if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
											"            setTimeout(function(){}, [1000]); // 1 second",
											"            waitCounter++;",
											"            postman.setNextRequest(pm.info.requestName);",
											"        } else { // timeout, reset counter",
											"            waitCounter = 0;",
											"        }",
											"    } else { // wait doen, reset counter",
											"            waitCounter = 0;",
											"    }",
											"}",
											"",
											"pm.globals.set(\"waitCounter\", waitCounter);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/resources/automationRequests/{{requestId}}",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"resources",
										"automationRequests",
										"{{requestId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get result",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// get global variable to use in this test",
											"var requestId = pm.globals.get('requestId');",
											"var serverAddr = pm.variables.get(\"server_address\");",
											"var server_context = pm.variables.get(\"server_context\");",
											"var AutomationPlanId = pm.variables.get(\"AutomationPlanId\");",
											"var test_arguments = pm.variables.get(\"arguments\");",
											"var SUT = pm.variables.get(\"SUT\");",
											"",
											"",
											"pm.test(\"Response code should be 200 (OK)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"AutomationResult state should be #complete\", function () {",
											"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#new\\\"/>\");",
											"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#inProgress\\\"/>\");",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#complete\\\"/>\");",
											"});",
											"pm.test(\"AutomationResult verdict should be #passed\", function () {",
											"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:verdict rdf:resource=\\\"http://open-services.net/ns/auto#unavailable\\\"/>\");",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:verdict rdf:resource=\\\"http://open-services.net/ns/auto#passed\\\"/>\");",
											"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#error\\\"/>\");",
											"});",
											"pm.test(\"AutomationResult statusMessage should have the expected value\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Analysis completed successfully\");",
											"    ",
											"    if (pm.response.text().includes(\"Executing:    ./my_echo\"))",
											"    {",
											"        pm.expect(pm.response.text()).to.include(\"Executing:    ./my_echo\");",
											"    }",
											"    else if (pm.response.text().includes(\"Executing:    my_echo\"))",
											"    {",
											"        pm.expect(pm.response.text()).to.include(\"Executing:    my_echo\");",
											"    }",
											"    else",
											"    {",
											"        pm.expect(false);",
											"    }",
											"});",
											"pm.test(\"returnCode should be 0\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<rdf:value>0</rdf:value>\");",
											"});",
											"pm.test(\"AutomationResult analysis stderr be empty (~)\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<rdf:value></rdf:value>\");",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/resources/automationResults/{{requestId}}",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"resources",
										"automationResults",
										"{{requestId}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			]
		},
		{
			"name": "Bugs",
			"item": [
				{
					"name": "quotes",
					"item": [
						{
							"name": "create SUT using the compilation provider",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// save the request ID as a global variable for later tests to use -- used as SUT ID",
											"const response = xml2Json(pm.response.text());",
											"var resrouceAbout = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"].$[\"rdf:about\"];",
											"var resourceAboutSplit = resrouceAbout.split(\"/\");",
											"var requestId = resourceAboutSplit[resourceAboutSplit.length-1];",
											"pm.globals.set('requestId', requestId);",
											"",
											"",
											"pm.test(\"Response code should be 201 (created)\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"var compilation_provider = pm.variables.get(\"compilation_provider\");",
											"var sutId = requestId;",
											"pm.globals.set(\"SUT\", compilation_provider + \"/services/resources/sUTs/\" + sutId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/xml"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>analysis test</dcterms:title>\n\t<dcterms:description>analysis test</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{compilation_provider}}/services/resources/automationPlans/0\" />\n\t\n\t<oslc_auto:inputParameter>\n        <oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>sourceBase64</oslc:name>\n\t\t\t<rdf:value>TestEchoProgram.cpp\nI2luY2x1ZGUgPHN0ZGlvLmg+CgppbnQgbWFpbihpbnQgYXJnYywgY2hhcioqIGFyZ3YpCnsKCXByaW50ZigiJXNcbiIsIGFyZ3ZbMV0pOwoJcmV0dXJuIDA7Cn0K</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>buildCommand</oslc:name>\n\t\t\t<rdf:value>gcc -g TestEchoProgram.cpp -o my_echo</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>launchCommand</oslc:name>\n\t\t\t<rdf:value>./my_echo</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>"
								},
								"url": {
									"raw": "{{compilation_provider}}/services/resources/createAutomationRequest",
									"host": [
										"{{compilation_provider}}"
									],
									"path": [
										"services",
										"resources",
										"createAutomationRequest"
									]
								}
							},
							"response": []
						},
						{
							"name": "wait for #complete (analysis/bugs/quotes/create sut)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var timeoutSeconds = pm.collectionVariables.get('automation_wait_time');",
											"",
											"var waitCounter = pm.globals.get(\"waitCounter\");",
											"if(!waitCounter) {",
											"    waitCounter = 0;",
											"}",
											"",
											"if (pm.response.code != 200) { // wait for the resource to be created",
											"    if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
											"        setTimeout(function(){}, [1000]); // 1 second",
											"        waitCounter++;",
											"        postman.setNextRequest(pm.info.requestName);",
											"    } else { // timeout, reset counter",
											"        waitCounter = 0;",
											"    }",
											"} else { // wait for the automation to complete",
											"    const response = xml2Json(pm.response.text());",
											"    var state = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"][\"oslc_auto:state\"].$[\"rdf:resource\"];",
											"    if (state == \"http://open-services.net/ns/auto#inProgress\") {",
											"        if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
											"            setTimeout(function(){}, [1000]); // 1 second",
											"            waitCounter++;",
											"            postman.setNextRequest(pm.info.requestName);",
											"        } else { // timeout, reset counter",
											"            waitCounter = 0;",
											"        }",
											"    } else { // wait doen, reset counter",
											"            waitCounter = 0;",
											"    }",
											"}",
											"",
											"pm.globals.set(\"waitCounter\", waitCounter);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"url": {
									"raw": "{{compilation_provider}}/services/resources/automationRequests/{{requestId}}",
									"host": [
										"{{compilation_provider}}"
									],
									"path": [
										"services",
										"resources",
										"automationRequests",
										"{{requestId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "create request",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response code should be 201 (created)\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"",
											"// save the request ID as a global variable for later tests to use",
											"const response = xml2Json(pm.response.text());",
											"var resrouceAbout = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"].$[\"rdf:about\"];",
											"var resourceAboutSplit = resrouceAbout.split(\"/\");",
											"var requestId = resourceAboutSplit[resourceAboutSplit.length-1];",
											"pm.globals.set('requestId', requestId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/xml"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>test</dcterms:title>\n\t<dcterms:description>test</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{server_address}}/{{server_context}}/services/resources/automationPlans/dummy\" />\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>arguments</oslc:name>\n\t\t\t<rdf:value>\"Hello World!\"</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>SUT</oslc:name>\n\t\t\t<rdf:value>{{SUT}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>"
								},
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/resources/createAutomationRequest",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"resources",
										"createAutomationRequest"
									]
								}
							},
							"response": []
						},
						{
							"name": "wait for #complete (analysis/bugs/quotes)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var timeoutSeconds = pm.collectionVariables.get('automation_wait_time');",
											"",
											"var waitCounter = pm.globals.get(\"waitCounter\");",
											"if(!waitCounter) {",
											"    waitCounter = 0;",
											"}",
											"",
											"if (pm.response.code != 200) { // wait for the resource to be created",
											"    if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
											"        setTimeout(function(){}, [1000]); // 1 second",
											"        waitCounter++;",
											"        postman.setNextRequest(pm.info.requestName);",
											"    } else { // timeout, reset counter",
											"        waitCounter = 0;",
											"    }",
											"} else { // wait for the automation to complete",
											"    const response = xml2Json(pm.response.text());",
											"    var state = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"][\"oslc_auto:state\"].$[\"rdf:resource\"];",
											"    if (state == \"http://open-services.net/ns/auto#inProgress\") {",
											"        if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
											"            setTimeout(function(){}, [1000]); // 1 second",
											"            waitCounter++;",
											"            postman.setNextRequest(pm.info.requestName);",
											"        } else { // timeout, reset counter",
											"            waitCounter = 0;",
											"        }",
											"    } else { // wait doen, reset counter",
											"            waitCounter = 0;",
											"    }",
											"}",
											"",
											"pm.globals.set(\"waitCounter\", waitCounter);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/resources/automationRequests/{{requestId}}",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"resources",
										"automationRequests",
										"{{requestId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "check result",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response code should be 200 (OK)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"AutomationResult state should be #complete\", function () {",
											"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#new\\\"/>\");",
											"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#inProgress\\\"/>\");",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#complete\\\"/>\");",
											"});",
											"pm.test(\"AutomationResult verdict should be #passed\", function () {",
											"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:verdict rdf:resource=\\\"http://open-services.net/ns/auto#unavailable\\\"/>\");",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:verdict rdf:resource=\\\"http://open-services.net/ns/auto#passed\\\"/>\");",
											"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#error\\\"/>\");",
											"});",
											"",
											"pm.test(\"AutomationResult statusMessage should have the expected value\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Executing: \");",
											"    pm.expect(pm.response.text()).to.include(\"Analysis completed successfully\");",
											"});",
											"pm.test(\"returnCode should be 0\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<rdf:value>0</rdf:value>\");",
											"});",
											"pm.test(\"stdout should have the expected value\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Your argument: Hello World!\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/resources/automationResults/{{requestId}}",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"resources",
										"automationResults",
										"{{requestId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "multiple commands",
					"item": [
						{
							"name": "create SUT using the compilation provider",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// save the request ID as a global variable for later tests to use -- used as SUT ID",
											"const response = xml2Json(pm.response.text());",
											"var resrouceAbout = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"].$[\"rdf:about\"];",
											"var resourceAboutSplit = resrouceAbout.split(\"/\");",
											"var requestId = resourceAboutSplit[resourceAboutSplit.length-1];",
											"pm.globals.set('requestId', requestId);",
											"",
											"",
											"pm.test(\"Response code should be 201 (created)\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"var compilation_provider = pm.variables.get(\"compilation_provider\");",
											"var sutId = requestId;",
											"pm.globals.set(\"SUT\", compilation_provider + \"/services/resources/sUTs/\" + sutId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/xml"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>analysis test</dcterms:title>\n\t<dcterms:description>analysis test</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{compilation_provider}}/services/resources/automationPlans/0\" />\n\t\n\t<oslc_auto:inputParameter>\n        <oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>sourceBase64</oslc:name>\n\t\t\t<rdf:value>TestEchoProgram.cpp\nI2luY2x1ZGUgPHN0ZGlvLmg+CgppbnQgbWFpbihpbnQgYXJnYywgY2hhcioqIGFyZ3YpCnsKCXByaW50ZigiJXNcbiIsIGFyZ3ZbMV0pOwoJcmV0dXJuIDA7Cn0K</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>buildCommand</oslc:name>\n\t\t\t<rdf:value>gcc -g TestEchoProgram.cpp -o my_echo</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>launchCommand</oslc:name>\n\t\t\t<rdf:value>ls ; echo \"testing\" ; cat TestEchoProgram.cpp ; </rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>"
								},
								"url": {
									"raw": "{{compilation_provider}}/services/resources/createAutomationRequest",
									"host": [
										"{{compilation_provider}}"
									],
									"path": [
										"services",
										"resources",
										"createAutomationRequest"
									]
								}
							},
							"response": []
						},
						{
							"name": "wait for #complete (analysis/bugs/multiple commands/create sut)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var timeoutSeconds = pm.collectionVariables.get('automation_wait_time');",
											"",
											"var waitCounter = pm.globals.get(\"waitCounter\");",
											"if(!waitCounter) {",
											"    waitCounter = 0;",
											"}",
											"",
											"if (pm.response.code != 200) { // wait for the resource to be created",
											"    if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
											"        setTimeout(function(){}, [1000]); // 1 second",
											"        waitCounter++;",
											"        postman.setNextRequest(pm.info.requestName);",
											"    } else { // timeout, reset counter",
											"        waitCounter = 0;",
											"    }",
											"} else { // wait for the automation to complete",
											"    const response = xml2Json(pm.response.text());",
											"    var state = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"][\"oslc_auto:state\"].$[\"rdf:resource\"];",
											"    if (state == \"http://open-services.net/ns/auto#inProgress\") {",
											"        if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
											"            setTimeout(function(){}, [1000]); // 1 second",
											"            waitCounter++;",
											"            postman.setNextRequest(pm.info.requestName);",
											"        } else { // timeout, reset counter",
											"            waitCounter = 0;",
											"        }",
											"    } else { // wait doen, reset counter",
											"            waitCounter = 0;",
											"    }",
											"}",
											"",
											"pm.globals.set(\"waitCounter\", waitCounter);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"url": {
									"raw": "{{compilation_provider}}/services/resources/automationRequests/{{requestId}}",
									"host": [
										"{{compilation_provider}}"
									],
									"path": [
										"services",
										"resources",
										"automationRequests",
										"{{requestId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "create request",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response code should be 201 (created)\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"",
											"// save the request ID as a global variable for later tests to use",
											"const response = xml2Json(pm.response.text());",
											"var resrouceAbout = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"].$[\"rdf:about\"];",
											"var resourceAboutSplit = resrouceAbout.split(\"/\");",
											"var requestId = resourceAboutSplit[resourceAboutSplit.length-1];",
											"pm.globals.set('requestId', requestId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/xml"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>test</dcterms:title>\n\t<dcterms:description>test</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{server_address}}/{{server_context}}/services/resources/automationPlans/dummy\" />\n    \n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>toolCommand</oslc:name>\n\t\t\t<rdf:value>false</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n    \n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>arguments</oslc:name>\n\t\t\t<rdf:value></rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>SUT</oslc:name>\n\t\t\t<rdf:value>{{SUT}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>"
								},
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/resources/createAutomationRequest",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"resources",
										"createAutomationRequest"
									]
								}
							},
							"response": []
						},
						{
							"name": "wait for #complete (analysis/bugs/multiple commands)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var timeoutSeconds = pm.collectionVariables.get('automation_wait_time');",
											"",
											"var waitCounter = pm.globals.get(\"waitCounter\");",
											"if(!waitCounter) {",
											"    waitCounter = 0;",
											"}",
											"",
											"if (pm.response.code != 200) { // wait for the resource to be created",
											"    if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
											"        setTimeout(function(){}, [1000]); // 1 second",
											"        waitCounter++;",
											"        postman.setNextRequest(pm.info.requestName);",
											"    } else { // timeout, reset counter",
											"        waitCounter = 0;",
											"    }",
											"} else { // wait for the automation to complete",
											"    const response = xml2Json(pm.response.text());",
											"    var state = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"][\"oslc_auto:state\"].$[\"rdf:resource\"];",
											"    if (state == \"http://open-services.net/ns/auto#inProgress\") {",
											"        if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
											"            setTimeout(function(){}, [1000]); // 1 second",
											"            waitCounter++;",
											"            postman.setNextRequest(pm.info.requestName);",
											"        } else { // timeout, reset counter",
											"            waitCounter = 0;",
											"        }",
											"    } else { // wait doen, reset counter",
											"            waitCounter = 0;",
											"    }",
											"}",
											"",
											"pm.globals.set(\"waitCounter\", waitCounter);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/resources/automationRequests/{{requestId}}",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"resources",
										"automationRequests",
										"{{requestId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "check result",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response code should be 200 (OK)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"AutomationResult state should be #complete\", function () {",
											"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#new\\\"/>\");",
											"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#inProgress\\\"/>\");",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#complete\\\"/>\");",
											"});",
											"pm.test(\"AutomationResult verdict should be #passed\", function () {",
											"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:verdict rdf:resource=\\\"http://open-services.net/ns/auto#unavailable\\\"/>\");",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:verdict rdf:resource=\\\"http://open-services.net/ns/auto#passed\\\"/>\");",
											"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#error\\\"/>\");",
											"});",
											"",
											"pm.test(\"AutomationResult statusMessage should have the expected value\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Executing: \");",
											"    pm.expect(pm.response.text()).to.include(\"Analysis completed successfully\");",
											"});",
											"pm.test(\"returnCode should be 0\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<rdf:value>0</rdf:value>\");",
											"});",
											"pm.test(\"stdout should have the expected value\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"int main(int argc, char** argv)\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/resources/automationResults/{{requestId}}",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"resources",
										"automationResults",
										"{{requestId}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Special features",
			"item": [
				{
					"name": "GET and PUT file contents as Contribution",
					"item": [
						{
							"name": "create SUT using the compilation provider",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// save the request ID as a global variable for later tests to use -- used as SUT ID",
											"const response = xml2Json(pm.response.text());",
											"var resrouceAbout = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"].$[\"rdf:about\"];",
											"var resourceAboutSplit = resrouceAbout.split(\"/\");",
											"var requestId = resourceAboutSplit[resourceAboutSplit.length-1];",
											"pm.globals.set('requestId', requestId);",
											"",
											"",
											"pm.test(\"Response code should be 201 (created)\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"var compilation_provider = pm.variables.get(\"compilation_provider\");",
											"var sutId = requestId;",
											"pm.globals.set(\"SUT\", compilation_provider + \"/services/resources/sUTs/\" + sutId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/xml"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>analysis test</dcterms:title>\n\t<dcterms:description>analysis test</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{compilation_provider}}/services/resources/automationPlans/0\" />\n\t\n\t<oslc_auto:inputParameter>\n        <oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>sourceBase64</oslc:name>\n\t\t\t<rdf:value>TestEchoProgram.cpp\nI2luY2x1ZGUgPHN0ZGlvLmg+CgppbnQgbWFpbihpbnQgYXJnYywgY2hhcioqIGFyZ3YpCnsKCXByaW50ZigiJXNcbiIsIGFyZ3ZbMV0pOwoJcmV0dXJuIDA7Cn0K</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>buildCommand</oslc:name>\n\t\t\t<rdf:value>gcc -g TestEchoProgram.cpp -o my_echo</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>launchCommand</oslc:name>\n\t\t\t<rdf:value>./my_echo</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>"
								},
								"url": {
									"raw": "{{compilation_provider}}/services/resources/createAutomationRequest",
									"host": [
										"{{compilation_provider}}"
									],
									"path": [
										"services",
										"resources",
										"createAutomationRequest"
									]
								}
							},
							"response": []
						},
						{
							"name": "wait for #complete (analysis/special features/get and put file contents as contribution/create sut)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var timeoutSeconds = pm.collectionVariables.get('automation_wait_time');",
											"",
											"var waitCounter = pm.globals.get(\"waitCounter\");",
											"if(!waitCounter) {",
											"    waitCounter = 0;",
											"}",
											"",
											"if (pm.response.code != 200) { // wait for the resource to be created",
											"    if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
											"        setTimeout(function(){}, [1000]); // 1 second",
											"        waitCounter++;",
											"        postman.setNextRequest(pm.info.requestName);",
											"    } else { // timeout, reset counter",
											"        waitCounter = 0;",
											"    }",
											"} else { // wait for the automation to complete",
											"    const response = xml2Json(pm.response.text());",
											"    var state = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"][\"oslc_auto:state\"].$[\"rdf:resource\"];",
											"    if (state == \"http://open-services.net/ns/auto#inProgress\") {",
											"        if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
											"            setTimeout(function(){}, [1000]); // 1 second",
											"            waitCounter++;",
											"            postman.setNextRequest(pm.info.requestName);",
											"        } else { // timeout, reset counter",
											"            waitCounter = 0;",
											"        }",
											"    } else { // wait doen, reset counter",
											"            waitCounter = 0;",
											"    }",
											"}",
											"",
											"pm.globals.set(\"waitCounter\", waitCounter);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"url": {
									"raw": "{{compilation_provider}}/services/resources/automationRequests/{{requestId}}",
									"host": [
										"{{compilation_provider}}"
									],
									"path": [
										"services",
										"resources",
										"automationRequests",
										"{{requestId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "run a analysis on the SUT",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response code should be 201 (created)\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"// save the request ID as a global variable for later tests to use",
											"const response = xml2Json(pm.response.text());",
											"var resrouceAbout = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"].$[\"rdf:about\"];",
											"var resourceAboutSplit = resrouceAbout.split(\"/\");",
											"var requestId = resourceAboutSplit[resourceAboutSplit.length-1];",
											"pm.globals.set('requestId', requestId);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/xml"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>Test title</dcterms:title>\n\t<dcterms:description>Test description</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{server_address}}/{{server_context}}/services/resources/automationPlans/dummy\" />\n\t<dcterms:creator rdf:resource=\"https://pajda.fit.vutbr.cz/xvasic\"/>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>arguments</oslc:name>\n\t\t\t<rdf:value>test_arguments</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>SUT</oslc:name>\n\t\t\t<rdf:value>{{SUT}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>outputFileRegex</oslc:name>\n\t\t\t<rdf:value>.*</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>"
								},
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/resources/createAutomationRequest",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"resources",
										"createAutomationRequest"
									]
								}
							},
							"response": []
						},
						{
							"name": "wait for #complete (analysis/bugs/analyse)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var timeoutSeconds = pm.collectionVariables.get('automation_wait_time');",
											"",
											"var waitCounter = pm.globals.get(\"waitCounter\");",
											"if(!waitCounter) {",
											"    waitCounter = 0;",
											"}",
											"",
											"if (pm.response.code != 200) { // wait for the resource to be created",
											"    if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
											"        setTimeout(function(){}, [1000]); // 1 second",
											"        waitCounter++;",
											"        postman.setNextRequest(pm.info.requestName);",
											"    } else { // timeout, reset counter",
											"        waitCounter = 0;",
											"    }",
											"} else { // wait for the automation to complete",
											"    const response = xml2Json(pm.response.text());",
											"    var state = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"][\"oslc_auto:state\"].$[\"rdf:resource\"];",
											"    if (state == \"http://open-services.net/ns/auto#inProgress\") {",
											"        if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
											"            setTimeout(function(){}, [1000]); // 1 second",
											"            waitCounter++;",
											"            postman.setNextRequest(pm.info.requestName);",
											"        } else { // timeout, reset counter",
											"            waitCounter = 0;",
											"        }",
											"    } else { // wait doen, reset counter",
											"            waitCounter = 0;",
											"    }",
											"}",
											"",
											"pm.globals.set(\"waitCounter\", waitCounter);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/resources/automationRequests/{{requestId}}",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"resources",
										"automationRequests",
										"{{requestId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get AutomatinResult to find file URI",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// save the URI of a file contribution for upcomming requests by finding the right one basend on its title and then getting its fileURI",
											"const response = xml2Json(pm.response.text());",
											"var allContributions = response[\"rdf:RDF\"][\"oslc_auto:AutomationResult\"][\"oslc_auto:contribution\"];",
											"var contribIdx;",
											"var i;",
											"for (i = 0; i < allContributions.length; i++) {",
											"  var title = allContributions[i][\"oslc_auto:Contribution\"][\"dcterms:title\"]._;",
											"  if (title == \"file1\")",
											"  {",
											"    contribIdx = i;",
											"    break;",
											"  }",
											"}",
											"var contributionFileUri = allContributions[contribIdx][\"oslc_auto:Contribution\"][\"fit:fileURI\"].$[\"rdf:resource\"];",
											"pm.globals.set('contributionFileUri', contributionFileUri);",
											"",
											"",
											"pm.test(\"Response code should be 200 (OK)\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/resources/automationResults/{{requestId}}",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"resources",
										"automationResults",
										"{{requestId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET file contents as Contribution",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response code should be 200 (OK)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"File should contain the expected text\", function () {",
											"    pm.expect(pm.response.text()).to.contain(\"test file\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/octet-stream",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{contributionFileUri}}",
									"host": [
										"{{contributionFileUri}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT file contents as Contribution",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response code should be 200 (OK)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/octet-stream",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "updated file contents",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{contributionFileUri}}",
									"host": [
										"{{contributionFileUri}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET file contents to check updated value",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response code should be 200 (OK)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"File should contain the expected text\", function () {",
											"    pm.expect(pm.response.text()).to.equal(\"updated file contents\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/octet-stream"
									}
								],
								"url": {
									"raw": "{{contributionFileUri}}",
									"host": [
										"{{contributionFileUri}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			]
		},
		{
			"name": "Query Capability",
			"item": [
				{
					"name": "pre init some resources",
					"item": [
						{
							"name": "create SUT using the compilation provider",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// save the request ID as a global variable for later tests to use -- used as SUT ID",
											"const response = xml2Json(pm.response.text());",
											"var resrouceAbout = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"].$[\"rdf:about\"];",
											"var resourceAboutSplit = resrouceAbout.split(\"/\");",
											"var requestId = resourceAboutSplit[resourceAboutSplit.length-1];",
											"pm.globals.set('requestId', requestId);",
											"",
											"",
											"pm.test(\"Response code should be 201 (created)\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"var compilation_provider = pm.variables.get(\"compilation_provider\");",
											"var sutId = requestId;",
											"pm.globals.set(\"SUT\", compilation_provider + \"/services/resources/sUTs/\" + sutId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/xml"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>analysis test</dcterms:title>\n\t<dcterms:description>analysis test</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{compilation_provider}}/services/resources/automationPlans/0\" />\n\t\n\t<oslc_auto:inputParameter>\n        <oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>sourceBase64</oslc:name>\n\t\t\t<rdf:value>TestEchoProgram.cpp\nI2luY2x1ZGUgPHN0ZGlvLmg+CgppbnQgbWFpbihpbnQgYXJnYywgY2hhcioqIGFyZ3YpCnsKCXByaW50ZigiJXNcbiIsIGFyZ3ZbMV0pOwoJcmV0dXJuIDA7Cn0K</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>buildCommand</oslc:name>\n\t\t\t<rdf:value>gcc -g TestEchoProgram.cpp -o my_echo</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>launchCommand</oslc:name>\n\t\t\t<rdf:value>./my_echo</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>"
								},
								"url": {
									"raw": "{{compilation_provider}}/services/resources/createAutomationRequest",
									"host": [
										"{{compilation_provider}}"
									],
									"path": [
										"services",
										"resources",
										"createAutomationRequest"
									]
								}
							},
							"response": []
						},
						{
							"name": "create AutomationRequest",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// setup global variables for future requests (GETs)",
											"// attempt to make this sequence of requests into a template that can then be change in this place to change the test",
											"",
											"pm.globals.set(\"AutomationPlanId\", \"dummy\");",
											"",
											"pm.globals.set(\"arguments\", \"test_arguments\");",
											"",
											"pm.globals.set(\"reqCreator\", \"https://pajda.fit.vutbr.cz/xvasic\");",
											"pm.globals.set(\"reqTitle\", \"Test title\");",
											"pm.globals.set(\"reqDescription\", \"Test description\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/xml"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>special title for search term query</dcterms:title>\n\t<dcterms:description>{{reqDescription}}</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{server_address}}/{{server_context}}/services/resources/automationPlans/{{AutomationPlanId}}\" />\n\t<dcterms:creator rdf:resource=\"{{reqCreator}}\"/>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>arguments</oslc:name>\n\t\t\t<rdf:value>{{arguments}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>SUT</oslc:name>\n\t\t\t<rdf:value>{{SUT}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>"
								},
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/resources/createAutomationRequest",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"resources",
										"createAutomationRequest"
									]
								}
							},
							"response": []
						},
						{
							"name": "create AutomationRequest Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/xml"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>special title for search term query</dcterms:title>\n\t<dcterms:description>{{reqDescription}}</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{server_address}}/{{server_context}}/services/resources/automationPlans/{{AutomationPlanId}}\" />\n\t<dcterms:creator rdf:resource=\"{{reqCreator}}\"/>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>arguments</oslc:name>\n\t\t\t<rdf:value>{{arguments}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>SUT</oslc:name>\n\t\t\t<rdf:value>{{SUT}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>"
								},
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/resources/createAutomationRequest",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"resources",
										"createAutomationRequest"
									]
								}
							},
							"response": []
						},
						{
							"name": "create AutomationRequest Copy 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/xml"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>special title for search term query</dcterms:title>\n\t<dcterms:description>{{reqDescription}}</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{server_address}}/{{server_context}}/services/resources/automationPlans/{{AutomationPlanId}}\" />\n\t<dcterms:creator rdf:resource=\"{{reqCreator}}\"/>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>arguments</oslc:name>\n\t\t\t<rdf:value>{{arguments}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>SUT</oslc:name>\n\t\t\t<rdf:value>{{SUT}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>"
								},
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/resources/createAutomationRequest",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"resources",
										"createAutomationRequest"
									]
								}
							},
							"response": []
						},
						{
							"name": "create AutomationRequest Copy 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/xml"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>special title for search term query</dcterms:title>\n\t<dcterms:description>{{reqDescription}}</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{server_address}}/{{server_context}}/services/resources/automationPlans/{{AutomationPlanId}}\" />\n\t<dcterms:creator rdf:resource=\"{{reqCreator}}\"/>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>arguments</oslc:name>\n\t\t\t<rdf:value>{{arguments}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>SUT</oslc:name>\n\t\t\t<rdf:value>{{SUT}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>"
								},
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/resources/createAutomationRequest",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"resources",
										"createAutomationRequest"
									]
								}
							},
							"response": []
						},
						{
							"name": "create AutomationRequest Copy 4",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/xml"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>special title for search term query</dcterms:title>\n\t<dcterms:description>{{reqDescription}}</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{server_address}}/{{server_context}}/services/resources/automationPlans/{{AutomationPlanId}}\" />\n\t<dcterms:creator rdf:resource=\"{{reqCreator}}\"/>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>arguments</oslc:name>\n\t\t\t<rdf:value>{{arguments}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>SUT</oslc:name>\n\t\t\t<rdf:value>{{SUT}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>"
								},
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/resources/createAutomationRequest",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"resources",
										"createAutomationRequest"
									]
								}
							},
							"response": []
						},
						{
							"name": "create AutomationRequest Copy 5",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/xml"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>special title for search term query</dcterms:title>\n\t<dcterms:description>{{reqDescription}}</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{server_address}}/{{server_context}}/services/resources/automationPlans/{{AutomationPlanId}}\" />\n\t<dcterms:creator rdf:resource=\"{{reqCreator}}\"/>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>arguments</oslc:name>\n\t\t\t<rdf:value>{{arguments}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>SUT</oslc:name>\n\t\t\t<rdf:value>{{SUT}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>"
								},
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/resources/createAutomationRequest",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"resources",
										"createAutomationRequest"
									]
								}
							},
							"response": []
						},
						{
							"name": "create AutomationRequest Copy 6",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/xml"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>special title for search term query</dcterms:title>\n\t<dcterms:description>{{reqDescription}}</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{server_address}}/{{server_context}}/services/resources/automationPlans/{{AutomationPlanId}}\" />\n\t<dcterms:creator rdf:resource=\"{{reqCreator}}\"/>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>arguments</oslc:name>\n\t\t\t<rdf:value>{{arguments}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>SUT</oslc:name>\n\t\t\t<rdf:value>{{SUT}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>"
								},
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/resources/createAutomationRequest",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"resources",
										"createAutomationRequest"
									]
								}
							},
							"response": []
						},
						{
							"name": "create AutomationRequest Copy 7",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/xml"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>special title for search term query</dcterms:title>\n\t<dcterms:description>{{reqDescription}}</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{server_address}}/{{server_context}}/services/resources/automationPlans/{{AutomationPlanId}}\" />\n\t<dcterms:creator rdf:resource=\"{{reqCreator}}\"/>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>arguments</oslc:name>\n\t\t\t<rdf:value>{{arguments}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>SUT</oslc:name>\n\t\t\t<rdf:value>{{SUT}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>"
								},
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/resources/createAutomationRequest",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"resources",
										"createAutomationRequest"
									]
								}
							},
							"response": []
						},
						{
							"name": "create AutomationRequest Copy 8",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/xml"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>special title for search term query</dcterms:title>\n\t<dcterms:description>{{reqDescription}}</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{server_address}}/{{server_context}}/services/resources/automationPlans/{{AutomationPlanId}}\" />\n\t<dcterms:creator rdf:resource=\"{{reqCreator}}\"/>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>arguments</oslc:name>\n\t\t\t<rdf:value>{{arguments}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>SUT</oslc:name>\n\t\t\t<rdf:value>{{SUT}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>"
								},
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/resources/createAutomationRequest",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"resources",
										"createAutomationRequest"
									]
								}
							},
							"response": []
						},
						{
							"name": "create AutomationRequest Copy 9",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/xml"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>special title for search term query</dcterms:title>\n\t<dcterms:description>{{reqDescription}}</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{server_address}}/{{server_context}}/services/resources/automationPlans/{{AutomationPlanId}}\" />\n\t<dcterms:creator rdf:resource=\"{{reqCreator}}\"/>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>arguments</oslc:name>\n\t\t\t<rdf:value>{{arguments}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>SUT</oslc:name>\n\t\t\t<rdf:value>{{SUT}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>"
								},
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/resources/createAutomationRequest",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"resources",
										"createAutomationRequest"
									]
								}
							},
							"response": []
						},
						{
							"name": "create AutomationRequest Copy 10",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/xml"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>special title for search term query</dcterms:title>\n\t<dcterms:description>{{reqDescription}}</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{server_address}}/{{server_context}}/services/resources/automationPlans/{{AutomationPlanId}}\" />\n\t<dcterms:creator rdf:resource=\"{{reqCreator}}\"/>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>arguments</oslc:name>\n\t\t\t<rdf:value>{{arguments}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>SUT</oslc:name>\n\t\t\t<rdf:value>{{SUT}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>"
								},
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/resources/createAutomationRequest",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"resources",
										"createAutomationRequest"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Query parameters",
					"item": [
						{
							"name": "limit",
							"item": [
								{
									"name": "query no limit",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var requestId = pm.globals.get('requestId');",
													"",
													"pm.test(\"Response code should be 200 (OK)\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Check the query result\", function () {",
													"    pm.expect(pm.response.text()).to.not.include(\">0</oslc:totalCount>\");",
													"    pm.expect(pm.response.text()).to.not.include(\">1</oslc:totalCount>\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/rdf+xml",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/resources/queryAutomationResult",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"resources",
												"queryAutomationResult"
											]
										}
									},
									"response": []
								},
								{
									"name": "query with limit",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var requestId = pm.globals.get('requestId');",
													"",
													"pm.test(\"Response code should be 200 (OK)\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Check the query result\", function () {",
													"    pm.expect(pm.response.text()).to.include(\">1</oslc:totalCount>\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/resources/queryAutomationResult?limit=1",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"resources",
												"queryAutomationResult"
											],
											"query": [
												{
													"key": "limit",
													"value": "1"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "page",
							"item": [
								{
									"name": "query no page",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var requestId = pm.globals.get('requestId');",
													"",
													"pm.test(\"Response code should be 200 (OK)\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Check the query result\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"<dcterms:identifier>dummy</dcterms:identifier>\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/resources/queryAutomationPlan",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"resources",
												"queryAutomationPlan"
											]
										}
									},
									"response": []
								},
								{
									"name": "query with page",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var requestId = pm.globals.get('requestId');",
													"",
													"pm.test(\"Response code should be 200 (OK)\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Check the query result\", function () {",
													"    pm.expect(pm.response.text()).to.not.include(\"Dummy Tool\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/resources/queryAutomationPlan?page=1",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"resources",
												"queryAutomationPlan"
											],
											"query": [
												{
													"key": "page",
													"value": "1"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "where",
							"item": [
								{
									"name": "query with where",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response code should be 200 (OK)\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Check the query result\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"<dcterms:identifier>dummy</dcterms:identifier>\");",
													"    pm.expect(pm.response.text()).to.include(\">1</oslc:totalCount>\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/resources/queryAutomationPlan?oslc.prefix=dcterms=<http://purl.org/dc/terms/>&oslc.where=dcterms:identifier=\"dummy\"",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"resources",
												"queryAutomationPlan"
											],
											"query": [
												{
													"key": "oslc.prefix",
													"value": "dcterms=<http://purl.org/dc/terms/>"
												},
												{
													"key": "oslc.where",
													"value": "dcterms:identifier=\"dummy\""
												}
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "query AutomationPlans",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response code should be 200 (OK)\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"The result should not be empty\", function () {",
									"    pm.expect(pm.response.text()).to.not.include(\">0</oslc:totalCount>\");",
									"});",
									"",
									"pm.test(\"The result should contain AutomationPlans resources\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"oslc_auto:AutomationPlan\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/rdf+xml"
							}
						],
						"url": {
							"raw": "{{server_address}}/{{server_context}}/services/resources/queryAutomationPlan",
							"host": [
								"{{server_address}}"
							],
							"path": [
								"{{server_context}}",
								"services",
								"resources",
								"queryAutomationPlan"
							],
							"query": [
								{
									"key": "oslc.prefix",
									"value": "dcterms=<http://purl.org/dc/terms/>",
									"disabled": true
								},
								{
									"key": "oslc.where",
									"value": "dcterms:identifier=\"0\"",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "query AutomationRequests",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var requestId = pm.globals.get('requestId');",
									"",
									"pm.test(\"Response code should be 200 (OK)\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"The result should not be empty\", function () {",
									"    pm.expect(pm.response.text()).to.not.include(\">0</oslc:totalCount>\");",
									"});",
									"",
									"pm.test(\"The result should contain AutomationRequest resources\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"oslc_auto:AutomationRequest\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/rdf+xml",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{server_address}}/{{server_context}}/services/resources/queryAutomationRequest",
							"host": [
								"{{server_address}}"
							],
							"path": [
								"{{server_context}}",
								"services",
								"resources",
								"queryAutomationRequest"
							]
						}
					},
					"response": []
				},
				{
					"name": "query AutomationResults",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var requestId = pm.globals.get('requestId');",
									"",
									"pm.test(\"Response code should be 200 (OK)\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"The result should not be empty\", function () {",
									"    pm.expect(pm.response.text()).to.not.include(\">0</oslc:totalCount>\");",
									"});",
									"",
									"pm.test(\"The result should contain AutomationResult resources\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"oslc_auto:AutomationResult\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/rdf+xml",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{server_address}}/{{server_context}}/services/resources/queryAutomationResult",
							"host": [
								"{{server_address}}"
							],
							"path": [
								"{{server_context}}",
								"services",
								"resources",
								"queryAutomationResult"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "basic",
		"basic": [
			{
				"key": "password",
				"value": "{{password}}",
				"type": "string"
			},
			{
				"key": "username",
				"value": "{{username}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "server_address",
			"value": "http://localhost:8080"
		},
		{
			"key": "server_context",
			"value": "analysis"
		},
		{
			"key": "compilation_provider",
			"value": "http://localhost:8081/compilation"
		},
		{
			"key": "username",
			"value": "user"
		},
		{
			"key": "password",
			"value": "user"
		},
		{
			"key": "automation_wait_time",
			"value": "30"
		}
	]
}