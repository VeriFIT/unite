{
	"info": {
		"_postman_id": "04a34964-e42d-466d-8d0a-4b8cf17ac6eb",
		"name": "Analysis Tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "get OS to adjust the test suite",
			"item": [
				{
					"name": "get OS",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response code should be 200 (OK)\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.globals.set(\"currentOS\", pm.response.text());"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{server_address}}/{{server_context}}/services/resources/getOS",
							"host": [
								"{{server_address}}"
							],
							"path": [
								"{{server_context}}",
								"services",
								"resources",
								"getOS"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Core Funcionality",
			"item": [
				{
					"name": "basic use case",
					"item": [
						{
							"name": "create SUT using the compilation provider",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// save the request ID as a global variable for later tests to use -- used as SUT ID",
											"const response = xml2Json(pm.response.text());",
											"var resrouceAbout = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"].$[\"rdf:about\"];",
											"var resourceAboutSplit = resrouceAbout.split(\"/\");",
											"var requestId = resourceAboutSplit[resourceAboutSplit.length-1];",
											"pm.globals.set('requestId', requestId);",
											"",
											"",
											"pm.test(\"Response code should be 201 (created)\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"var compilation_provider = pm.variables.get(\"compilation_provider\");",
											"var sutId = requestId;",
											"pm.globals.set(\"SUT\", compilation_provider + \"/services/resources/sUTs/\" + sutId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/xml"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>analysis test</dcterms:title>\n\t<dcterms:description>analysis test</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{compilation_provider}}/services/resources/automationPlans/0\" />\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>sourceBase64</oslc:name>\n\t\t\t<rdf:value>TestEchoProgram.cpp\nI2luY2x1ZGUgPHN0ZGlvLmg+CgppbnQgbWFpbihpbnQgYXJnYywgY2hhcioqIGFyZ3YpCnsKCXByaW50ZigiJXNcbiIsIGFyZ3ZbMV0pOwoJcmV0dXJuIDA7Cn0K</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>buildCommand</oslc:name>\n\t\t\t<rdf:value>gcc -g TestEchoProgram.cpp -o my_echo</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>launchCommand</oslc:name>\n\t\t\t<rdf:value>./my_echo</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>"
								},
								"url": {
									"raw": "{{compilation_provider}}/services/resources/createAutomationRequest",
									"host": [
										"{{compilation_provider}}"
									],
									"path": [
										"services",
										"resources",
										"createAutomationRequest"
									]
								}
							},
							"response": []
						},
						{
							"name": "wait for #complete (analysis/core functionality/basic use case/create sut)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var timeoutSeconds = pm.collectionVariables.get('automation_wait_time');",
											"",
											"var waitCounter = pm.globals.get(\"waitCounter\");",
											"if(!waitCounter) {",
											"    waitCounter = 0;",
											"}",
											"",
											"if (pm.response.code != 200) { // wait for the resource to be created",
											"    if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
											"        setTimeout(function(){}, [1000]); // 1 second",
											"        waitCounter++;",
											"        postman.setNextRequest(pm.info.requestName);",
											"    } else { // timeout, reset counter",
											"        waitCounter = 0;",
											"    }",
											"} else { // wait for the automation to complete",
											"    const response = xml2Json(pm.response.text());",
											"    var state = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"][\"oslc_auto:state\"].$[\"rdf:resource\"];",
											"    if (state == \"http://open-services.net/ns/auto#inProgress\") {",
											"        if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
											"            setTimeout(function(){}, [1000]); // 1 second",
											"            waitCounter++;",
											"            postman.setNextRequest(pm.info.requestName);",
											"        } else { // timeout, reset counter",
											"            waitCounter = 0;",
											"        }",
											"    } else { // wait doen, reset counter",
											"            waitCounter = 0;",
											"    }",
											"}",
											"",
											"pm.globals.set(\"waitCounter\", waitCounter);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"url": {
									"raw": "{{compilation_provider}}/services/resources/automationRequests/{{requestId}}",
									"host": [
										"{{compilation_provider}}"
									],
									"path": [
										"services",
										"resources",
										"automationRequests",
										"{{requestId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "predefined AutomationPlan dummy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var serverAddr = pm.variables.get(\"server_address\");",
											"var server_context = pm.variables.get(\"server_context\");",
											"",
											"pm.test(\"Response code should be 200 (OK)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Response body should contain an AutomationPlan (id:dummy)\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:AutomationPlan rdf:about=\\\"\" + serverAddr + \"/\" + server_context + \"/services/resources/automationPlans/dummy\");",
											"});",
											"pm.test(\"AutomationPlan should contain a dcterms:title property\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:title\");",
											"});",
											"pm.test(\"AutomationPlan should contain a dcterms:created property\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:created\");",
											"});",
											"pm.test(\"AutomationPlan should contain a dcterms:modified property\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:modified\");",
											"});",
											"pm.test(\"AutomationPlan should contain a <dcterms:creator property\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:creator\");",
											"});",
											"pm.test(\"AutomationPlan should contain a arguments parameter definition\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<oslc:name>arguments</oslc:name>\");",
											"    pm.expect(pm.response.text()).to.include(\"<fit:valuePrefix>--args=</fit:valuePrefix>\");",
											"});",
											"pm.test(\"AutomationPlan should contain a launchSUT parameter definition\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<oslc:name>launchSUT</oslc:name>\");",
											"});",
											"pm.test(\"AutomationPlan should contain a SUT parameter definition\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<oslc:name>SUT</oslc:name>\");",
											"});",
											"pm.test(\"AutomationPlan should contain a SUTbuildCommand parameter definition\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<oslc:name>SUTbuildCommand</oslc:name>\");",
											"});",
											"pm.test(\"AutomationPlan should contain a timeout parameter definition\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<oslc:name>timeout</oslc:name>\");",
											"});",
											"pm.test(\"AutomationPlan should contain a outputFileRegex parameter definition\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<oslc:name>outputFileRegex</oslc:name>\");",
											"});",
											"pm.test(\"AutomationPlan should contain a zipOutputs parameter definition\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<oslc:name>zipOutputs</oslc:name>\");",
											"});",
											"pm.test(\"AutomationPlan should contain a toolCommand parameter definition\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<oslc:name>toolCommand</oslc:name>\");",
											"});",
											"pm.test(\"AutomationPlan should contain a outputFilter parameter definition\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<oslc:name>outputFilter</oslc:name>\");",
											"});",
											"pm.test(\"AutomationPlan should contain a usesExecutionEnvironment property with the expected value\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<oslc_auto:usesExecutionEnvironment rdf:resource=\\\"https://pajda.fit.vutbr.cz/xvasic/oslc-generic-analysis/-/blob/master/analysis/tests/dummy_tool.sh\\\"/>\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/resources/automationPlans/dummy",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"resources",
										"automationPlans",
										"dummy"
									]
								}
							},
							"response": []
						},
						{
							"name": "create AutomationRequest",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response code should be 201 (created)\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"// save the request ID as a global variable for later tests to use",
											"const response = xml2Json(pm.response.text());",
											"var resrouceAbout = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"].$[\"rdf:about\"];",
											"var resourceAboutSplit = resrouceAbout.split(\"/\");",
											"var requestId = resourceAboutSplit[resourceAboutSplit.length-1];",
											"pm.globals.set('requestId', requestId);",
											"",
											"// get global variable to use in this test",
											"var serverAddr = pm.variables.get(\"server_address\");",
											"var server_context = pm.variables.get(\"server_context\");",
											"var AutomationPlanId = pm.globals.get(\"AutomationPlanId\");",
											"var test_arguments = pm.globals.get(\"arguments\");",
											"var SUT = pm.globals.get(\"SUT\");",
											"var reqTitle = pm.globals.get(\"reqTitle\");",
											"var reqDescription = pm.globals.get(\"reqDescription\");",
											"var reqCreator = pm.globals.get(\"reqCreator\");",
											"",
											"",
											"pm.test(\"Response body should contain an AutomationRequest\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:AutomationRequest rdf:about=\\\"\" + serverAddr + \"/\" + server_context + \"/services/resources/automationRequests/\" + requestId);",
											"});",
											"pm.test(\"AutomationRequest state should be #inProgress\", function () {",
											"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#new\\\"/>\");",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#inProgress\\\"/>\");",
											"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#complete\\\"/>\");",
											"});",
											"pm.test(\"AutomationRequest desiredState should be #complete\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:desiredState rdf:resource=\\\"http://open-services.net/ns/auto#complete\\\"/>\");",
											"});",
											"pm.test(\"AutomationRequest should contain a executesAutomationPlan property\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:executesAutomationPlan rdf:resource=\\\"\" + serverAddr + \"/\" + server_context + \"/services/resources/automationPlans/\");",
											"});",
											"pm.test(\"AutomationRequest executesAutomationPlan should match the AutomationPlan with ID \" + AutomationPlanId, function () {",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:executesAutomationPlan rdf:resource=\\\"\" + serverAddr + \"/\" + server_context + \"/services/resources/automationPlans/\" + AutomationPlanId);",
											"});",
											"pm.test(\"AutomationRequest should contain the expected dcterms:title property\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:title rdf:parseType=\\\"Literal\\\">\" + reqTitle + \"</dcterms:title>\");",
											"});",
											"pm.test(\"AutomationRequest should contain the expected dcterms:identifier property\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:identifier>\" + requestId + \"</dcterms:identifier>\");",
											"});",
											"pm.test(\"AutomationRequest contain the expected dcterms:creator property\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:creator rdf:resource=\\\"\" + reqCreator + \"\\\"/>\");",
											"});",
											"pm.test(\"AutomationRequest contain the expected dcterms:description property\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:description rdf:parseType=\\\"Literal\\\">\" + reqDescription + \"</dcterms:description>\");",
											"});",
											"pm.test(\"AutomationRequest should contain a dcterms:created  property\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:created\");",
											"});",
											"pm.test(\"AutomationRequest should contain a dcterms:modified  property\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:modified\");",
											"});",
											"pm.test(\"AutomationRequest should contain a arguments input parameter\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<oslc:name>arguments</oslc:name>\");",
											"});",
											"pm.test(\"AutomationRequest should contain the expected arguments input value\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<rdf:value>\" + test_arguments + \"</rdf:value>\");",
											"});",
											"pm.test(\"AutomationRequest should contain a SUT input parameter\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<oslc:name>SUT</oslc:name>\");",
											"});",
											"pm.test(\"AutomationRequest should contain the expected SUT input value\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<rdf:value>\" + SUT + \"</rdf:value>\");",
											"});",
											"pm.test(\"AutomationRequest should contain a producedAutomationResult refference property\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:producedAutomationResult\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// setup global variables for future requests (GETs)",
											"// attempt to make this sequence of requests into a template that can then be change in this place to change the test",
											"",
											"pm.globals.set(\"AutomationPlanId\", \"dummy\");",
											"",
											"pm.globals.set(\"arguments\", \"test_arguments\");",
											"",
											"pm.globals.set(\"reqCreator\", \"https://pajda.fit.vutbr.cz/xvasic\");",
											"pm.globals.set(\"reqTitle\", \"Test title\");",
											"pm.globals.set(\"reqDescription\", \"Test description\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/xml"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>{{reqTitle}}</dcterms:title>\n\t<dcterms:description>{{reqDescription}}</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{server_address}}/{{server_context}}/services/resources/automationPlans/{{AutomationPlanId}}\" />\n\t<dcterms:creator rdf:resource=\"{{reqCreator}}\"/>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>arguments</oslc:name>\n\t\t\t<rdf:value>{{arguments}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>sleepDuration</oslc:name>\n\t\t\t<rdf:value>5</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>SUT</oslc:name>\n\t\t\t<rdf:value>{{SUT}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>"
								},
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/resources/createAutomationRequest",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"resources",
										"createAutomationRequest"
									]
								}
							},
							"response": []
						},
						{
							"name": "get AutomationRequest - inProgress",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// get global variable to use in this test",
											"var requestId = pm.globals.get('requestId');",
											"var serverAddr = pm.variables.get(\"server_address\");",
											"var server_context = pm.variables.get(\"server_context\");",
											"var AutomationPlanId = pm.variables.get(\"AutomationPlanId\");",
											"var test_arguments = pm.variables.get(\"arguments\");",
											"var SUT = pm.variables.get(\"SUT\");",
											"var reqTitle = pm.variables.get(\"reqTitle\");",
											"var reqDescription = pm.variables.get(\"reqDescription\");",
											"var reqCreator = pm.variables.get(\"reqCreator\");",
											"",
											"",
											"",
											"pm.test(\"Response code should be 200 (OK)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Response body should contain an AutomationRequest\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:AutomationRequest rdf:about=\\\"\" + serverAddr + \"/\" + server_context + \"/services/resources/automationRequests/\");",
											"});",
											"pm.test(\"AutomationRequest should have the expected ID: \" + requestId, function () {",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:AutomationRequest rdf:about=\\\"\" + serverAddr + \"/\" + server_context + \"/services/resources/automationRequests/\" + requestId);",
											"});",
											"pm.test(\"AutomationRequest desiredState should be #complete\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:desiredState rdf:resource=\\\"http://open-services.net/ns/auto#complete\\\"/>\");",
											"});",
											"pm.test(\"AutomationRequest should contain a executesAutomationPlan property\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:executesAutomationPlan rdf:resource=\\\"\" + serverAddr + \"/\" + server_context + \"/services/resources/automationPlans/\");",
											"});",
											"pm.test(\"AutomationRequest executesAutomationPlan should match the AutomationPlan with ID \" + AutomationPlanId, function () {",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:executesAutomationPlan rdf:resource=\\\"\" + serverAddr + \"/\" + server_context + \"/services/resources/automationPlans/\" + AutomationPlanId);",
											"});",
											"pm.test(\"AutomationRequest should contain the expected dcterms:title property\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:title rdf:parseType=\\\"Literal\\\">\" + reqTitle + \"</dcterms:title>\");",
											"});",
											"pm.test(\"AutomationRequest should contain the expected dcterms:identifier property\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:identifier>\" + requestId + \"</dcterms:identifier>\");",
											"});",
											"pm.test(\"AutomationRequest contain the expected dcterms:creator property\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:creator rdf:resource=\\\"\" + reqCreator + \"\\\"/>\");",
											"});",
											"pm.test(\"AutomationRequest contain the expected dcterms:description property\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:description rdf:parseType=\\\"Literal\\\">\" + reqDescription + \"</dcterms:description>\");",
											"});",
											"pm.test(\"AutomationRequest should contain a dcterms:created  property\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:created\");",
											"});",
											"pm.test(\"AutomationRequest should contain a dcterms:modified  property\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:modified\");",
											"});",
											"pm.test(\"AutomationRequest should contain a arguments input parameter\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<oslc:name>arguments</oslc:name>\");",
											"});",
											"pm.test(\"AutomationRequest should contain the expected arguments input value\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<rdf:value>\" + test_arguments + \"</rdf:value>\");",
											"});",
											"pm.test(\"AutomationRequest should contain a SUT input parameter\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<oslc:name>SUT</oslc:name>\");",
											"});",
											"pm.test(\"AutomationRequest should contain the expected SUT input value\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<rdf:value>\" + SUT + \"</rdf:value>\");",
											"});",
											"",
											"",
											"// these are the only two differences compared to the last test request",
											"pm.test(\"AutomationRequest state should be #inProgress\", function () {",
											"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#new\\\"/>\");",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#inProgress\\\"/>\");",
											"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#complete\\\"/>\");",
											"});",
											"pm.test(\"AutomationRequest should contain a producedAutomationResult refference property with the expected ID (same as the request)\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:producedAutomationResult rdf:resource=\\\"\" + serverAddr + \"/\" + server_context + \"/services/resources/automationResults/\" + requestId);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/resources/automationRequests/{{requestId}}",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"resources",
										"automationRequests",
										"{{requestId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get AutomatinResult - inProgress",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// get global variable to use in this test",
											"var requestId = pm.globals.get('requestId');",
											"var serverAddr = pm.variables.get(\"server_address\");",
											"var server_context = pm.variables.get(\"server_context\");",
											"var AutomationPlanId = pm.variables.get(\"AutomationPlanId\");",
											"var test_arguments = pm.variables.get(\"arguments\");",
											"var SUT = pm.variables.get(\"SUT\");",
											"var reqTitle = pm.variables.get(\"reqTitle\");",
											"var reqDescription = pm.variables.get(\"reqDescription\");",
											"var reqCreator = pm.variables.get(\"reqCreator\");",
											"",
											"",
											"pm.test(\"Response code should be 200 (OK)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Response body should contain an AutomationResult\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:AutomationResult rdf:about=\\\"\" + serverAddr + \"/\" + server_context + \"/services/resources/automationResults/\");",
											"});",
											"pm.test(\"AutomationResult should have the expected ID: \" + requestId, function () {",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:AutomationResult rdf:about=\\\"\" + serverAddr + \"/\" + server_context + \"/services/resources/automationResults/\" + requestId);",
											"});",
											"pm.test(\"AutomationResult desiredState should be #complete\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:desiredState rdf:resource=\\\"http://open-services.net/ns/auto#complete\\\"/>\");",
											"});",
											"pm.test(\"AutomationResult should contain a producedByAutomationRequest property\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:producedByAutomationRequest rdf:resource=\\\"\" + serverAddr + \"/\" + server_context + \"/services/resources/automationRequests/\");",
											"});",
											"pm.test(\"AutomationResult producedByAutomationRequest should match the AutomationRequest with ID \" + requestId, function () {",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:producedByAutomationRequest rdf:resource=\\\"\" + serverAddr + \"/\" + server_context + \"/services/resources/automationRequests/\" + requestId);",
											"});",
											"pm.test(\"AutomationResult should contain the expected dcterms:title property\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:title rdf:parseType=\\\"Literal\\\">Result - \" + reqTitle + \"</dcterms:title>\");",
											"});",
											"pm.test(\"AutomationResult should contain the expected dcterms:identifier property\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:identifier>\" + requestId + \"</dcterms:identifier>\");",
											"});",
											"pm.test(\"AutomationResult contain the expected dcterms:creator property\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:creator rdf:resource=\\\"\" + reqCreator + \"\\\"/>\");",
											"});",
											"pm.test(\"AutomationResult should contain a dcterms:created  property\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:created\");",
											"});",
											"pm.test(\"AutomationResult should contain a dcterms:modified  property\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:modified\");",
											"});",
											"pm.test(\"AutomationRequest should contain the expected arguments input value\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<rdf:value>\" + test_arguments + \"</rdf:value>\");",
											"});",
											"pm.test(\"AutomationRequest should contain a launchSUT output parameter\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<oslc:name>launchSUT</oslc:name>\");",
											"});",
											"pm.test(\"AutomationRequest should contain a SUT input parameter\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<oslc:name>SUT</oslc:name>\");",
											"});",
											"pm.test(\"AutomationRequest should contain the expected SUT input value\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<rdf:value>\" + SUT + \"</rdf:value>\");",
											"});",
											"",
											"pm.test(\"AutomationPlan should contain a SUTbuildCommand output parameter\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<oslc:name>SUTbuildCommand</oslc:name>\");",
											"});",
											"pm.test(\"AutomationPlan should contain a timeout output parameter\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<oslc:name>timeout</oslc:name>\");",
											"});",
											"pm.test(\"AutomationPlan should contain a outputFileRegex output parameter\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<oslc:name>outputFileRegex</oslc:name>\");",
											"});",
											"pm.test(\"AutomationPlan should contain a zipOutputs output parameter\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<oslc:name>zipOutputs</oslc:name>\");",
											"});",
											"pm.test(\"AutomationPlan should contain a toolCommand output parameter\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<oslc:name>toolCommand</oslc:name>\");",
											"});",
											"pm.test(\"AutomationPlan should contain a outputFilter output parameter\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<oslc:name>outputFilter</oslc:name>\");",
											"});",
											"",
											"pm.test(\"AutomationResult state should be #inProgress\", function () {",
											"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#new\\\"/>\");",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#inProgress\\\"/>\");",
											"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#complete\\\"/>\");",
											"});",
											"pm.test(\"AutomationResult verdict should be #unavailable\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:verdict rdf:resource=\\\"http://open-services.net/ns/auto#unavailable\\\"/>\");",
											"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:verdict rdf:resource=\\\"http://open-services.net/ns/auto#passed\\\"/>\");",
											"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#error\\\"/>\");",
											"});",
											"",
											"",
											"pm.test(\"AutomationResult should contain analysis stdout\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:title rdf:parseType=\\\"Literal\\\">stdout</dcterms:title>\");",
											"});",
											"pm.test(\"AutomationResult should contain analysis stderr\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:title rdf:parseType=\\\"Literal\\\">stderr</dcterms:title>\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/resources/automationResults/{{requestId}}",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"resources",
										"automationResults",
										"{{requestId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "wait for #complete (analysis/core functionality/basic use case/analyse)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var timeoutSeconds = pm.collectionVariables.get('automation_wait_time');",
											"",
											"var waitCounter = pm.globals.get(\"waitCounter\");",
											"if(!waitCounter) {",
											"    waitCounter = 0;",
											"}",
											"",
											"if (pm.response.code != 200) { // wait for the resource to be created",
											"    if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
											"        setTimeout(function(){}, [1000]); // 1 second",
											"        waitCounter++;",
											"        postman.setNextRequest(pm.info.requestName);",
											"    } else { // timeout, reset counter",
											"        waitCounter = 0;",
											"    }",
											"} else { // wait for the automation to complete",
											"    const response = xml2Json(pm.response.text());",
											"    var state = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"][\"oslc_auto:state\"].$[\"rdf:resource\"];",
											"    if (state == \"http://open-services.net/ns/auto#inProgress\") {",
											"        if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
											"            setTimeout(function(){}, [1000]); // 1 second",
											"            waitCounter++;",
											"            postman.setNextRequest(pm.info.requestName);",
											"        } else { // timeout, reset counter",
											"            waitCounter = 0;",
											"        }",
											"    } else { // wait doen, reset counter",
											"            waitCounter = 0;",
											"    }",
											"}",
											"",
											"pm.globals.set(\"waitCounter\", waitCounter);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/resources/automationRequests/{{requestId}}",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"resources",
										"automationRequests",
										"{{requestId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get AutomationRequest - complete",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// get global variable to use in this test",
											"var requestId = pm.globals.get('requestId');",
											"var serverAddr = pm.variables.get(\"server_address\");",
											"var server_context = pm.variables.get(\"server_context\");",
											"var AutomationPlanId = pm.variables.get(\"AutomationPlanId\");",
											"var test_arguments = pm.variables.get(\"arguments\");",
											"var SUT = pm.variables.get(\"SUT\");",
											"var reqTitle = pm.variables.get(\"reqTitle\");",
											"var reqDescription = pm.variables.get(\"reqDescription\");",
											"var reqCreator = pm.variables.get(\"reqCreator\");",
											"",
											"",
											"",
											"pm.test(\"Response code should be 200 (OK)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Response body should contain an AutomationRequest\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:AutomationRequest rdf:about=\\\"\" + serverAddr + \"/\" + server_context + \"/services/resources/automationRequests/\");",
											"});",
											"pm.test(\"AutomationRequest should have the expected ID: \" + requestId, function () {",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:AutomationRequest rdf:about=\\\"\" + serverAddr + \"/\" + server_context + \"/services/resources/automationRequests/\" + requestId);",
											"});",
											"pm.test(\"AutomationRequest desiredState should be #complete\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:desiredState rdf:resource=\\\"http://open-services.net/ns/auto#complete\\\"/>\");",
											"});",
											"pm.test(\"AutomationRequest should contain a executesAutomationPlan property\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:executesAutomationPlan rdf:resource=\\\"\" + serverAddr + \"/\" + server_context + \"/services/resources/automationPlans/\");",
											"});",
											"pm.test(\"AutomationRequest executesAutomationPlan should match the AutomationPlan with ID \" + AutomationPlanId, function () {",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:executesAutomationPlan rdf:resource=\\\"\" + serverAddr + \"/\" + server_context + \"/services/resources/automationPlans/\" + AutomationPlanId);",
											"});",
											"pm.test(\"AutomationRequest should contain the expected dcterms:title property\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:title rdf:parseType=\\\"Literal\\\">\" + reqTitle + \"</dcterms:title>\");",
											"});",
											"pm.test(\"AutomationRequest should contain the expected dcterms:identifier property\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:identifier>\" + requestId + \"</dcterms:identifier>\");",
											"});",
											"pm.test(\"AutomationRequest contain the expected dcterms:creator property\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:creator rdf:resource=\\\"\" + reqCreator + \"\\\"/>\");",
											"});",
											"pm.test(\"AutomationRequest contain the expected dcterms:description property\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:description rdf:parseType=\\\"Literal\\\">\" + reqDescription + \"</dcterms:description>\");",
											"});",
											"pm.test(\"AutomationRequest should contain a dcterms:created  property\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:created\");",
											"});",
											"pm.test(\"AutomationRequest should contain a dcterms:modified  property\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:modified\");",
											"});",
											"pm.test(\"AutomationRequest should contain a arguments input parameter\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<oslc:name>arguments</oslc:name>\");",
											"});",
											"pm.test(\"AutomationRequest should contain the expected arguments input value\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<rdf:value>\" + test_arguments + \"</rdf:value>\");",
											"});",
											"pm.test(\"AutomationRequest should contain a SUT input parameter\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<oslc:name>SUT</oslc:name>\");",
											"});",
											"pm.test(\"AutomationRequest should contain the expected SUT input value\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<rdf:value>\" + SUT + \"</rdf:value>\");",
											"});",
											"",
											"",
											"// this is the only difference compared to the last test request",
											"pm.test(\"AutomationRequest state should be #complete\", function () {",
											"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#new\\\"/>\");",
											"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#inProgress\\\"/>\");",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#complete\\\"/>\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/resources/automationRequests/{{requestId}}",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"resources",
										"automationRequests",
										"{{requestId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get AutomatinResult - complete",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// get global variable to use in this test",
											"var requestId = pm.globals.get('requestId');",
											"var serverAddr = pm.variables.get(\"server_address\");",
											"var server_context = pm.variables.get(\"server_context\");",
											"var AutomationPlanId = pm.variables.get(\"AutomationPlanId\");",
											"var test_arguments = pm.variables.get(\"arguments\");",
											"var SUT = pm.variables.get(\"SUT\");",
											"var reqTitle = pm.variables.get(\"reqTitle\");",
											"var reqDescription = pm.variables.get(\"reqDescription\");",
											"var reqCreator = pm.variables.get(\"reqCreator\");",
											"",
											"",
											"pm.test(\"Response code should be 200 (OK)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Response body should contain an AutomationResult\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:AutomationResult rdf:about=\\\"\" + serverAddr + \"/\" + server_context + \"/services/resources/automationResults/\");",
											"});",
											"pm.test(\"AutomationResult should have the expected ID: \" + requestId, function () {",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:AutomationResult rdf:about=\\\"\" + serverAddr + \"/\" + server_context + \"/services/resources/automationResults/\" + requestId);",
											"});",
											"pm.test(\"AutomationResult desiredState should be #complete\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:desiredState rdf:resource=\\\"http://open-services.net/ns/auto#complete\\\"/>\");",
											"});",
											"pm.test(\"AutomationResult should contain a producedByAutomationRequest property\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:producedByAutomationRequest rdf:resource=\\\"\" + serverAddr + \"/\" + server_context + \"/services/resources/automationRequests/\");",
											"});",
											"pm.test(\"AutomationResult producedByAutomationRequest should match the AutomationRequest with ID \" + requestId, function () {",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:producedByAutomationRequest rdf:resource=\\\"\" + serverAddr + \"/\" + server_context + \"/services/resources/automationRequests/\" + requestId);",
											"});",
											"pm.test(\"AutomationResult should contain the expected dcterms:title property\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:title rdf:parseType=\\\"Literal\\\">Result - \" + reqTitle + \"</dcterms:title>\");",
											"});",
											"pm.test(\"AutomationResult should contain the expected dcterms:identifier property\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:identifier>\" + requestId + \"</dcterms:identifier>\");",
											"});",
											"pm.test(\"AutomationResult contain the expected dcterms:creator property\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:creator rdf:resource=\\\"\" + reqCreator + \"\\\"/>\");",
											"});",
											"pm.test(\"AutomationResult should contain a dcterms:created  property\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:created\");",
											"});",
											"pm.test(\"AutomationResult should contain a dcterms:modified  property\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:modified\");",
											"});",
											"pm.test(\"AutomationRequest should contain the expected arguments input value\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<rdf:value>\" + test_arguments + \"</rdf:value>\");",
											"});",
											"pm.test(\"AutomationRequest should contain a launchSUT input parameter definition\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<oslc:name>launchSUT</oslc:name>\");",
											"});",
											"pm.test(\"AutomationRequest should contain a SUT output parameter\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<oslc:name>SUT</oslc:name>\");",
											"});",
											"pm.test(\"AutomationRequest should contain the expected SUT input value\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<rdf:value>\" + SUT + \"</rdf:value>\");",
											"});",
											"",
											"pm.test(\"AutomationPlan should contain a SUTbuildCommand output parameter\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<oslc:name>SUTbuildCommand</oslc:name>\");",
											"});",
											"pm.test(\"AutomationPlan should contain a timeout output parameter\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<oslc:name>timeout</oslc:name>\");",
											"});",
											"",
											"pm.test(\"AutomationPlan should contain a outputFileRegex output parameter\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<oslc:name>outputFileRegex</oslc:name>\");",
											"});",
											"pm.test(\"AutomationPlan should contain a zipOutputs output parameter\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<oslc:name>zipOutputs</oslc:name>\");",
											"});",
											"pm.test(\"AutomationPlan should contain a toolCommand output parameter\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<oslc:name>toolCommand</oslc:name>\");",
											"});",
											"pm.test(\"AutomationPlan should contain a outputFilter output parameter\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<oslc:name>outputFilter</oslc:name>\");",
											"});",
											"",
											"pm.test(\"AutomationResult state should be #complete\", function () {",
											"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#new\\\"/>\");",
											"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#inProgress\\\"/>\");",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#complete\\\"/>\");",
											"});",
											"pm.test(\"AutomationResult verdict should be #passed\", function () {",
											"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:verdict rdf:resource=\\\"http://open-services.net/ns/auto#unavailable\\\"/>\");",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:verdict rdf:resource=\\\"http://open-services.net/ns/auto#passed\\\"/>\");",
											"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#error\\\"/>\");",
											"});",
											"pm.test(\"AutomationResult should contain contributions\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:contribution\");",
											"});",
											"pm.test(\"AutomationResult should contain a statusMessage\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:title rdf:parseType=\\\"Literal\\\">statusMessage</dcterms:title>\");",
											"});",
											"pm.test(\"AutomationResult statusMessage should have the expected value\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<rdf:value>Executing analysis: \");",
											"    pm.expect(pm.response.text()).to.include(\"Analysis completed successfully\");",
											"});",
											"pm.test(\"AutomationResult should contain analysis stdout\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:title rdf:parseType=\\\"Literal\\\">stdout</dcterms:title>\");",
											"});",
											"pm.test(\"AutomationResult analysis stdout should have the expected value\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Dummy tool!\");",
											"",
											"    var os = pm.globals.get(\"currentOS\");",
											"    if (os == \"windows_bat\"){",
											"        pm.expect(pm.response.text()).to.include(\"Your argument: --args\");  // TODO hack due to CMD processing \"=\" differently in --args=test_arguments",
											"        pm.expect(pm.response.text()).to.include(\"SUT: test_arguments\");",
											"    } else { ",
											"        pm.expect(pm.response.text()).to.include(\"Your argument: --args=test_arguments\");",
											"        pm.expect(pm.response.text()).to.include(\"SUT: ./my_echo\");",
											"    }",
											"",
											"});",
											"pm.test(\"AutomationResult should contain a returnCode\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:title rdf:parseType=\\\"Literal\\\">returnCode</dcterms:title>\");",
											"});",
											"pm.test(\"AutomationResult returnCode should have the expected value\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<rdf:value>0</rdf:value>\");",
											"});",
											"pm.test(\"AutomationResult should contain a executionTime\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:title rdf:parseType=\\\"Literal\\\">executionTime</dcterms:title>\");",
											"});",
											"pm.test(\"AutomationResult should contain analysis stderr\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:title rdf:parseType=\\\"Literal\\\">stderr</dcterms:title>\");",
											"});",
											"pm.test(\"AutomationResult analysis stderr be empty (~)\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<rdf:value></rdf:value>\");",
											"});",
											"pm.test(\"AutomationResult should contain outputFilter outputParameter\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<oslc:name>outputFilter</oslc:name>\");",
											"});",
											"pm.test(\"OutputFilter value should be \\\"default\\\"\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<rdf:value>default</rdf:value>\");",
											"});",
											"pm.test(\"AutomationResult analysis contributions should have valueType string and integer\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"http://www.w3.org/2001/XMLSchema#string\");",
											"    pm.expect(pm.response.text()).to.not.include(\"http://www.w3.org/2001/XMLSchema#base64binary\");",
											"    pm.expect(pm.response.text()).to.not.include(\"http://www.w3.org/2001/XMLSchema#boolean\");",
											"    pm.expect(pm.response.text()).to.include(\"http://www.w3.org/2001/XMLSchema#integer\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/resources/automationResults/{{requestId}}",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"resources",
										"automationResults",
										"{{requestId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "check the bookmarkResource identifier",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// get global variable to use in this test",
											"var requestId = pm.globals.get('requestId');",
											"var serverAddr = pm.variables.get(\"server_address\");",
											"var server_context = pm.variables.get(\"server_context\");",
											"",
											"",
											"pm.test(\"Response code should be 200 (OK)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Response body should contain an AutomationRequest\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:AutomationRequest rdf:about=\\\"\" + serverAddr + \"/\" + server_context + \"/services/resources/automationRequests/\");",
											"});",
											"pm.test(\"should have the expected ID: bookmarkID\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:AutomationRequest rdf:about=\\\"\" + serverAddr + \"/\" + server_context + \"/services/resources/automationRequests/bookmarkID\");",
											"});",
											"pm.test(\"identifier should have the same value as the ID of the last created request\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:identifier>\" + requestId + \"</dcterms:identifier>\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/resources/automationRequests/bookmarkID",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"resources",
										"automationRequests",
										"bookmarkID"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Automation Service Provider",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response code should be 200 (OK)\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/rdf+xml"
							}
						],
						"url": {
							"raw": "{{server_address}}/{{server_context}}/services/serviceProviders/A0",
							"host": [
								"{{server_address}}"
							],
							"path": [
								"{{server_context}}",
								"services",
								"serviceProviders",
								"A0"
							]
						}
					},
					"response": []
				},
				{
					"name": "Service Provider Catologue",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response code should be 200 (OK)\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/rdf+xml",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{server_address}}/{{server_context}}/services/catalog/singleton",
							"host": [
								"{{server_address}}"
							],
							"path": [
								"{{server_context}}",
								"services",
								"catalog",
								"singleton"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Error Handeling",
			"item": [
				{
					"name": "SUT invalid launchCommand TODO",
					"item": []
				},
				{
					"name": "General",
					"item": [
						{
							"name": "pre init",
							"item": [
								{
									"name": "create SUT using the compilation provider",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// save the request ID as a global variable for later tests to use -- used as SUT ID",
													"const response = xml2Json(pm.response.text());",
													"var resrouceAbout = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"].$[\"rdf:about\"];",
													"var resourceAboutSplit = resrouceAbout.split(\"/\");",
													"var requestId = resourceAboutSplit[resourceAboutSplit.length-1];",
													"pm.globals.set('requestId', requestId);",
													"",
													"",
													"pm.test(\"Response code should be 201 (created)\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"var compilation_provider = pm.variables.get(\"compilation_provider\");",
													"var sutId = requestId;",
													"pm.globals.set(\"SUT\", compilation_provider + \"/services/resources/sUTs/\" + sutId);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/xml"
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>analysis test</dcterms:title>\n\t<dcterms:description>analysis test</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{compilation_provider}}/services/resources/automationPlans/0\" />\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>sourceGit</oslc:name>\n\t\t\t<rdf:value>https://github.com/od42/test.git</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>buildCommand</oslc:name>\n\t\t\t<rdf:value>gcc -g TestEchoProgram.cpp -o my_echo</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>launchCommand</oslc:name>\n\t\t\t<rdf:value>./my_echo</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>"
										},
										"url": {
											"raw": "{{compilation_provider}}/services/resources/createAutomationRequest",
											"host": [
												"{{compilation_provider}}"
											],
											"path": [
												"services",
												"resources",
												"createAutomationRequest"
											]
										}
									},
									"response": []
								},
								{
									"name": "wait for #complete (analysis/error handeling/pre init)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var timeoutSeconds = pm.collectionVariables.get('automation_wait_time');",
													"",
													"var waitCounter = pm.globals.get(\"waitCounter\");",
													"if(!waitCounter) {",
													"    waitCounter = 0;",
													"}",
													"",
													"if (pm.response.code != 200) { // wait for the resource to be created",
													"    if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
													"        setTimeout(function(){}, [1000]); // 1 second",
													"        waitCounter++;",
													"        postman.setNextRequest(pm.info.requestName);",
													"    } else { // timeout, reset counter",
													"        waitCounter = 0;",
													"    }",
													"} else { // wait for the automation to complete",
													"    const response = xml2Json(pm.response.text());",
													"    var state = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"][\"oslc_auto:state\"].$[\"rdf:resource\"];",
													"    if (state == \"http://open-services.net/ns/auto#inProgress\") {",
													"        if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
													"            setTimeout(function(){}, [1000]); // 1 second",
													"            waitCounter++;",
													"            postman.setNextRequest(pm.info.requestName);",
													"        } else { // timeout, reset counter",
													"            waitCounter = 0;",
													"        }",
													"    } else { // wait doen, reset counter",
													"            waitCounter = 0;",
													"    }",
													"}",
													"",
													"pm.globals.set(\"waitCounter\", waitCounter);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"url": {
											"raw": "{{compilation_provider}}/services/resources/automationRequests/{{requestId}}",
											"host": [
												"{{compilation_provider}}"
											],
											"path": [
												"services",
												"resources",
												"automationRequests",
												"{{requestId}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "empty POST request",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response code should be 400 (bad request)\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Error msg should be - empty creation POST\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<oslc:message>AutomationRequest NOT created - empty creation POST</oslc:message>\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n</rdf:RDF>"
								},
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/resources/createAutomationRequest",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"resources",
										"createAutomationRequest"
									]
								}
							},
							"response": []
						},
						{
							"name": "title property missing",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response code should be 400 (bad request)\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"",
											"pm.test(\"Error msg should be - executesAutomationPlan property missing\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<oslc:message>AutomationRequest NOT created - title property missing</oslc:message>\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:description>Test</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{server_address}}/{{server_context}}/services/resources/automationPlans/0\" />\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>analyser</oslc:name>\n\t\t\t<rdf:value>atomrace</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>executionParameters</oslc:name>\n\t\t\t<rdf:value>\"Hello World!\"</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>SUT</oslc:name>\n\t\t\t<rdf:value>{{SUT}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>"
								},
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/resources/createAutomationRequest",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"resources",
										"createAutomationRequest"
									]
								}
							},
							"response": []
						},
						{
							"name": "executesAutomationPlan property missing",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response code should be 400 (bad request)\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"",
											"pm.test(\"Error msg should be - executesAutomationPlan property missing\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<oslc:message>AutomationRequest NOT created - executesAutomationPlan property missing</oslc:message>\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>First prototype request</dcterms:title>\n\t<dcterms:description>Test</dcterms:description>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>analyser</oslc:name>\n\t\t\t<rdf:value>atomrace</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>executionParameters</oslc:name>\n\t\t\t<rdf:value>\"Hello World!\"</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>SUT</oslc:name>\n\t\t\t<rdf:value>{{SUT}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>"
								},
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/resources/createAutomationRequest",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"resources",
										"createAutomationRequest"
									]
								}
							},
							"response": []
						},
						{
							"name": "executed AutomationPlan not found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response code should be 400 (bad request)\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"",
											"pm.test(\"Error msg should be - AutomationPlan not found\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<oslc:message>AutomationRequest NOT created - AutomationPlan not found\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>First prototype request</dcterms:title>\n\t<dcterms:description>Test</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{server_address}}/{{server_context}}/services/resources/automationPlans/132523465\" />\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>arguments</oslc:name>\n\t\t\t<rdf:value>HelloWorld</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>SUT</oslc:name>\n\t\t\t<rdf:value>{{SUT}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>"
								},
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/resources/createAutomationRequest",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"resources",
										"createAutomationRequest"
									]
								}
							},
							"response": []
						},
						{
							"name": "unknown input parameter",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response code should be 400 (bad request)\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Error msg should be - AutomationRequest NOT created - unrecognized input parameters\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<oslc:message>AutomationRequest NOT created - 'invalid input' input parameter not recognized</oslc:message>\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>First prototype request</dcterms:title>\n\t<dcterms:description>Test</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{server_address}}/{{server_context}}/services/resources/automationPlans/dummy\" />\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>invalid input</oslc:name>\n\t\t\t<rdf:value>invalid value</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>arguments</oslc:name>\n\t\t\t<rdf:value>HelloWorld</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>SUT</oslc:name>\n\t\t\t<rdf:value>{{SUT}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>"
								},
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/resources/createAutomationRequest",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"resources",
										"createAutomationRequest"
									]
								}
							},
							"response": []
						},
						{
							"name": "input parameter with illegal value",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response code should be 400 (bad request)\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Error msg should be - AutomationRequest NOT created - unrecognized input parameters\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<oslc:message>AutomationRequest NOT created - value 'invalidValueForFilter' not allowed for the 'outputFilter' parameter</oslc:message>\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>First prototype request</dcterms:title>\n\t<dcterms:description>Test</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{server_address}}/{{server_context}}/services/resources/automationPlans/dummy\" />\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>outputFilter</oslc:name>\n\t\t\t<rdf:value>invalidValueForFilter</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>arguments</oslc:name>\n\t\t\t<rdf:value>HelloWorld</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>SUT</oslc:name>\n\t\t\t<rdf:value>{{SUT}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>"
								},
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/resources/createAutomationRequest",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"resources",
										"createAutomationRequest"
									]
								}
							},
							"response": []
						},
						{
							"name": "input parameter with missing value",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response code should be 400 (bad request)\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Error msg should be - parameter outputFilter is missing a value\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<oslc:message>AutomationRequest NOT created - parameter outputFilter is missing a value\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>First prototype request</dcterms:title>\n\t<dcterms:description>Test</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{server_address}}/{{server_context}}/services/resources/automationPlans/dummy\" />\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>outputFilter</oslc:name>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>arguments</oslc:name>\n\t\t\t<rdf:value>HelloWorld</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>SUT</oslc:name>\n\t\t\t<rdf:value>{{SUT}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>"
								},
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/resources/createAutomationRequest",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"resources",
										"createAutomationRequest"
									]
								}
							},
							"response": []
						},
						{
							"name": "SUT input param missing",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response code should be 400 (bad request)\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Error msg should be - AutomationRequest NOT created - unrecognized input parameters\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<oslc:message>AutomationRequest NOT created - 'SUT' input parameter missing</oslc:message>\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>First prototype request</dcterms:title>\n\t<dcterms:description>Test</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{server_address}}/{{server_context}}/services/resources/automationPlans/dummy\" />\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>arguments</oslc:name>\n\t\t\t<rdf:value>HelloWorld</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>"
								},
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/resources/createAutomationRequest",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"resources",
										"createAutomationRequest"
									]
								}
							},
							"response": []
						},
						{
							"name": "SUT non existent resource",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response code should be 400 (bad request)\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Error msg should be - AutomationRequest NOT created - unrecognized input parameters\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<oslc:message>AutomationRequest NOT created - Failed to get refferenced SUT\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>First prototype request</dcterms:title>\n\t<dcterms:description>Test</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{server_address}}/{{server_context}}/services/resources/automationPlans/dummy\" />\n\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>arguments</oslc:name>\n\t\t\t<rdf:value>HelloWorld</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>SUT</oslc:name>\n\t\t\t<rdf:value>{{compilation_provider}}/services/resources/sUTs/234523</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>"
								},
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/resources/createAutomationRequest",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"resources",
										"createAutomationRequest"
									]
								}
							},
							"response": []
						},
						{
							"name": "SUT resource provider unreachable",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response code should be 400 (bad request)\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Error msg should be - AutomationRequest NOT created - connection refused\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Connection refused\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>First prototype request</dcterms:title>\n\t<dcterms:description>Test</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{server_address}}/{{server_context}}/services/resources/automationPlans/dummy\" />\n\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>arguments</oslc:name>\n\t\t\t<rdf:value>HelloWorld</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>SUT</oslc:name>\n\t\t\t<rdf:value>http://localhost:8085/compilation/services/resources/sUTs/234523</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>"
								},
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/resources/createAutomationRequest",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"resources",
										"createAutomationRequest"
									]
								}
							},
							"response": []
						},
						{
							"name": "resource not found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response code should be 404 (not found)\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/resources/automationPlans/123456789",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"resources",
										"automationPlans",
										"123456789"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "SUT property missing",
					"item": [
						{
							"name": "launchCommand missing",
							"item": [
								{
									"name": "create SUT with no launchCommand",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// save the request ID as a global variable for later tests to use -- used as SUT ID",
													"const response = xml2Json(pm.response.text());",
													"var resrouceAbout = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"].$[\"rdf:about\"];",
													"var resourceAboutSplit = resrouceAbout.split(\"/\");",
													"var requestId = resourceAboutSplit[resourceAboutSplit.length-1];",
													"pm.globals.set('requestId', requestId);",
													"",
													"",
													"pm.test(\"Response code should be 201 (created)\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"var compilation_provider = pm.variables.get(\"compilation_provider\");",
													"var sutId = requestId;",
													"pm.globals.set(\"SUT\", compilation_provider + \"/services/resources/sUTs/\" + sutId);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/xml"
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>analysis test</dcterms:title>\n\t<dcterms:description>analysis test</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{compilation_provider}}/services/resources/automationPlans/0\" />\n\t\n\t<oslc_auto:inputParameter>\n        <oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>sourceBase64</oslc:name>\n\t\t\t<rdf:value>TestEchoProgram.cpp\nI2luY2x1ZGUgPHN0ZGlvLmg+CgppbnQgbWFpbihpbnQgYXJnYywgY2hhcioqIGFyZ3YpCnsKCXByaW50ZigiJXNcbiIsIGFyZ3ZbMV0pOwoJcmV0dXJuIDA7Cn0K</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>buildCommand</oslc:name>\n\t\t\t<rdf:value>gcc -g TestEchoProgram.cpp -o my_echo</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>"
										},
										"url": {
											"raw": "{{compilation_provider}}/services/resources/createAutomationRequest",
											"host": [
												"{{compilation_provider}}"
											],
											"path": [
												"services",
												"resources",
												"createAutomationRequest"
											]
										}
									},
									"response": []
								},
								{
									"name": "wait for #complete (analysis/error handeling/sut property missing/launch command)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var timeoutSeconds = pm.collectionVariables.get('automation_wait_time');",
													"",
													"var waitCounter = pm.globals.get(\"waitCounter\");",
													"if(!waitCounter) {",
													"    waitCounter = 0;",
													"}",
													"",
													"if (pm.response.code != 200) { // wait for the resource to be created",
													"    if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
													"        setTimeout(function(){}, [1000]); // 1 second",
													"        waitCounter++;",
													"        postman.setNextRequest(pm.info.requestName);",
													"    } else { // timeout, reset counter",
													"        waitCounter = 0;",
													"    }",
													"} else { // wait for the automation to complete",
													"    const response = xml2Json(pm.response.text());",
													"    var state = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"][\"oslc_auto:state\"].$[\"rdf:resource\"];",
													"    if (state == \"http://open-services.net/ns/auto#inProgress\") {",
													"        if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
													"            setTimeout(function(){}, [1000]); // 1 second",
													"            waitCounter++;",
													"            postman.setNextRequest(pm.info.requestName);",
													"        } else { // timeout, reset counter",
													"            waitCounter = 0;",
													"        }",
													"    } else { // wait doen, reset counter",
													"            waitCounter = 0;",
													"    }",
													"}",
													"",
													"pm.globals.set(\"waitCounter\", waitCounter);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"url": {
											"raw": "{{compilation_provider}}/services/resources/automationRequests/{{requestId}}",
											"host": [
												"{{compilation_provider}}"
											],
											"path": [
												"services",
												"resources",
												"automationRequests",
												"{{requestId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "try to analyze with a tool that uses launchCommand",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response code should be 400 (bad request)\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"pm.test(\"Response should contain an error message\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"referenced SUT is missing a launchCommand\")",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"",
													"// setup global variables for future requests (GETs)",
													"// attempt to make this sequence of requests into a template that can then be change in this place to change the test",
													"",
													"pm.globals.set(\"AutomationPlanId\", \"dummy\");",
													"",
													"pm.globals.set(\"arguments\", \"test_arguments\");",
													"",
													"pm.globals.set(\"reqCreator\", \"https://pajda.fit.vutbr.cz/xvasic\");",
													"pm.globals.set(\"reqTitle\", \"Test title\");",
													"pm.globals.set(\"reqDescription\", \"Test description\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/xml"
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{server_address}}/{{server_context}}/services/resources/automationPlans/dummy\" />\n\t<dcterms:title>test</dcterms:title>\n\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>arguments</oslc:name>\n\t\t\t<rdf:value>asdfasdf</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>SUT</oslc:name>\n\t\t\t<rdf:value>{{SUT}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>"
										},
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/resources/createAutomationRequest",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"resources",
												"createAutomationRequest"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "buildCommand missing",
							"item": [
								{
									"name": "create SUT with no buildCommand",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// save the request ID as a global variable for later tests to use -- used as SUT ID",
													"const response = xml2Json(pm.response.text());",
													"var resrouceAbout = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"].$[\"rdf:about\"];",
													"var resourceAboutSplit = resrouceAbout.split(\"/\");",
													"var requestId = resourceAboutSplit[resourceAboutSplit.length-1];",
													"pm.globals.set('requestId', requestId);",
													"",
													"",
													"pm.test(\"Response code should be 201 (created)\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"var compilation_provider = pm.variables.get(\"compilation_provider\");",
													"var sutId = requestId;",
													"pm.globals.set(\"SUT\", compilation_provider + \"/services/resources/sUTs/\" + sutId);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/xml"
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>analysis test</dcterms:title>\n\t<dcterms:description>analysis test</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{compilation_provider}}/services/resources/automationPlans/0\" />\n\t\n\t<oslc_auto:inputParameter>\n        <oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>sourceBase64</oslc:name>\n\t\t\t<rdf:value>TestEchoProgram.cpp\nI2luY2x1ZGUgPHN0ZGlvLmg+CgppbnQgbWFpbihpbnQgYXJnYywgY2hhcioqIGFyZ3YpCnsKCXByaW50ZigiJXNcbiIsIGFyZ3ZbMV0pOwoJcmV0dXJuIDA7Cn0K</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>launchCommand</oslc:name>\n\t\t\t<rdf:value>./my_echo</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n    \n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>compile</oslc:name>\n\t\t\t<rdf:value>false</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n    \n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>"
										},
										"url": {
											"raw": "{{compilation_provider}}/services/resources/createAutomationRequest",
											"host": [
												"{{compilation_provider}}"
											],
											"path": [
												"services",
												"resources",
												"createAutomationRequest"
											]
										}
									},
									"response": []
								},
								{
									"name": "wait for #complete (analysis/error handeling/sut property missing/build command)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var timeoutSeconds = pm.collectionVariables.get('automation_wait_time');",
													"",
													"var waitCounter = pm.globals.get(\"waitCounter\");",
													"if(!waitCounter) {",
													"    waitCounter = 0;",
													"}",
													"",
													"if (pm.response.code != 200) { // wait for the resource to be created",
													"    if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
													"        setTimeout(function(){}, [1000]); // 1 second",
													"        waitCounter++;",
													"        postman.setNextRequest(pm.info.requestName);",
													"    } else { // timeout, reset counter",
													"        waitCounter = 0;",
													"    }",
													"} else { // wait for the automation to complete",
													"    const response = xml2Json(pm.response.text());",
													"    var state = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"][\"oslc_auto:state\"].$[\"rdf:resource\"];",
													"    if (state == \"http://open-services.net/ns/auto#inProgress\") {",
													"        if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
													"            setTimeout(function(){}, [1000]); // 1 second",
													"            waitCounter++;",
													"            postman.setNextRequest(pm.info.requestName);",
													"        } else { // timeout, reset counter",
													"            waitCounter = 0;",
													"        }",
													"    } else { // wait doen, reset counter",
													"            waitCounter = 0;",
													"    }",
													"}",
													"",
													"pm.globals.set(\"waitCounter\", waitCounter);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"url": {
											"raw": "{{compilation_provider}}/services/resources/automationRequests/{{requestId}}",
											"host": [
												"{{compilation_provider}}"
											],
											"path": [
												"services",
												"resources",
												"automationRequests",
												"{{requestId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "try to analyze with a tool that uses buildCommand",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response code should be 400 (bad request)\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"pm.test(\"Response should contain an error message\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"referenced SUT is missing a buildCommand\")",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/xml"
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{server_address}}/{{server_context}}/services/resources/automationPlans/dummy\" />\n\t<dcterms:title>test</dcterms:title>\n\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>arguments</oslc:name>\n\t\t\t<rdf:value>asdfasdf</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>SUT</oslc:name>\n\t\t\t<rdf:value>{{SUT}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>"
										},
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/resources/createAutomationRequest",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"resources",
												"createAutomationRequest"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "bookmark resource protection",
					"item": [
						{
							"name": "try deleting",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response code should be 403 (forbidden)\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/resources/automationRequests/bookmarkID",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"resources",
										"automationRequests",
										"bookmarkID"
									]
								}
							},
							"response": []
						},
						{
							"name": "check that it does not appear in queries",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var requestId = pm.globals.get('requestId');",
											"",
											"pm.test(\"Response code should be 200 (OK)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"The result should be empty\", function () {",
											"    pm.expect(pm.response.text()).to.include(\">0</oslc:totalCount>\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/rdf+xml",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/resources/queryAutomationRequest?oslc.where=dcterms:description=\"This resource is used by the adapter to rememeber what is the current maximum AutomationRequest ID. Determines where new ID's start after adapter restart with a persistent triplestore.\"&oslc.prefix=dcterms=<http://purl.org/dc/terms/>",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"resources",
										"queryAutomationRequest"
									],
									"query": [
										{
											"key": "oslc.where",
											"value": "dcterms:description=\"This resource is used by the adapter to rememeber what is the current maximum AutomationRequest ID. Determines where new ID's start after adapter restart with a persistent triplestore.\""
										},
										{
											"key": "oslc.prefix",
											"value": "dcterms=<http://purl.org/dc/terms/>"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "try updating",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response code should be 403 (forbidden)\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\r\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\r\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\r\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\r\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\r\n\r\n  <oslc_auto:AutomationRequest rdf:about=\"http://localhost:8081/compilation/services/resources/automationRequests/bookmarkID\">\r\n\t<dcterms:title>not important</dcterms:title>\r\n\t<dcterms:description>not important</dcterms:description>\r\n  </oslc_auto:AutomationRequest>\r\n\r\n</rdf:RDF>",
									"options": {
										"raw": {
											"language": "xml"
										}
									}
								},
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/resources/automationRequests/bookmarkID",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"resources",
										"automationRequests",
										"bookmarkID"
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Common Input Parameters",
			"item": [
				{
					"name": "pre init",
					"item": [
						{
							"name": "create SUT using the compilation provider",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// save the request ID as a global variable for later tests to use -- used as SUT ID",
											"const response = xml2Json(pm.response.text());",
											"var resrouceAbout = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"].$[\"rdf:about\"];",
											"var resourceAboutSplit = resrouceAbout.split(\"/\");",
											"var requestId = resourceAboutSplit[resourceAboutSplit.length-1];",
											"pm.globals.set('requestId', requestId);",
											"",
											"",
											"pm.test(\"Response code should be 201 (created)\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"var compilation_provider = pm.variables.get(\"compilation_provider\");",
											"var sutId = requestId;",
											"pm.globals.set(\"SUT\", compilation_provider + \"/services/resources/sUTs/\" + sutId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/xml"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>analysis test</dcterms:title>\n\t<dcterms:description>analysis test</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{compilation_provider}}/services/resources/automationPlans/0\" />\n\t\n\t<oslc_auto:inputParameter>\n        <oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>sourceBase64</oslc:name>\n\t\t\t<rdf:value>TestEchoProgram.cpp\nI2luY2x1ZGUgPHN0ZGlvLmg+CgppbnQgbWFpbihpbnQgYXJnYywgY2hhcioqIGFyZ3YpCnsKCXByaW50ZigiJXNcbiIsIGFyZ3ZbMV0pOwoJcmV0dXJuIDA7Cn0K</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>buildCommand</oslc:name>\n\t\t\t<rdf:value>gcc -g TestEchoProgram.cpp -o my_echo</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>launchCommand</oslc:name>\n\t\t\t<rdf:value>./my_echo</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>"
								},
								"url": {
									"raw": "{{compilation_provider}}/services/resources/createAutomationRequest",
									"host": [
										"{{compilation_provider}}"
									],
									"path": [
										"services",
										"resources",
										"createAutomationRequest"
									]
								}
							},
							"response": []
						},
						{
							"name": "wait for #complete (analysis/common input paramters/pre init)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var timeoutSeconds = pm.collectionVariables.get('automation_wait_time');",
											"",
											"var waitCounter = pm.globals.get(\"waitCounter\");",
											"if(!waitCounter) {",
											"    waitCounter = 0;",
											"}",
											"",
											"if (pm.response.code != 200) { // wait for the resource to be created",
											"    if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
											"        setTimeout(function(){}, [1000]); // 1 second",
											"        waitCounter++;",
											"        postman.setNextRequest(pm.info.requestName);",
											"    } else { // timeout, reset counter",
											"        waitCounter = 0;",
											"    }",
											"} else { // wait for the automation to complete",
											"    const response = xml2Json(pm.response.text());",
											"    var state = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"][\"oslc_auto:state\"].$[\"rdf:resource\"];",
											"    if (state == \"http://open-services.net/ns/auto#inProgress\") {",
											"        if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
											"            setTimeout(function(){}, [1000]); // 1 second",
											"            waitCounter++;",
											"            postman.setNextRequest(pm.info.requestName);",
											"        } else { // timeout, reset counter",
											"            waitCounter = 0;",
											"        }",
											"    } else { // wait doen, reset counter",
											"            waitCounter = 0;",
											"    }",
											"}",
											"",
											"pm.globals.set(\"waitCounter\", waitCounter);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"url": {
									"raw": "{{compilation_provider}}/services/resources/automationRequests/{{requestId}}",
									"host": [
										"{{compilation_provider}}"
									],
									"path": [
										"services",
										"resources",
										"automationRequests",
										"{{requestId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "timeout",
					"item": [
						{
							"name": "timeout long enough",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Response code should be 201 (created)\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"",
											"// save the request ID as a global variable for later tests to use",
											"const response = xml2Json(pm.response.text());",
											"var resrouceAbout = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"].$[\"rdf:about\"];",
											"var resourceAboutSplit = resrouceAbout.split(\"/\");",
											"var requestId = resourceAboutSplit[resourceAboutSplit.length-1];",
											"pm.globals.set('requestId', requestId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{server_address}}/{{server_context}}/services/resources/automationPlans/dummy\" />\n\t<dcterms:title>test</dcterms:title>\n\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>arguments</oslc:name>\n\t\t\t<rdf:value>asdfasdf</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>sleepDuration</oslc:name>\n\t\t\t<rdf:value>5</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>timeout</oslc:name>\n\t\t\t<rdf:value>10</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>SUT</oslc:name>\n\t\t\t<rdf:value>{{SUT}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>",
									"options": {
										"raw": {
											"language": "xml"
										}
									}
								},
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/resources/createAutomationRequest",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"resources",
										"createAutomationRequest"
									]
								}
							},
							"response": []
						},
						{
							"name": "wait for #complete (analysis/common input paramters/timeout/long)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var timeoutSeconds = pm.collectionVariables.get('automation_wait_time');",
											"",
											"var waitCounter = pm.globals.get(\"waitCounter\");",
											"if(!waitCounter) {",
											"    waitCounter = 0;",
											"}",
											"",
											"if (pm.response.code != 200) { // wait for the resource to be created",
											"    if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
											"        setTimeout(function(){}, [1000]); // 1 second",
											"        waitCounter++;",
											"        postman.setNextRequest(pm.info.requestName);",
											"    } else { // timeout, reset counter",
											"        waitCounter = 0;",
											"    }",
											"} else { // wait for the automation to complete",
											"    const response = xml2Json(pm.response.text());",
											"    var state = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"][\"oslc_auto:state\"].$[\"rdf:resource\"];",
											"    if (state == \"http://open-services.net/ns/auto#inProgress\") {",
											"        if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
											"            setTimeout(function(){}, [1000]); // 1 second",
											"            waitCounter++;",
											"            postman.setNextRequest(pm.info.requestName);",
											"        } else { // timeout, reset counter",
											"            waitCounter = 0;",
											"        }",
											"    } else { // wait doen, reset counter",
											"            waitCounter = 0;",
											"    }",
											"}",
											"",
											"pm.globals.set(\"waitCounter\", waitCounter);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/resources/automationRequests/{{requestId}}",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"resources",
										"automationRequests",
										"{{requestId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get result",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// get global variable to use in this test",
											"var requestId = pm.globals.get('requestId');",
											"var serverAddr = pm.variables.get(\"server_address\");",
											"var server_context = pm.variables.get(\"server_context\");",
											"var AutomationPlanId = pm.variables.get(\"AutomationPlanId\");",
											"var test_arguments = pm.variables.get(\"arguments\");",
											"var SUT = pm.variables.get(\"SUT\");",
											"",
											"",
											"pm.test(\"Response code should be 200 (OK)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"AutomationResult state should be #complete\", function () {",
											"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#new\\\"/>\");",
											"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#inProgress\\\"/>\");",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#complete\\\"/>\");",
											"});",
											"pm.test(\"AutomationResult verdict should be #passed\", function () {",
											"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:verdict rdf:resource=\\\"http://open-services.net/ns/auto#unavailable\\\"/>\");",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:verdict rdf:resource=\\\"http://open-services.net/ns/auto#passed\\\"/>\");",
											"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#error\\\"/>\");",
											"});",
											"pm.test(\"AutomationResult analysis statusMessage should have the expected value\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Executing analysis: \");",
											"    pm.expect(pm.response.text()).to.include(\"Analysis completed successfully\");",
											"});",
											"pm.test(\"returnCode should be 0\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<rdf:value>0</rdf:value>\");",
											"});",
											"pm.test(\"AutomationResult analysis stderr be empty (~)\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<rdf:value></rdf:value>\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/resources/automationResults/{{requestId}}",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"resources",
										"automationResults",
										"{{requestId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "timeout too short",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"",
											"pm.test(\"Response code should be 201 (created)\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"",
											"// save the request ID as a global variable for later tests to use",
											"const response = xml2Json(pm.response.text());",
											"var resrouceAbout = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"].$[\"rdf:about\"];",
											"var resourceAboutSplit = resrouceAbout.split(\"/\");",
											"var requestId = resourceAboutSplit[resourceAboutSplit.length-1];",
											"pm.globals.set('requestId', requestId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{server_address}}/{{server_context}}/services/resources/automationPlans/dummy\" />\n\t<dcterms:title>test</dcterms:title>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>arguments</oslc:name>\n\t\t\t<rdf:value>asdfasdf</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>sleepDuration</oslc:name>\n\t\t\t<rdf:value>5</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>timeout</oslc:name>\n\t\t\t<rdf:value>2</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>SUT</oslc:name>\n\t\t\t<rdf:value>{{SUT}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>",
									"options": {
										"raw": {
											"language": "xml"
										}
									}
								},
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/resources/createAutomationRequest",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"resources",
										"createAutomationRequest"
									]
								}
							},
							"response": []
						},
						{
							"name": "wait for #complete (analysis/common input paramters/timeout/short)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var timeoutSeconds = pm.collectionVariables.get('automation_wait_time');",
											"",
											"var waitCounter = pm.globals.get(\"waitCounter\");",
											"if(!waitCounter) {",
											"    waitCounter = 0;",
											"}",
											"",
											"if (pm.response.code != 200) { // wait for the resource to be created",
											"    if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
											"        setTimeout(function(){}, [1000]); // 1 second",
											"        waitCounter++;",
											"        postman.setNextRequest(pm.info.requestName);",
											"    } else { // timeout, reset counter",
											"        waitCounter = 0;",
											"    }",
											"} else { // wait for the automation to complete",
											"    const response = xml2Json(pm.response.text());",
											"    var state = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"][\"oslc_auto:state\"].$[\"rdf:resource\"];",
											"    if (state == \"http://open-services.net/ns/auto#inProgress\") {",
											"        if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
											"            setTimeout(function(){}, [1000]); // 1 second",
											"            waitCounter++;",
											"            postman.setNextRequest(pm.info.requestName);",
											"        } else { // timeout, reset counter",
											"            waitCounter = 0;",
											"        }",
											"    } else { // wait doen, reset counter",
											"            waitCounter = 0;",
											"    }",
											"}",
											"",
											"pm.globals.set(\"waitCounter\", waitCounter);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/resources/automationRequests/{{requestId}}",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"resources",
										"automationRequests",
										"{{requestId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get result timeouted",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// get global variable to use in this test",
											"var requestId = pm.globals.get('requestId');",
											"var serverAddr = pm.variables.get(\"server_address\");",
											"var server_context = pm.variables.get(\"server_context\");",
											"var AutomationPlanId = pm.variables.get(\"AutomationPlanId\");",
											"var test_arguments = pm.variables.get(\"arguments\");",
											"var SUT = pm.variables.get(\"SUT\");",
											"",
											"",
											"pm.test(\"Response code should be 200 (OK)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"AutomationResult state should be #complete\", function () {",
											"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#new\\\"/>\");",
											"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#inProgress\\\"/>\");",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#complete\\\"/>\");",
											"});",
											"pm.test(\"AutomationResult verdict should be #failed\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:verdict rdf:resource=\\\"http://open-services.net/ns/auto#failed\\\"/>\");",
											"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:verdict rdf:resource=\\\"http://open-services.net/ns/auto#unavailable\\\"/>\");",
											"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:verdict rdf:resource=\\\"http://open-services.net/ns/auto#passed\\\"/>\");",
											"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#error\\\"/>\");",
											"});",
											"",
											"pm.test(\"AutomationResult analysis statusMessage should have the expected value\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Executing analysis: \");",
											"    pm.expect(pm.response.text()).to.include(\"Analysis aborted \");",
											"    pm.expect(pm.response.text()).to.include(\"timeout (2 seconds)\");",
											"});",
											"",
											"pm.test(\"returnCode should be 1 (win) or 0 (linux) \", function () {",
											"    if (pm.response.text().includes(\"<rdf:value>1</rdf:value>\"))",
											"    {",
											"        pm.expect(pm.response.text()).to.include(\"<rdf:value>1</rdf:value>\");",
											"    }",
											"    else if (pm.response.text().includes(\"<rdf:value>0</rdf:value>\"))",
											"    {",
											"        pm.expect(pm.response.text()).to.include(\"<rdf:value>0</rdf:value>\");",
											"    }",
											"    else",
											"    {",
											"        pm.expect(false);",
											"    }",
											"});",
											"",
											"pm.test(\"AutomationResult analysis stderr be empty (~)\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<rdf:value></rdf:value>\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/resources/automationResults/{{requestId}}",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"resources",
										"automationResults",
										"{{requestId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "outputFileRegex",
					"item": [
						{
							"name": "outputFileRegex no matches",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"",
											"pm.test(\"Response code should be 201 (created)\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"",
											"// save the request ID as a global variable for later tests to use",
											"const response = xml2Json(pm.response.text());",
											"var resrouceAbout = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"].$[\"rdf:about\"];",
											"var resourceAboutSplit = resrouceAbout.split(\"/\");",
											"var requestId = resourceAboutSplit[resourceAboutSplit.length-1];",
											"pm.globals.set('requestId', requestId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{server_address}}/{{server_context}}/services/resources/automationPlans/dummy\" />\n\t<dcterms:title>test</dcterms:title>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>arguments</oslc:name>\n\t\t\t<rdf:value>asdfasdf</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>outputFileRegex</oslc:name>\n\t\t\t<rdf:value>.^</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>SUT</oslc:name>\n\t\t\t<rdf:value>{{SUT}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>",
									"options": {
										"raw": {
											"language": "xml"
										}
									}
								},
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/resources/createAutomationRequest",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"resources",
										"createAutomationRequest"
									]
								}
							},
							"response": []
						},
						{
							"name": "wait for #complete (analysis/common input paramters/otputfileregex/nomatch)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var timeoutSeconds = pm.collectionVariables.get('automation_wait_time');",
											"",
											"var waitCounter = pm.globals.get(\"waitCounter\");",
											"if(!waitCounter) {",
											"    waitCounter = 0;",
											"}",
											"",
											"if (pm.response.code != 200) { // wait for the resource to be created",
											"    if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
											"        setTimeout(function(){}, [1000]); // 1 second",
											"        waitCounter++;",
											"        postman.setNextRequest(pm.info.requestName);",
											"    } else { // timeout, reset counter",
											"        waitCounter = 0;",
											"    }",
											"} else { // wait for the automation to complete",
											"    const response = xml2Json(pm.response.text());",
											"    var state = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"][\"oslc_auto:state\"].$[\"rdf:resource\"];",
											"    if (state == \"http://open-services.net/ns/auto#inProgress\") {",
											"        if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
											"            setTimeout(function(){}, [1000]); // 1 second",
											"            waitCounter++;",
											"            postman.setNextRequest(pm.info.requestName);",
											"        } else { // timeout, reset counter",
											"            waitCounter = 0;",
											"        }",
											"    } else { // wait doen, reset counter",
											"            waitCounter = 0;",
											"    }",
											"}",
											"",
											"pm.globals.set(\"waitCounter\", waitCounter);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/resources/automationRequests/{{requestId}}",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"resources",
										"automationRequests",
										"{{requestId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get result",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// get global variable to use in this test",
											"var requestId = pm.globals.get('requestId');",
											"var serverAddr = pm.variables.get(\"server_address\");",
											"var server_context = pm.variables.get(\"server_context\");",
											"var AutomationPlanId = pm.variables.get(\"AutomationPlanId\");",
											"var test_arguments = pm.variables.get(\"arguments\");",
											"var SUT = pm.variables.get(\"SUT\");",
											"",
											"",
											"pm.test(\"Response code should be 200 (OK)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"AutomationResult state should be #complete\", function () {",
											"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#new\\\"/>\");",
											"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#inProgress\\\"/>\");",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#complete\\\"/>\");",
											"});",
											"pm.test(\"AutomationResult verdict should be #passed\", function () {",
											"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:verdict rdf:resource=\\\"http://open-services.net/ns/auto#unavailable\\\"/>\");",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:verdict rdf:resource=\\\"http://open-services.net/ns/auto#passed\\\"/>\");",
											"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#error\\\"/>\");",
											"});",
											"pm.test(\"AutomationResult analysis stderr be empty (~)\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<rdf:value></rdf:value>\");",
											"});",
											"pm.test(\"AutomationResult statusMessage should have the expected value\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Executing analysis: \");",
											"    pm.expect(pm.response.text()).to.include(\"Analysis completed successfully\");",
											"});",
											"pm.test(\"returnCode should be 0\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<rdf:value>0</rdf:value>\");",
											"});",
											"pm.test(\"AutomationResult does not contain any regex match file contributions\", function () {",
											"    pm.expect(pm.response.text()).to.not.include(\"This file was modified or created during execution\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/resources/automationResults/{{requestId}}",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"resources",
										"automationResults",
										"{{requestId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "outputFileRegex match all",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response code should be 201 (created)\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"",
											"// save the request ID as a global variable for later tests to use",
											"const response = xml2Json(pm.response.text());",
											"var resrouceAbout = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"].$[\"rdf:about\"];",
											"var resourceAboutSplit = resrouceAbout.split(\"/\");",
											"var requestId = resourceAboutSplit[resourceAboutSplit.length-1];",
											"pm.globals.set('requestId', requestId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{server_address}}/{{server_context}}/services/resources/automationPlans/dummy\" />\n\t<dcterms:title>test</dcterms:title>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>arguments</oslc:name>\n\t\t\t<rdf:value>asdfasdf</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>outputFileRegex</oslc:name>\n\t\t\t<rdf:value>.*</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>SUT</oslc:name>\n\t\t\t<rdf:value>{{SUT}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>",
									"options": {
										"raw": {
											"language": "xml"
										}
									}
								},
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/resources/createAutomationRequest",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"resources",
										"createAutomationRequest"
									]
								}
							},
							"response": []
						},
						{
							"name": "wait for #complete (analysis/common input paramters/otputfileregex/match all)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var timeoutSeconds = pm.collectionVariables.get('automation_wait_time');",
											"",
											"var waitCounter = pm.globals.get(\"waitCounter\");",
											"if(!waitCounter) {",
											"    waitCounter = 0;",
											"}",
											"",
											"if (pm.response.code != 200) { // wait for the resource to be created",
											"    if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
											"        setTimeout(function(){}, [1000]); // 1 second",
											"        waitCounter++;",
											"        postman.setNextRequest(pm.info.requestName);",
											"    } else { // timeout, reset counter",
											"        waitCounter = 0;",
											"    }",
											"} else { // wait for the automation to complete",
											"    const response = xml2Json(pm.response.text());",
											"    var state = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"][\"oslc_auto:state\"].$[\"rdf:resource\"];",
											"    if (state == \"http://open-services.net/ns/auto#inProgress\") {",
											"        if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
											"            setTimeout(function(){}, [1000]); // 1 second",
											"            waitCounter++;",
											"            postman.setNextRequest(pm.info.requestName);",
											"        } else { // timeout, reset counter",
											"            waitCounter = 0;",
											"        }",
											"    } else { // wait doen, reset counter",
											"            waitCounter = 0;",
											"    }",
											"}",
											"",
											"pm.globals.set(\"waitCounter\", waitCounter);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/resources/automationRequests/{{requestId}}",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"resources",
										"automationRequests",
										"{{requestId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get result",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// get global variable to use in this test",
											"var requestId = pm.globals.get('requestId');",
											"var serverAddr = pm.variables.get(\"server_address\");",
											"var server_context = pm.variables.get(\"server_context\");",
											"var AutomationPlanId = pm.variables.get(\"AutomationPlanId\");",
											"var test_arguments = pm.variables.get(\"arguments\");",
											"var SUT = pm.variables.get(\"SUT\");",
											"",
											"",
											"pm.test(\"Response code should be 200 (OK)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"AutomationResult state should be #complete\", function () {",
											"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#new\\\"/>\");",
											"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#inProgress\\\"/>\");",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#complete\\\"/>\");",
											"});",
											"pm.test(\"AutomationResult verdict should be #passed\", function () {",
											"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:verdict rdf:resource=\\\"http://open-services.net/ns/auto#unavailable\\\"/>\");",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:verdict rdf:resource=\\\"http://open-services.net/ns/auto#passed\\\"/>\");",
											"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#error\\\"/>\");",
											"});",
											"pm.test(\"AutomationResult analysis stderr be empty (~)\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<rdf:value></rdf:value>\");",
											"});",
											"pm.test(\"AutomationResult statusMessage should have the expected value\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Executing analysis: \");",
											"    pm.expect(pm.response.text()).to.include(\"Analysis completed successfully\");",
											"});",
											"pm.test(\"returnCode should be 0\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<rdf:value>0</rdf:value>\");",
											"});",
											"pm.test(\"AutomationResult contains regex match file contributions\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"File produced or modified during execution\");",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:title rdf:parseType=\\\"Literal\\\">file2</dcterms:title>\");",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:title rdf:parseType=\\\"Literal\\\">file1</dcterms:title>\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/resources/automationResults/{{requestId}}",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"resources",
										"automationResults",
										"{{requestId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "outputFileRegex invalid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response code should be 400 (bad request)\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"",
											"pm.test(\"Error msg should be - Invalid format of outputFileRegex value\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<oslc:message>AutomationRequest NOT created - Invalid format of outputFileRegex value: java.util.regex.PatternSyntaxException\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{server_address}}/{{server_context}}/services/resources/automationPlans/dummy\" />\n\t<dcterms:title>test</dcterms:title>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>arguments</oslc:name>\n\t\t\t<rdf:value>asdfasdf</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>outputFileRegex</oslc:name>\n\t\t\t<rdf:value>*</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>SUT</oslc:name>\n\t\t\t<rdf:value>{{SUT}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>",
									"options": {
										"raw": {
											"language": "xml"
										}
									}
								},
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/resources/createAutomationRequest",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"resources",
										"createAutomationRequest"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "zipOutputs",
					"item": [
						{
							"name": "zipOutputs",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response code should be 201 (created)\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"",
											"// save the request ID as a global variable for later tests to use",
											"const response = xml2Json(pm.response.text());",
											"var resrouceAbout = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"].$[\"rdf:about\"];",
											"var resourceAboutSplit = resrouceAbout.split(\"/\");",
											"var requestId = resourceAboutSplit[resourceAboutSplit.length-1];",
											"pm.globals.set('requestId', requestId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{server_address}}/{{server_context}}/services/resources/automationPlans/dummy\" />\n\t<dcterms:title>test</dcterms:title>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>arguments</oslc:name>\n\t\t\t<rdf:value>asdfasdf</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>outputFileRegex</oslc:name>\n\t\t\t<rdf:value>.*</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>zipOutputs</oslc:name>\n\t\t\t<rdf:value>true</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>SUT</oslc:name>\n\t\t\t<rdf:value>{{SUT}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>",
									"options": {
										"raw": {
											"language": "xml"
										}
									}
								},
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/resources/createAutomationRequest",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"resources",
										"createAutomationRequest"
									]
								}
							},
							"response": []
						},
						{
							"name": "wait for #complete (analysis/common input paramters/zipoutputs)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var timeoutSeconds = pm.collectionVariables.get('automation_wait_time');",
											"",
											"var waitCounter = pm.globals.get(\"waitCounter\");",
											"if(!waitCounter) {",
											"    waitCounter = 0;",
											"}",
											"",
											"if (pm.response.code != 200) { // wait for the resource to be created",
											"    if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
											"        setTimeout(function(){}, [1000]); // 1 second",
											"        waitCounter++;",
											"        postman.setNextRequest(pm.info.requestName);",
											"    } else { // timeout, reset counter",
											"        waitCounter = 0;",
											"    }",
											"} else { // wait for the automation to complete",
											"    const response = xml2Json(pm.response.text());",
											"    var state = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"][\"oslc_auto:state\"].$[\"rdf:resource\"];",
											"    if (state == \"http://open-services.net/ns/auto#inProgress\") {",
											"        if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
											"            setTimeout(function(){}, [1000]); // 1 second",
											"            waitCounter++;",
											"            postman.setNextRequest(pm.info.requestName);",
											"        } else { // timeout, reset counter",
											"            waitCounter = 0;",
											"        }",
											"    } else { // wait doen, reset counter",
											"            waitCounter = 0;",
											"    }",
											"}",
											"",
											"pm.globals.set(\"waitCounter\", waitCounter);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/resources/automationRequests/{{requestId}}",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"resources",
										"automationRequests",
										"{{requestId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get result",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// get global variable to use in this test",
											"var requestId = pm.globals.get('requestId');",
											"var serverAddr = pm.variables.get(\"server_address\");",
											"var server_context = pm.variables.get(\"server_context\");",
											"var AutomationPlanId = pm.variables.get(\"AutomationPlanId\");",
											"var test_arguments = pm.variables.get(\"arguments\");",
											"var SUT = pm.variables.get(\"SUT\");",
											"",
											"",
											"pm.test(\"Response code should be 200 (OK)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"AutomationResult state should be #complete\", function () {",
											"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#new\\\"/>\");",
											"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#inProgress\\\"/>\");",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#complete\\\"/>\");",
											"});",
											"pm.test(\"AutomationResult verdict should be #passed\", function () {",
											"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:verdict rdf:resource=\\\"http://open-services.net/ns/auto#unavailable\\\"/>\");",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:verdict rdf:resource=\\\"http://open-services.net/ns/auto#passed\\\"/>\");",
											"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#error\\\"/>\");",
											"});",
											"pm.test(\"AutomationResult statusMessage should have the expected value\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Executing analysis: \");",
											"    pm.expect(pm.response.text()).to.include(\"Analysis completed successfully\");",
											"});",
											"pm.test(\"returnCode should be 0\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<rdf:value>0</rdf:value>\");",
											"});",
											"pm.test(\"AutomationResult analysis stderr be empty (~)\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<rdf:value></rdf:value>\");",
											"});",
											"",
											"pm.test(\"AutomationResult should contain a zip contribution\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"zipedOutputs\");",
											"    pm.expect(pm.response.text()).to.include(\"This is a ZIP of all other file contributions.\");",
											"    pm.expect(pm.response.text()).to.include(\".zip</dcterms:title>\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/resources/automationResults/{{requestId}}",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"resources",
										"automationResults",
										"{{requestId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "launchCommand",
					"item": [
						{
							"name": "basic",
							"item": [
								{
									"name": "launchCommand",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response code should be 201 (created)\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"// save the request ID as a global variable for later tests to use",
													"const response = xml2Json(pm.response.text());",
													"var resrouceAbout = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"].$[\"rdf:about\"];",
													"var resourceAboutSplit = resrouceAbout.split(\"/\");",
													"var requestId = resourceAboutSplit[resourceAboutSplit.length-1];",
													"pm.globals.set('requestId', requestId);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{server_address}}/{{server_context}}/services/resources/automationPlans/dummy\" />\n\t<dcterms:title>test</dcterms:title>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>arguments</oslc:name>\n\t\t\t<rdf:value>asdfasdf</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>SUT</oslc:name>\n\t\t\t<rdf:value>{{SUT}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>",
											"options": {
												"raw": {
													"language": "xml"
												}
											}
										},
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/resources/createAutomationRequest",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"resources",
												"createAutomationRequest"
											]
										}
									},
									"response": []
								},
								{
									"name": "wait for #complete (analysis/common input paramters/launchcommand/basic)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var timeoutSeconds = pm.collectionVariables.get('automation_wait_time');",
													"",
													"var waitCounter = pm.globals.get(\"waitCounter\");",
													"if(!waitCounter) {",
													"    waitCounter = 0;",
													"}",
													"",
													"if (pm.response.code != 200) { // wait for the resource to be created",
													"    if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
													"        setTimeout(function(){}, [1000]); // 1 second",
													"        waitCounter++;",
													"        postman.setNextRequest(pm.info.requestName);",
													"    } else { // timeout, reset counter",
													"        waitCounter = 0;",
													"    }",
													"} else { // wait for the automation to complete",
													"    const response = xml2Json(pm.response.text());",
													"    var state = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"][\"oslc_auto:state\"].$[\"rdf:resource\"];",
													"    if (state == \"http://open-services.net/ns/auto#inProgress\") {",
													"        if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
													"            setTimeout(function(){}, [1000]); // 1 second",
													"            waitCounter++;",
													"            postman.setNextRequest(pm.info.requestName);",
													"        } else { // timeout, reset counter",
													"            waitCounter = 0;",
													"        }",
													"    } else { // wait doen, reset counter",
													"            waitCounter = 0;",
													"    }",
													"}",
													"",
													"pm.globals.set(\"waitCounter\", waitCounter);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/resources/automationRequests/{{requestId}}",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"resources",
												"automationRequests",
												"{{requestId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "get result",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// get global variable to use in this test",
													"var requestId = pm.globals.get('requestId');",
													"var serverAddr = pm.variables.get(\"server_address\");",
													"var server_context = pm.variables.get(\"server_context\");",
													"var AutomationPlanId = pm.variables.get(\"AutomationPlanId\");",
													"var test_arguments = pm.variables.get(\"arguments\");",
													"var SUT = pm.variables.get(\"SUT\");",
													"",
													"pm.test(\"Response code should be 200 (OK)\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"AutomationResult state should be #complete\", function () {",
													"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#new\\\"/>\");",
													"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#inProgress\\\"/>\");",
													"    pm.expect(pm.response.text()).to.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#complete\\\"/>\");",
													"});",
													"pm.test(\"AutomationResult verdict should be #passed\", function () {",
													"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:verdict rdf:resource=\\\"http://open-services.net/ns/auto#unavailable\\\"/>\");",
													"    pm.expect(pm.response.text()).to.include(\"oslc_auto:verdict rdf:resource=\\\"http://open-services.net/ns/auto#passed\\\"/>\");",
													"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#error\\\"/>\");",
													"});",
													"pm.test(\"AutomationResult statusMessage should have the expected value\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"Executing analysis: \");",
													"    pm.expect(pm.response.text()).to.include(\"Analysis completed successfully\");",
													"    var os = pm.globals.get(\"currentOS\");",
													"    if (os == \"linux\"){",
													"        pm.expect(pm.response.text()).to.include(\"dummy_tool.sh\\\"  0 --args=asdfasdf ./my_echo\");",
													"    } else if (os == \"windows_ps1\") {",
													"        pm.expect(pm.response.text()).to.include(\"dummy_tool.ps1\\\"  0 --args=asdfasdf ./my_echo\");",
													"    } else {",
													"        pm.expect(pm.response.text()).to.include(\"dummy_tool.bat\\\"  0 --args=asdfasdf ./my_echo\");",
													"    }",
													"});",
													"pm.test(\"returnCode should be 0\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"<rdf:value>0</rdf:value>\");",
													"});",
													"pm.test(\"there should be a launchSUT output parameter with the expected value\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"<oslc:name>launchSUT</oslc:name>\");",
													"    pm.expect(pm.response.text()).to.include(\"<rdf:value>True</rdf:value>\");",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/resources/automationResults/{{requestId}}",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"resources",
												"automationResults",
												"{{requestId}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "dont use",
							"item": [
								{
									"name": "launchCommand",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response code should be 201 (created)\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"// save the request ID as a global variable for later tests to use",
													"const response = xml2Json(pm.response.text());",
													"var resrouceAbout = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"].$[\"rdf:about\"];",
													"var resourceAboutSplit = resrouceAbout.split(\"/\");",
													"var requestId = resourceAboutSplit[resourceAboutSplit.length-1];",
													"pm.globals.set('requestId', requestId);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{server_address}}/{{server_context}}/services/resources/automationPlans/dummy\" />\n\t<dcterms:title>test</dcterms:title>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>arguments</oslc:name>\n\t\t\t<rdf:value>asdfasdf</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>launchSUT</oslc:name>\n\t\t\t<rdf:value>false</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>SUT</oslc:name>\n\t\t\t<rdf:value>{{SUT}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>",
											"options": {
												"raw": {
													"language": "xml"
												}
											}
										},
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/resources/createAutomationRequest",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"resources",
												"createAutomationRequest"
											]
										}
									},
									"response": []
								},
								{
									"name": "wait for #complete (analysis/common input paramters/launchcommand/dont use)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var timeoutSeconds = pm.collectionVariables.get('automation_wait_time');",
													"",
													"var waitCounter = pm.globals.get(\"waitCounter\");",
													"if(!waitCounter) {",
													"    waitCounter = 0;",
													"}",
													"",
													"if (pm.response.code != 200) { // wait for the resource to be created",
													"    if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
													"        setTimeout(function(){}, [1000]); // 1 second",
													"        waitCounter++;",
													"        postman.setNextRequest(pm.info.requestName);",
													"    } else { // timeout, reset counter",
													"        waitCounter = 0;",
													"    }",
													"} else { // wait for the automation to complete",
													"    const response = xml2Json(pm.response.text());",
													"    var state = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"][\"oslc_auto:state\"].$[\"rdf:resource\"];",
													"    if (state == \"http://open-services.net/ns/auto#inProgress\") {",
													"        if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
													"            setTimeout(function(){}, [1000]); // 1 second",
													"            waitCounter++;",
													"            postman.setNextRequest(pm.info.requestName);",
													"        } else { // timeout, reset counter",
													"            waitCounter = 0;",
													"        }",
													"    } else { // wait doen, reset counter",
													"            waitCounter = 0;",
													"    }",
													"}",
													"",
													"pm.globals.set(\"waitCounter\", waitCounter);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/resources/automationRequests/{{requestId}}",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"resources",
												"automationRequests",
												"{{requestId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "get result",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// get global variable to use in this test",
													"var requestId = pm.globals.get('requestId');",
													"var serverAddr = pm.variables.get(\"server_address\");",
													"var server_context = pm.variables.get(\"server_context\");",
													"var AutomationPlanId = pm.variables.get(\"AutomationPlanId\");",
													"var test_arguments = pm.variables.get(\"arguments\");",
													"var SUT = pm.variables.get(\"SUT\");",
													"",
													"pm.test(\"Response code should be 200 (OK)\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"AutomationResult state should be #complete\", function () {",
													"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#new\\\"/>\");",
													"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#inProgress\\\"/>\");",
													"    pm.expect(pm.response.text()).to.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#complete\\\"/>\");",
													"});",
													"pm.test(\"AutomationResult verdict should be #passed\", function () {",
													"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:verdict rdf:resource=\\\"http://open-services.net/ns/auto#unavailable\\\"/>\");",
													"    pm.expect(pm.response.text()).to.include(\"oslc_auto:verdict rdf:resource=\\\"http://open-services.net/ns/auto#passed\\\"/>\");",
													"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#error\\\"/>\");",
													"});",
													"pm.test(\"AutomationResult statusMessage should have the expected value\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"Executing analysis: \");",
													"    pm.expect(pm.response.text()).to.include(\"Analysis completed successfully\");",
													"    var os = pm.globals.get(\"currentOS\");",
													"    if (os == \"linux\"){",
													"        pm.expect(pm.response.text()).to.include(\"dummy_tool.sh\\\"  0 --args=asdfasdf  gcc -g\");",
													"    } else if (os == \"windows_ps1\") {",
													"        pm.expect(pm.response.text()).to.include(\"dummy_tool.ps1\\\"  0 --args=asdfasdf  gcc -g\");",
													"    } else {",
													"        pm.expect(pm.response.text()).to.include(\"dummy_tool.bat\\\"  0 --args=asdfasdf  gcc -g\");",
													"    }",
													"});",
													"pm.test(\"returnCode should be 0\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"<rdf:value>0</rdf:value>\");",
													"});",
													"pm.test(\"there should be a launchSUT output parameter with the expected value\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"<oslc:name>launchSUT</oslc:name>\");",
													"    pm.expect(pm.response.text()).to.include(\"<rdf:value>True</rdf:value>\");",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/resources/automationResults/{{requestId}}",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"resources",
												"automationResults",
												"{{requestId}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "buildCommand",
					"item": [
						{
							"name": "buildCommand",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response code should be 201 (created)\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"// save the request ID as a global variable for later tests to use",
											"const response = xml2Json(pm.response.text());",
											"var resrouceAbout = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"].$[\"rdf:about\"];",
											"var resourceAboutSplit = resrouceAbout.split(\"/\");",
											"var requestId = resourceAboutSplit[resourceAboutSplit.length-1];",
											"pm.globals.set('requestId', requestId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{server_address}}/{{server_context}}/services/resources/automationPlans/dummy\" />\n\t<dcterms:title>test</dcterms:title>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>arguments</oslc:name>\n\t\t\t<rdf:value>asdfasdf</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>SUT</oslc:name>\n\t\t\t<rdf:value>{{SUT}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>",
									"options": {
										"raw": {
											"language": "xml"
										}
									}
								},
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/resources/createAutomationRequest",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"resources",
										"createAutomationRequest"
									]
								}
							},
							"response": []
						},
						{
							"name": "wait for #complete (analysis/common input paramters/buildcommand)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var timeoutSeconds = pm.collectionVariables.get('automation_wait_time');",
											"",
											"var waitCounter = pm.globals.get(\"waitCounter\");",
											"if(!waitCounter) {",
											"    waitCounter = 0;",
											"}",
											"",
											"if (pm.response.code != 200) { // wait for the resource to be created",
											"    if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
											"        setTimeout(function(){}, [1000]); // 1 second",
											"        waitCounter++;",
											"        postman.setNextRequest(pm.info.requestName);",
											"    } else { // timeout, reset counter",
											"        waitCounter = 0;",
											"    }",
											"} else { // wait for the automation to complete",
											"    const response = xml2Json(pm.response.text());",
											"    var state = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"][\"oslc_auto:state\"].$[\"rdf:resource\"];",
											"    if (state == \"http://open-services.net/ns/auto#inProgress\") {",
											"        if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
											"            setTimeout(function(){}, [1000]); // 1 second",
											"            waitCounter++;",
											"            postman.setNextRequest(pm.info.requestName);",
											"        } else { // timeout, reset counter",
											"            waitCounter = 0;",
											"        }",
											"    } else { // wait doen, reset counter",
											"            waitCounter = 0;",
											"    }",
											"}",
											"",
											"pm.globals.set(\"waitCounter\", waitCounter);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/resources/automationRequests/{{requestId}}",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"resources",
										"automationRequests",
										"{{requestId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get result",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// get global variable to use in this test",
											"var requestId = pm.globals.get('requestId');",
											"var serverAddr = pm.variables.get(\"server_address\");",
											"var server_context = pm.variables.get(\"server_context\");",
											"var AutomationPlanId = pm.variables.get(\"AutomationPlanId\");",
											"var test_arguments = pm.variables.get(\"arguments\");",
											"var SUT = pm.variables.get(\"SUT\");",
											"",
											"pm.test(\"Response code should be 200 (OK)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"AutomationResult state should be #complete\", function () {",
											"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#new\\\"/>\");",
											"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#inProgress\\\"/>\");",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#complete\\\"/>\");",
											"});",
											"pm.test(\"AutomationResult verdict should be #passed\", function () {",
											"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:verdict rdf:resource=\\\"http://open-services.net/ns/auto#unavailable\\\"/>\");",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:verdict rdf:resource=\\\"http://open-services.net/ns/auto#passed\\\"/>\");",
											"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#error\\\"/>\");",
											"});",
											"pm.test(\"AutomationResult statusMessage should have the expected value\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Executing analysis: \");",
											"    pm.expect(pm.response.text()).to.include(\"Analysis completed successfully\");",
											"    pm.expect(pm.response.text()).to.include(\"gcc -g TestEchoProgram.cpp -o my_echo\");",
											"});",
											"pm.test(\"returnCode should be 0\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<rdf:value>0</rdf:value>\");",
											"});",
											"pm.test(\"there should be a SUTbuildCommand output parameter with the expected value\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<oslc:name>SUTbuildCommand</oslc:name>\");",
											"    pm.expect(pm.response.text()).to.include(\"<rdf:value>True</rdf:value>\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/resources/automationResults/{{requestId}}",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"resources",
										"automationResults",
										"{{requestId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "toolCommand",
					"item": [
						{
							"name": "toolCommand",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"pm.test(\"Response code should be 201 (created)\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"",
											"// save the request ID as a global variable for later tests to use",
											"const response = xml2Json(pm.response.text());",
											"var resrouceAbout = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"].$[\"rdf:about\"];",
											"var resourceAboutSplit = resrouceAbout.split(\"/\");",
											"var requestId = resourceAboutSplit[resourceAboutSplit.length-1];",
											"pm.globals.set('requestId', requestId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{server_address}}/{{server_context}}/services/resources/automationPlans/dummy\" />\n\t<dcterms:title>test</dcterms:title>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>arguments</oslc:name>\n\t\t\t<rdf:value></rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>outputFileRegex</oslc:name>\n\t\t\t<rdf:value>.*</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>toolCommand</oslc:name>\n\t\t\t<rdf:value>false</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>SUT</oslc:name>\n\t\t\t<rdf:value>{{SUT}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>",
									"options": {
										"raw": {
											"language": "xml"
										}
									}
								},
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/resources/createAutomationRequest",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"resources",
										"createAutomationRequest"
									]
								}
							},
							"response": []
						},
						{
							"name": "wait for #complete (analysis/common input paramters/toolcommand)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var timeoutSeconds = pm.collectionVariables.get('automation_wait_time');",
											"",
											"var waitCounter = pm.globals.get(\"waitCounter\");",
											"if(!waitCounter) {",
											"    waitCounter = 0;",
											"}",
											"",
											"if (pm.response.code != 200) { // wait for the resource to be created",
											"    if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
											"        setTimeout(function(){}, [1000]); // 1 second",
											"        waitCounter++;",
											"        postman.setNextRequest(pm.info.requestName);",
											"    } else { // timeout, reset counter",
											"        waitCounter = 0;",
											"    }",
											"} else { // wait for the automation to complete",
											"    const response = xml2Json(pm.response.text());",
											"    var state = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"][\"oslc_auto:state\"].$[\"rdf:resource\"];",
											"    if (state == \"http://open-services.net/ns/auto#inProgress\") {",
											"        if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
											"            setTimeout(function(){}, [1000]); // 1 second",
											"            waitCounter++;",
											"            postman.setNextRequest(pm.info.requestName);",
											"        } else { // timeout, reset counter",
											"            waitCounter = 0;",
											"        }",
											"    } else { // wait doen, reset counter",
											"            waitCounter = 0;",
											"    }",
											"}",
											"",
											"pm.globals.set(\"waitCounter\", waitCounter);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/resources/automationRequests/{{requestId}}",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"resources",
										"automationRequests",
										"{{requestId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get result",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// get global variable to use in this test",
											"var requestId = pm.globals.get('requestId');",
											"var serverAddr = pm.variables.get(\"server_address\");",
											"var server_context = pm.variables.get(\"server_context\");",
											"var AutomationPlanId = pm.variables.get(\"AutomationPlanId\");",
											"var test_arguments = pm.variables.get(\"arguments\");",
											"var SUT = pm.variables.get(\"SUT\");",
											"",
											"",
											"pm.test(\"Response code should be 200 (OK)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"AutomationResult state should be #complete\", function () {",
											"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#new\\\"/>\");",
											"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#inProgress\\\"/>\");",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#complete\\\"/>\");",
											"});",
											"pm.test(\"AutomationResult verdict should be #failed\", function () {",
											"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:verdict rdf:resource=\\\"http://open-services.net/ns/auto#unavailable\\\"/>\");",
											"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:verdict rdf:resource=\\\"http://open-services.net/ns/auto#passed\\\"/>\");",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:verdict rdf:resource=\\\"http://open-services.net/ns/auto#failed\\\"/>\");",
											"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:verdict rdf:resource=\\\"http://open-services.net/ns/auto#error\\\"/>\");",
											"});",
											"",
											"pm.test(\"AutomationResult statusMessage should have the expected value\", function () {",
											"        pm.expect(pm.response.text()).to.include(\"Executing analysis:   0 --args= ./my_echo gcc -g TestEchoProgram.cpp -o my_echo\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/resources/automationResults/{{requestId}}",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"resources",
										"automationResults",
										"{{requestId}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "confFile",
					"item": [
						{
							"name": "basic",
							"item": [
								{
									"name": "confFile",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response code should be 201 (created)\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"",
													"// save the request ID as a global variable for later tests to use",
													"const response = xml2Json(pm.response.text());",
													"var resrouceAbout = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"].$[\"rdf:about\"];",
													"var resourceAboutSplit = resrouceAbout.split(\"/\");",
													"var requestId = resourceAboutSplit[resourceAboutSplit.length-1];",
													"pm.globals.set('requestId', requestId);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{server_address}}/{{server_context}}/services/resources/automationPlans/dummy\" />\n\t<dcterms:title>test</dcterms:title>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>arguments</oslc:name>\n\t\t\t<rdf:value>asdfasdf</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>confFile</oslc:name>\n\t\t\t<rdf:value>test_conf_file.conf\nTest conf file contents\nwith a new line</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>SUT</oslc:name>\n\t\t\t<rdf:value>{{SUT}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>",
											"options": {
												"raw": {
													"language": "xml"
												}
											}
										},
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/resources/createAutomationRequest",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"resources",
												"createAutomationRequest"
											]
										}
									},
									"response": []
								},
								{
									"name": "wait for #complete (analysis/common input paramters/confFile/basic)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var timeoutSeconds = pm.collectionVariables.get('automation_wait_time');",
													"",
													"var waitCounter = pm.globals.get(\"waitCounter\");",
													"if(!waitCounter) {",
													"    waitCounter = 0;",
													"}",
													"",
													"if (pm.response.code != 200) { // wait for the resource to be created",
													"    if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
													"        setTimeout(function(){}, [1000]); // 1 second",
													"        waitCounter++;",
													"        postman.setNextRequest(pm.info.requestName);",
													"    } else { // timeout, reset counter",
													"        waitCounter = 0;",
													"    }",
													"} else { // wait for the automation to complete",
													"    const response = xml2Json(pm.response.text());",
													"    var state = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"][\"oslc_auto:state\"].$[\"rdf:resource\"];",
													"    if (state == \"http://open-services.net/ns/auto#inProgress\") {",
													"        if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
													"            setTimeout(function(){}, [1000]); // 1 second",
													"            waitCounter++;",
													"            postman.setNextRequest(pm.info.requestName);",
													"        } else { // timeout, reset counter",
													"            waitCounter = 0;",
													"        }",
													"    } else { // wait doen, reset counter",
													"            waitCounter = 0;",
													"    }",
													"}",
													"",
													"pm.globals.set(\"waitCounter\", waitCounter);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/resources/automationRequests/{{requestId}}",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"resources",
												"automationRequests",
												"{{requestId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "get result",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// get global variable to use in this test",
													"var requestId = pm.globals.get('requestId');",
													"var serverAddr = pm.variables.get(\"server_address\");",
													"var server_context = pm.variables.get(\"server_context\");",
													"var AutomationPlanId = pm.variables.get(\"AutomationPlanId\");",
													"var test_arguments = pm.variables.get(\"arguments\");",
													"var SUT = pm.variables.get(\"SUT\");",
													"",
													"",
													"pm.test(\"Response code should be 200 (OK)\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"AutomationResult state should be #complete\", function () {",
													"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#new\\\"/>\");",
													"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#inProgress\\\"/>\");",
													"    pm.expect(pm.response.text()).to.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#complete\\\"/>\");",
													"});",
													"pm.test(\"AutomationResult verdict should be #passed\", function () {",
													"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:verdict rdf:resource=\\\"http://open-services.net/ns/auto#unavailable\\\"/>\");",
													"    pm.expect(pm.response.text()).to.include(\"oslc_auto:verdict rdf:resource=\\\"http://open-services.net/ns/auto#passed\\\"/>\");",
													"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#error\\\"/>\");",
													"});",
													"pm.test(\"AutomationResult statusMessage should have the expected value\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"Executing analysis: \");",
													"    pm.expect(pm.response.text()).to.include(\"Analysis completed successfully\");",
													"    pm.expect(pm.response.text()).to.include(\"Creating conf file \\\"test_conf_file.conf\\\"\");",
													"});",
													"pm.test(\"returnCode should be 0\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"<rdf:value>0</rdf:value>\");",
													"});",
													"pm.test(\"AutomationResult analysis stderr be empty (~)\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"<rdf:value></rdf:value>\");",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/resources/automationResults/{{requestId}}",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"resources",
												"automationResults",
												"{{requestId}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "multiple files",
							"item": [
								{
									"name": "confFile",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response code should be 201 (created)\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"",
													"// save the request ID as a global variable for later tests to use",
													"const response = xml2Json(pm.response.text());",
													"var resrouceAbout = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"].$[\"rdf:about\"];",
													"var resourceAboutSplit = resrouceAbout.split(\"/\");",
													"var requestId = resourceAboutSplit[resourceAboutSplit.length-1];",
													"pm.globals.set('requestId', requestId);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{server_address}}/{{server_context}}/services/resources/automationPlans/dummy\" />\n\t<dcterms:title>test</dcterms:title>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>outputFileRegex</oslc:name>\n\t\t\t<rdf:value>.*</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>arguments</oslc:name>\n\t\t\t<rdf:value>asdfasdf</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>confFile</oslc:name>\n\t\t\t<rdf:value>conf/test_conf_file1.conf\nTest conf file1 contents</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>confFile</oslc:name>\n\t\t\t<rdf:value>conf/test_conf_file2.conf\nTest conf file2 contents</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>confFile</oslc:name>\n\t\t\t<rdf:value>conf/test_conf_file3.conf\nTest conf file3 contents</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>SUT</oslc:name>\n\t\t\t<rdf:value>{{SUT}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>",
											"options": {
												"raw": {
													"language": "xml"
												}
											}
										},
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/resources/createAutomationRequest",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"resources",
												"createAutomationRequest"
											]
										}
									},
									"response": []
								},
								{
									"name": "wait for #complete (analysis/common input paramters/confFile/multiple files)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var timeoutSeconds = pm.collectionVariables.get('automation_wait_time');",
													"",
													"var waitCounter = pm.globals.get(\"waitCounter\");",
													"if(!waitCounter) {",
													"    waitCounter = 0;",
													"}",
													"",
													"if (pm.response.code != 200) { // wait for the resource to be created",
													"    if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
													"        setTimeout(function(){}, [1000]); // 1 second",
													"        waitCounter++;",
													"        postman.setNextRequest(pm.info.requestName);",
													"    } else { // timeout, reset counter",
													"        waitCounter = 0;",
													"    }",
													"} else { // wait for the automation to complete",
													"    const response = xml2Json(pm.response.text());",
													"    var state = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"][\"oslc_auto:state\"].$[\"rdf:resource\"];",
													"    if (state == \"http://open-services.net/ns/auto#inProgress\") {",
													"        if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
													"            setTimeout(function(){}, [1000]); // 1 second",
													"            waitCounter++;",
													"            postman.setNextRequest(pm.info.requestName);",
													"        } else { // timeout, reset counter",
													"            waitCounter = 0;",
													"        }",
													"    } else { // wait doen, reset counter",
													"            waitCounter = 0;",
													"    }",
													"}",
													"",
													"pm.globals.set(\"waitCounter\", waitCounter);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/resources/automationRequests/{{requestId}}",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"resources",
												"automationRequests",
												"{{requestId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "get result",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// get global variable to use in this test",
													"var requestId = pm.globals.get('requestId');",
													"var serverAddr = pm.variables.get(\"server_address\");",
													"var server_context = pm.variables.get(\"server_context\");",
													"var AutomationPlanId = pm.variables.get(\"AutomationPlanId\");",
													"var test_arguments = pm.variables.get(\"arguments\");",
													"var SUT = pm.variables.get(\"SUT\");",
													"",
													"",
													"pm.test(\"Response code should be 200 (OK)\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"AutomationResult state should be #complete\", function () {",
													"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#new\\\"/>\");",
													"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#inProgress\\\"/>\");",
													"    pm.expect(pm.response.text()).to.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#complete\\\"/>\");",
													"});",
													"pm.test(\"AutomationResult verdict should be #passed\", function () {",
													"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:verdict rdf:resource=\\\"http://open-services.net/ns/auto#unavailable\\\"/>\");",
													"    pm.expect(pm.response.text()).to.include(\"oslc_auto:verdict rdf:resource=\\\"http://open-services.net/ns/auto#passed\\\"/>\");",
													"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#error\\\"/>\");",
													"});",
													"pm.test(\"AutomationResult statusMessage should have the expected value\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"Executing analysis: \");",
													"    pm.expect(pm.response.text()).to.include(\"Analysis completed successfully\");",
													"    pm.expect(pm.response.text()).to.include(\"Creating conf file \\\"conf/test_conf_file1.conf\\\"\");",
													"    pm.expect(pm.response.text()).to.include(\"Creating conf file \\\"conf/test_conf_file2.conf\\\"\");",
													"    pm.expect(pm.response.text()).to.include(\"Creating conf file \\\"conf/test_conf_file3.conf\\\"\");",
													"});",
													"pm.test(\"conf files should be visible as contributions\", function () {",
													"    var os = pm.globals.get(\"currentOS\");",
													"    if (os == \"linux\"){",
													"        pm.expect(pm.response.text()).to.include(\"conf/test_conf_file1.conf</fit:filePath>\");",
													"        pm.expect(pm.response.text()).to.include(\"conf/test_conf_file2.conf</fit:filePath>\");",
													"        pm.expect(pm.response.text()).to.include(\"conf/test_conf_file3.conf</fit:filePath>\");",
													"    } else {",
													"        pm.expect(pm.response.text()).to.include(\"conf\\\\test_conf_file1.conf</fit:filePath>\");",
													"        pm.expect(pm.response.text()).to.include(\"conf\\\\test_conf_file2.conf</fit:filePath>\");",
													"        pm.expect(pm.response.text()).to.include(\"conf\\\\test_conf_file3.conf</fit:filePath>\");",
													"    }",
													"});",
													"",
													"pm.test(\"returnCode should be 0\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"<rdf:value>0</rdf:value>\");",
													"});",
													"pm.test(\"AutomationResult analysis stderr be empty (~)\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"<rdf:value></rdf:value>\");",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/resources/automationResults/{{requestId}}",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"resources",
												"automationResults",
												"{{requestId}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "invalid value",
							"item": [
								{
									"name": "confFile",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response code should be 400 (bad request)\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Error msg should be - invalid format...\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"<oslc:message>AutomationRequest NOT created - Invalid format of confFile value. No \\\"\\\\n\\\" delimiter found. Expected format: filename\\\\nfile_contents\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{server_address}}/{{server_context}}/services/resources/automationPlans/dummy\" />\n\t<dcterms:title>test</dcterms:title>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>arguments</oslc:name>\n\t\t\t<rdf:value>asdfasdf</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>confFile</oslc:name>\n\t\t\t<rdf:value>test_conf_file.conf</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>SUT</oslc:name>\n\t\t\t<rdf:value>{{SUT}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>",
											"options": {
												"raw": {
													"language": "xml"
												}
											}
										},
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/resources/createAutomationRequest",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"resources",
												"createAutomationRequest"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "confDir",
					"item": [
						{
							"name": "basic",
							"item": [
								{
									"name": "confFile",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response code should be 201 (created)\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"",
													"// save the request ID as a global variable for later tests to use",
													"const response = xml2Json(pm.response.text());",
													"var resrouceAbout = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"].$[\"rdf:about\"];",
													"var resourceAboutSplit = resrouceAbout.split(\"/\");",
													"var requestId = resourceAboutSplit[resourceAboutSplit.length-1];",
													"pm.globals.set('requestId', requestId);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{server_address}}/{{server_context}}/services/resources/automationPlans/dummy\" />\n\t<dcterms:title>test</dcterms:title>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>arguments</oslc:name>\n\t\t\t<rdf:value>asdfasdf</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>confDir</oslc:name>\n\t\t\t<rdf:value>anacondaConf\</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>SUT</oslc:name>\n\t\t\t<rdf:value>{{SUT}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>",
											"options": {
												"raw": {
													"language": "xml"
												}
											}
										},
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/resources/createAutomationRequest",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"resources",
												"createAutomationRequest"
											]
										}
									},
									"response": []
								},
								{
									"name": "wait for #complete (analysis/common input paramters/confDir/basic)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var timeoutSeconds = pm.collectionVariables.get('automation_wait_time');",
													"",
													"var waitCounter = pm.globals.get(\"waitCounter\");",
													"if(!waitCounter) {",
													"    waitCounter = 0;",
													"}",
													"",
													"if (pm.response.code != 200) { // wait for the resource to be created",
													"    if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
													"        setTimeout(function(){}, [1000]); // 1 second",
													"        waitCounter++;",
													"        postman.setNextRequest(pm.info.requestName);",
													"    } else { // timeout, reset counter",
													"        waitCounter = 0;",
													"    }",
													"} else { // wait for the automation to complete",
													"    const response = xml2Json(pm.response.text());",
													"    var state = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"][\"oslc_auto:state\"].$[\"rdf:resource\"];",
													"    if (state == \"http://open-services.net/ns/auto#inProgress\") {",
													"        if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
													"            setTimeout(function(){}, [1000]); // 1 second",
													"            waitCounter++;",
													"            postman.setNextRequest(pm.info.requestName);",
													"        } else { // timeout, reset counter",
													"            waitCounter = 0;",
													"        }",
													"    } else { // wait doen, reset counter",
													"            waitCounter = 0;",
													"    }",
													"}",
													"",
													"pm.globals.set(\"waitCounter\", waitCounter);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/resources/automationRequests/{{requestId}}",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"resources",
												"automationRequests",
												"{{requestId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "get result",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// get global variable to use in this test",
													"var requestId = pm.globals.get('requestId');",
													"var serverAddr = pm.variables.get(\"server_address\");",
													"var server_context = pm.variables.get(\"server_context\");",
													"var AutomationPlanId = pm.variables.get(\"AutomationPlanId\");",
													"var test_arguments = pm.variables.get(\"arguments\");",
													"var SUT = pm.variables.get(\"SUT\");",
													"",
													"",
													"pm.test(\"Response code should be 200 (OK)\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"AutomationResult state should be #complete\", function () {",
													"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#new\\\"/>\");",
													"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#inProgress\\\"/>\");",
													"    pm.expect(pm.response.text()).to.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#complete\\\"/>\");",
													"});",
													"pm.test(\"AutomationResult verdict should be #passed\", function () {",
													"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:verdict rdf:resource=\\\"http://open-services.net/ns/auto#unavailable\\\"/>\");",
													"    pm.expect(pm.response.text()).to.include(\"oslc_auto:verdict rdf:resource=\\\"http://open-services.net/ns/auto#passed\\\"/>\");",
													"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#error\\\"/>\");",
													"});",
													"pm.test(\"AutomationResult statusMessage should have the expected value\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"Executing analysis: \");",
													"    pm.expect(pm.response.text()).to.include(\"Analysis completed successfully\");",
													"    pm.expect(pm.response.text()).to.include(\"Creating conf directory \\\"anacondaConf\\\"\");",
													"});",
													"pm.test(\"returnCode should be 0\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"<rdf:value>0</rdf:value>\");",
													"});",
													"pm.test(\"AutomationResult analysis stderr be empty (~)\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"<rdf:value></rdf:value>\");",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/resources/automationResults/{{requestId}}",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"resources",
												"automationResults",
												"{{requestId}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "invalid values",
							"item": [
								{
									"name": "invalid base64 chars",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response code should be 400 (bad request)\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Error msg should be - invalid format...\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"<oslc:message>AutomationRequest NOT created - Invalid format of confDir value. No \\\"\\\\n\\\" delimiter found or invalid base64 encoding. Expected format: dir_name\\\\nbase64_encoded_zip\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{server_address}}/{{server_context}}/services/resources/automationPlans/dummy\" />\n\t<dcterms:title>test</dcterms:title>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>arguments</oslc:name>\n\t\t\t<rdf:value>asdfasdf</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>confDir</oslc:name>\n\t\t\t<rdf:value>anacondaConf\n            </rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>SUT</oslc:name>\n\t\t\t<rdf:value>{{SUT}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>",
											"options": {
												"raw": {
													"language": "xml"
												}
											}
										},
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/resources/createAutomationRequest",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"resources",
												"createAutomationRequest"
											]
										}
									},
									"response": []
								},
								{
									"name": "missing new line",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response code should be 400 (bad request)\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Error msg should be - invalid format...\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"<oslc:message>AutomationRequest NOT created - Invalid format of confDir value. No \\\"\\\\n\\\" delimiter found or invalid base64 encoding. Expected format: dir_name\\\\nbase64_encoded_zip\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{server_address}}/{{server_context}}/services/resources/automationPlans/dummy\" />\n\t<dcterms:title>test</dcterms:title>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>arguments</oslc:name>\n\t\t\t<rdf:value>asdfasdf</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>confDir</oslc:name>\n\t\t\t<rdf:value>testPath</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>SUT</oslc:name>\n\t\t\t<rdf:value>{{SUT}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>",
											"options": {
												"raw": {
													"language": "xml"
												}
											}
										},
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/resources/createAutomationRequest",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"resources",
												"createAutomationRequest"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "beforeCommand",
					"item": [
						{
							"name": "basic",
							"item": [
								{
									"name": "create request",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Response code should be 201 (created)\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"",
													"// save the request ID as a global variable for later tests to use",
													"const response = xml2Json(pm.response.text());",
													"var resrouceAbout = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"].$[\"rdf:about\"];",
													"var resourceAboutSplit = resrouceAbout.split(\"/\");",
													"var requestId = resourceAboutSplit[resourceAboutSplit.length-1];",
													"pm.globals.set('requestId', requestId);",
													"",
													"",
													"                ",
													"pm.test(\"should include the beforeCommand parameter\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"<oslc:name>beforeCommand</oslc:name>\");",
													"    var os = pm.globals.get(\"currentOS\");",
													"    if (os == \"windows_bat\"){",
													"        pm.expect(pm.response.text()).to.include(\"echo test before command file contents &gt; beforeCommandTestFile &amp; cat beforeCommandTestFile\");",
													"    } else {",
													"        pm.expect(pm.response.text()).to.include(\"echo \\\"test before command file contents\\\" &gt; beforeCommandTestFile ; cat beforeCommandTestFile\");",
													"    }",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var os = pm.globals.get(\"currentOS\");\r",
													"if (os == \"linux\"){\r",
													"    pm.globals.set(\"beforeCommand\", \"echo \\\"test before command file contents\\\" > beforeCommandTestFile ; cat beforeCommandTestFile\");\r",
													"} else if (os == \"windows_ps1\") {\r",
													"    pm.globals.set(\"beforeCommand\", \"echo \\\"test before command file contents\\\" > beforeCommandTestFile ; cat beforeCommandTestFile\");\r",
													"} else { // os == \"windows_bat\")\r",
													"    pm.globals.set(\"beforeCommand\", \"echo test before command file contents > beforeCommandTestFile &amp; cat beforeCommandTestFile\");\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{server_address}}/{{server_context}}/services/resources/automationPlans/dummy\" />\n\t<dcterms:title>test</dcterms:title>\n\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>arguments</oslc:name>\n\t\t\t<rdf:value>asdfasdf</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>beforeCommand</oslc:name>\n\t\t\t<rdf:value>{{beforeCommand}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>outputFileRegex</oslc:name>\n\t\t\t<rdf:value>.*</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>SUT</oslc:name>\n\t\t\t<rdf:value>{{SUT}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>",
											"options": {
												"raw": {
													"language": "xml"
												}
											}
										},
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/resources/createAutomationRequest",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"resources",
												"createAutomationRequest"
											]
										}
									},
									"response": []
								},
								{
									"name": "wait for #complete (analysis/common input paramters/beforeCommand/basic)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var timeoutSeconds = pm.collectionVariables.get('automation_wait_time');",
													"",
													"var waitCounter = pm.globals.get(\"waitCounter\");",
													"if(!waitCounter) {",
													"    waitCounter = 0;",
													"}",
													"",
													"if (pm.response.code != 200) { // wait for the resource to be created",
													"    if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
													"        setTimeout(function(){}, [1000]); // 1 second",
													"        waitCounter++;",
													"        postman.setNextRequest(pm.info.requestName);",
													"    } else { // timeout, reset counter",
													"        waitCounter = 0;",
													"    }",
													"} else { // wait for the automation to complete",
													"    const response = xml2Json(pm.response.text());",
													"    var state = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"][\"oslc_auto:state\"].$[\"rdf:resource\"];",
													"    if (state == \"http://open-services.net/ns/auto#inProgress\") {",
													"        if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
													"            setTimeout(function(){}, [1000]); // 1 second",
													"            waitCounter++;",
													"            postman.setNextRequest(pm.info.requestName);",
													"        } else { // timeout, reset counter",
													"            waitCounter = 0;",
													"        }",
													"    } else { // wait doen, reset counter",
													"            waitCounter = 0;",
													"    }",
													"}",
													"",
													"pm.globals.set(\"waitCounter\", waitCounter);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/resources/automationRequests/{{requestId}}",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"resources",
												"automationRequests",
												"{{requestId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "get result",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// get global variable to use in this test",
													"var requestId = pm.globals.get('requestId');",
													"var serverAddr = pm.variables.get(\"server_address\");",
													"var server_context = pm.variables.get(\"server_context\");",
													"var AutomationPlanId = pm.variables.get(\"AutomationPlanId\");",
													"var test_arguments = pm.variables.get(\"arguments\");",
													"var SUT = pm.variables.get(\"SUT\");",
													"",
													"",
													"pm.test(\"Response code should be 200 (OK)\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"AutomationResult state should be #complete\", function () {",
													"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#new\\\"/>\");",
													"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#inProgress\\\"/>\");",
													"    pm.expect(pm.response.text()).to.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#complete\\\"/>\");",
													"});",
													"pm.test(\"AutomationResult verdict should be #passed\", function () {",
													"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:verdict rdf:resource=\\\"http://open-services.net/ns/auto#unavailable\\\"/>\");",
													"    pm.expect(pm.response.text()).to.include(\"oslc_auto:verdict rdf:resource=\\\"http://open-services.net/ns/auto#passed\\\"/>\");",
													"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#error\\\"/>\");",
													"});",
													"pm.test(\"AutomationResult analysis statusMessage should have the expected value\", function () {",
													"    var os = pm.globals.get(\"currentOS\");",
													"    if (os == \"windows_bat\"){",
													"        pm.expect(pm.response.text()).to.include(\"<rdf:value>Executing beforeCommand: echo test before command file contents &gt; beforeCommandTestFile &amp; cat beforeCommandTestFile\");",
													"    } else {",
													"        pm.expect(pm.response.text()).to.include(\"<rdf:value>Executing beforeCommand: echo \\\"test before command file contents\\\" &gt; beforeCommandTestFile ; cat beforeCommandTestFile\");",
													"    }",
													"    pm.expect(pm.response.text()).to.include(\"Executing analysis: \");",
													"    pm.expect(pm.response.text()).to.include(\"Analysis completed successfully\");",
													"});",
													"pm.test(\"returnCode should be 0\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"<rdf:value>0</rdf:value>\");",
													"});",
													"pm.test(\"AutomationResult analysis stderr be empty (~)\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"<rdf:value></rdf:value>\");",
													"});",
													"",
													"pm.test(\"should include the beforeCommand parameter\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"<oslc:name>beforeCommand</oslc:name>\");",
													"    var os = pm.globals.get(\"currentOS\");",
													"    if (os == \"windows_bat\"){",
													"        pm.expect(pm.response.text()).to.include(\"echo test before command file contents &gt; beforeCommandTestFile &amp; cat beforeCommandTestFile\");",
													"    } else {",
													"        pm.expect(pm.response.text()).to.include(\"echo \\\"test before command file contents\\\" &gt; beforeCommandTestFile ; cat beforeCommandTestFile\");",
													"    }",
													"});",
													"",
													"pm.test(\"should include the beforeCommandStdout\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"<dcterms:title rdf:parseType=\\\"Literal\\\">beforeCommandStdout</dcterms:title>\");",
													"});",
													"pm.test(\"beforeCommandStdout should have the expected value\", function () {",
													"        pm.expect(pm.response.text()).to.include(\"<rdf:value>test before command file contents\");",
													"});",
													"",
													"pm.test(\"should include the beforeCommandStderr\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"<dcterms:title rdf:parseType=\\\"Literal\\\">beforeCommandStderr</dcterms:title>\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/resources/automationResults/{{requestId}}",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"resources",
												"automationResults",
												"{{requestId}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "command fail",
							"item": [
								{
									"name": "create request",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Response code should be 201 (created)\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"",
													"// save the request ID as a global variable for later tests to use",
													"const response = xml2Json(pm.response.text());",
													"var resrouceAbout = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"].$[\"rdf:about\"];",
													"var resourceAboutSplit = resrouceAbout.split(\"/\");",
													"var requestId = resourceAboutSplit[resourceAboutSplit.length-1];",
													"pm.globals.set('requestId', requestId);",
													"",
													"",
													"                ",
													"pm.test(\"should include the beforeCommand parameter\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"<oslc:name>beforeCommand</oslc:name>\");",
													"    pm.expect(pm.response.text()).to.include(\"<rdf:value>invalidCommand</rdf:value>\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{server_address}}/{{server_context}}/services/resources/automationPlans/dummy\" />\n\t<dcterms:title>test</dcterms:title>\n\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>arguments</oslc:name>\n\t\t\t<rdf:value>asdfasdf</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>beforeCommand</oslc:name>\n\t\t\t<rdf:value>invalidCommand</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>outputFileRegex</oslc:name>\n\t\t\t<rdf:value>.*</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>SUT</oslc:name>\n\t\t\t<rdf:value>{{SUT}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>",
											"options": {
												"raw": {
													"language": "xml"
												}
											}
										},
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/resources/createAutomationRequest",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"resources",
												"createAutomationRequest"
											]
										}
									},
									"response": []
								},
								{
									"name": "wait for #complete (analysis/common input paramters/beforeCommand/command fail)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var timeoutSeconds = pm.collectionVariables.get('automation_wait_time');",
													"",
													"var waitCounter = pm.globals.get(\"waitCounter\");",
													"if(!waitCounter) {",
													"    waitCounter = 0;",
													"}",
													"",
													"if (pm.response.code != 200) { // wait for the resource to be created",
													"    if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
													"        setTimeout(function(){}, [1000]); // 1 second",
													"        waitCounter++;",
													"        postman.setNextRequest(pm.info.requestName);",
													"    } else { // timeout, reset counter",
													"        waitCounter = 0;",
													"    }",
													"} else { // wait for the automation to complete",
													"    const response = xml2Json(pm.response.text());",
													"    var state = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"][\"oslc_auto:state\"].$[\"rdf:resource\"];",
													"    if (state == \"http://open-services.net/ns/auto#inProgress\") {",
													"        if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
													"            setTimeout(function(){}, [1000]); // 1 second",
													"            waitCounter++;",
													"            postman.setNextRequest(pm.info.requestName);",
													"        } else { // timeout, reset counter",
													"            waitCounter = 0;",
													"        }",
													"    } else { // wait doen, reset counter",
													"            waitCounter = 0;",
													"    }",
													"}",
													"",
													"pm.globals.set(\"waitCounter\", waitCounter);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/resources/automationRequests/{{requestId}}",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"resources",
												"automationRequests",
												"{{requestId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "get result",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// get global variable to use in this test",
													"var requestId = pm.globals.get('requestId');",
													"var serverAddr = pm.variables.get(\"server_address\");",
													"var server_context = pm.variables.get(\"server_context\");",
													"var AutomationPlanId = pm.variables.get(\"AutomationPlanId\");",
													"var test_arguments = pm.variables.get(\"arguments\");",
													"var SUT = pm.variables.get(\"SUT\");",
													"",
													"",
													"pm.test(\"Response code should be 200 (OK)\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"AutomationResult state should be #complete\", function () {",
													"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#new\\\"/>\");",
													"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#inProgress\\\"/>\");",
													"    pm.expect(pm.response.text()).to.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#complete\\\"/>\");",
													"});",
													"pm.test(\"AutomationResult verdict should be #failed\", function () {",
													"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:verdict rdf:resource=\\\"http://open-services.net/ns/auto#unavailable\\\"/>\");",
													"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:verdict rdf:resource=\\\"http://open-services.net/ns/auto#passed\\\"/>\");",
													"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:verdict rdf:resource=\\\"http://open-services.net/ns/auto#error\\\"/>\");",
													"    pm.expect(pm.response.text()).to.include(\"oslc_auto:verdict rdf:resource=\\\"http://open-services.net/ns/auto#failed\\\"/>\");",
													"});",
													"pm.test(\"AutomationResult analysis statusMessage should have the expected value\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"<rdf:value>Executing beforeCommand: invalidCommand\");",
													"    pm.expect(pm.response.text()).to.include(\"BeforeCommand failed (returned non-zero:\");",
													"    pm.expect(pm.response.text()).to.include(\"Skipping analysis due to previous failures\");",
													"});",
													"pm.test(\"analysis should have not been executed\", function () {",
													"    pm.expect(pm.response.text()).to.not.include(\"<dcterms:title rdf:parseType=\\\"Literal\\\">stdout</dcterms:title>\");",
													"    pm.expect(pm.response.text()).to.not.include(\"<dcterms:title rdf:parseType=\\\"Literal\\\">stderr</dcterms:title>\");",
													"    pm.expect(pm.response.text()).to.not.include(\"<dcterms:title rdf:parseType=\\\"Literal\\\">returnCode</dcterms:title>\");",
													"    pm.expect(pm.response.text()).to.not.include(\"<dcterms:title rdf:parseType=\\\"Literal\\\">executionTime</dcterms:title>\");",
													"});",
													"pm.test(\"AutomationResult analysis stderr be empty (~)\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"<rdf:value></rdf:value>\");",
													"});",
													"",
													"pm.test(\"should include the beforeCommand parameter\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"<oslc:name>beforeCommand</oslc:name>\");",
													"    pm.expect(pm.response.text()).to.include(\"<rdf:value>invalidCommand</rdf:value>\");",
													"});",
													"",
													"pm.test(\"should include the beforeCommandStdout\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"<dcterms:title rdf:parseType=\\\"Literal\\\">beforeCommandStdout</dcterms:title>\");",
													"});",
													"pm.test(\"beforeCommandStdout should have the expected value\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"<rdf:value></rdf:value>\");",
													"});",
													"",
													"pm.test(\"should include the beforeCommandStderr\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"<dcterms:title rdf:parseType=\\\"Literal\\\">beforeCommandStderr</dcterms:title>\");",
													"});",
													"pm.test(\"beforeCommandStderr should have the expected value\", function () {",
													"    ",
													"    // hack aroud linux vs windows",
													"    if (pm.response.text().includes(\"'invalidCommand' is not recognized as the name of a cmdlet\"))",
													"    {",
													"        pm.expect(pm.response.text()).to.include(\"'invalidCommand' is not recognized as the name of a cmdlet\");",
													"    }",
													"    else if (pm.response.text().includes(\"invalidCommand: command not found\"))",
													"    {",
													"        pm.expect(pm.response.text()).to.include(\"invalidCommand: command not found\");",
													"    }",
													"    else",
													"    {",
													"        pm.expect(false);",
													"    }",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/resources/automationResults/{{requestId}}",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"resources",
												"automationResults",
												"{{requestId}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "afterCommand",
					"item": [
						{
							"name": "basic",
							"item": [
								{
									"name": "create request",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Response code should be 201 (created)\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"",
													"// save the request ID as a global variable for later tests to use",
													"const response = xml2Json(pm.response.text());",
													"var resrouceAbout = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"].$[\"rdf:about\"];",
													"var resourceAboutSplit = resrouceAbout.split(\"/\");",
													"var requestId = resourceAboutSplit[resourceAboutSplit.length-1];",
													"pm.globals.set('requestId', requestId);",
													"",
													"",
													"                ",
													"pm.test(\"should include the afterCommand parameter\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"<oslc:name>afterCommand</oslc:name>\");",
													"    var os = pm.globals.get(\"currentOS\");",
													"    if (os == \"windows_bat\"){",
													"        pm.expect(pm.response.text()).to.include(\"echo test after command file contents &gt; afterCommandTestFile &amp; cat afterCommandTestFile\");",
													"    } else {",
													"        pm.expect(pm.response.text()).to.include(\"echo \\\"test after command file contents\\\" &gt; afterCommandTestFile ; cat afterCommandTestFile\");",
													"    }",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var os = pm.globals.get(\"currentOS\");\r",
													"if (os == \"linux\"){\r",
													"    pm.globals.set(\"afterCommand\", \"echo \\\"test after command file contents\\\" > afterCommandTestFile ; cat afterCommandTestFile\");\r",
													"} else if (os == \"windows_ps1\") {\r",
													"    pm.globals.set(\"afterCommand\", \"echo \\\"test after command file contents\\\" > afterCommandTestFile ; cat afterCommandTestFile\");\r",
													"} else { // os == \"windows_bat\")\r",
													"    pm.globals.set(\"afterCommand\", \"echo test after command file contents > afterCommandTestFile &amp; cat afterCommandTestFile\");\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{server_address}}/{{server_context}}/services/resources/automationPlans/dummy\" />\n\t<dcterms:title>test</dcterms:title>\n\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>arguments</oslc:name>\n\t\t\t<rdf:value>asdfasdf</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>afterCommand</oslc:name>\n\t\t\t<rdf:value>{{afterCommand}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>outputFileRegex</oslc:name>\n\t\t\t<rdf:value>.*</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>SUT</oslc:name>\n\t\t\t<rdf:value>{{SUT}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>",
											"options": {
												"raw": {
													"language": "xml"
												}
											}
										},
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/resources/createAutomationRequest",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"resources",
												"createAutomationRequest"
											]
										}
									},
									"response": []
								},
								{
									"name": "wait for #complete (analysis/common input paramters/afterCommand/basic)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var timeoutSeconds = pm.collectionVariables.get('automation_wait_time');",
													"",
													"var waitCounter = pm.globals.get(\"waitCounter\");",
													"if(!waitCounter) {",
													"    waitCounter = 0;",
													"}",
													"",
													"if (pm.response.code != 200) { // wait for the resource to be created",
													"    if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
													"        setTimeout(function(){}, [1000]); // 1 second",
													"        waitCounter++;",
													"        postman.setNextRequest(pm.info.requestName);",
													"    } else { // timeout, reset counter",
													"        waitCounter = 0;",
													"    }",
													"} else { // wait for the automation to complete",
													"    const response = xml2Json(pm.response.text());",
													"    var state = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"][\"oslc_auto:state\"].$[\"rdf:resource\"];",
													"    if (state == \"http://open-services.net/ns/auto#inProgress\") {",
													"        if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
													"            setTimeout(function(){}, [1000]); // 1 second",
													"            waitCounter++;",
													"            postman.setNextRequest(pm.info.requestName);",
													"        } else { // timeout, reset counter",
													"            waitCounter = 0;",
													"        }",
													"    } else { // wait doen, reset counter",
													"            waitCounter = 0;",
													"    }",
													"}",
													"",
													"pm.globals.set(\"waitCounter\", waitCounter);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/resources/automationRequests/{{requestId}}",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"resources",
												"automationRequests",
												"{{requestId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "get result",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// get global variable to use in this test",
													"var requestId = pm.globals.get('requestId');",
													"var serverAddr = pm.variables.get(\"server_address\");",
													"var server_context = pm.variables.get(\"server_context\");",
													"var AutomationPlanId = pm.variables.get(\"AutomationPlanId\");",
													"var test_arguments = pm.variables.get(\"arguments\");",
													"var SUT = pm.variables.get(\"SUT\");",
													"",
													"",
													"pm.test(\"Response code should be 200 (OK)\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"AutomationResult state should be #complete\", function () {",
													"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#new\\\"/>\");",
													"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#inProgress\\\"/>\");",
													"    pm.expect(pm.response.text()).to.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#complete\\\"/>\");",
													"});",
													"pm.test(\"AutomationResult verdict should be #passed\", function () {",
													"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:verdict rdf:resource=\\\"http://open-services.net/ns/auto#unavailable\\\"/>\");",
													"    pm.expect(pm.response.text()).to.include(\"oslc_auto:verdict rdf:resource=\\\"http://open-services.net/ns/auto#passed\\\"/>\");",
													"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#error\\\"/>\");",
													"});",
													"pm.test(\"AutomationResult analysis statusMessage should have the expected value\", function () {",
													"    var os = pm.globals.get(\"currentOS\");",
													"    if (os == \"windows_bat\"){",
													"        pm.expect(pm.response.text()).to.include(\"Executing afterCommand: echo test after command file contents &gt; afterCommandTestFile &amp; cat afterCommandTestFile\");",
													"    } else {",
													"        pm.expect(pm.response.text()).to.include(\"Executing afterCommand: echo \\\"test after command file contents\\\" &gt; afterCommandTestFile ; cat afterCommandTestFile\");",
													"    }",
													"    pm.expect(pm.response.text()).to.include(\"Executing analysis: \");",
													"    pm.expect(pm.response.text()).to.include(\"Analysis completed successfully\");",
													"});",
													"pm.test(\"returnCode should be 0\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"<rdf:value>0</rdf:value>\");",
													"});",
													"pm.test(\"AutomationResult analysis stderr be empty (~)\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"<rdf:value></rdf:value>\");",
													"});",
													"",
													"pm.test(\"should include the afterCommand parameter\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"<oslc:name>afterCommand</oslc:name>\");",
													"    var os = pm.globals.get(\"currentOS\");",
													"    if (os == \"windows_bat\"){",
													"        pm.expect(pm.response.text()).to.include(\"echo test after command file contents &gt; afterCommandTestFile &amp; cat afterCommandTestFile\");",
													"    } else {",
													"        pm.expect(pm.response.text()).to.include(\"<rdf:value>echo \\\"test after command file contents\\\" &gt; afterCommandTestFile ; cat afterCommandTestFile</rdf:value>\");",
													"    }",
													"});",
													"",
													"pm.test(\"should include the afterCommandStdout\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"<dcterms:title rdf:parseType=\\\"Literal\\\">afterCommandStdout</dcterms:title>\");",
													"});",
													"pm.test(\"afterCommandStdout should have the expected value\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"<rdf:value>test after command file contents\");",
													"});",
													"",
													"pm.test(\"should include the afterCommandStderr\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"<dcterms:title rdf:parseType=\\\"Literal\\\">afterCommandStderr</dcterms:title>\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/resources/automationResults/{{requestId}}",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"resources",
												"automationResults",
												"{{requestId}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "command fail",
							"item": [
								{
									"name": "create request",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Response code should be 201 (created)\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"",
													"// save the request ID as a global variable for later tests to use",
													"const response = xml2Json(pm.response.text());",
													"var resrouceAbout = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"].$[\"rdf:about\"];",
													"var resourceAboutSplit = resrouceAbout.split(\"/\");",
													"var requestId = resourceAboutSplit[resourceAboutSplit.length-1];",
													"pm.globals.set('requestId', requestId);",
													"",
													"",
													"                ",
													"pm.test(\"should include the afterCommand parameter\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"<oslc:name>afterCommand</oslc:name>\");",
													"    pm.expect(pm.response.text()).to.include(\"<rdf:value>invalidCommand</rdf:value>\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{server_address}}/{{server_context}}/services/resources/automationPlans/dummy\" />\n\t<dcterms:title>test</dcterms:title>\n\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>arguments</oslc:name>\n\t\t\t<rdf:value>asdfasdf</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>afterCommand</oslc:name>\n\t\t\t<rdf:value>invalidCommand</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>outputFileRegex</oslc:name>\n\t\t\t<rdf:value>.*</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>SUT</oslc:name>\n\t\t\t<rdf:value>{{SUT}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>",
											"options": {
												"raw": {
													"language": "xml"
												}
											}
										},
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/resources/createAutomationRequest",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"resources",
												"createAutomationRequest"
											]
										}
									},
									"response": []
								},
								{
									"name": "wait for #complete (analysis/common input paramters/afterCommand/command fail)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var timeoutSeconds = pm.collectionVariables.get('automation_wait_time');",
													"",
													"var waitCounter = pm.globals.get(\"waitCounter\");",
													"if(!waitCounter) {",
													"    waitCounter = 0;",
													"}",
													"",
													"if (pm.response.code != 200) { // wait for the resource to be created",
													"    if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
													"        setTimeout(function(){}, [1000]); // 1 second",
													"        waitCounter++;",
													"        postman.setNextRequest(pm.info.requestName);",
													"    } else { // timeout, reset counter",
													"        waitCounter = 0;",
													"    }",
													"} else { // wait for the automation to complete",
													"    const response = xml2Json(pm.response.text());",
													"    var state = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"][\"oslc_auto:state\"].$[\"rdf:resource\"];",
													"    if (state == \"http://open-services.net/ns/auto#inProgress\") {",
													"        if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
													"            setTimeout(function(){}, [1000]); // 1 second",
													"            waitCounter++;",
													"            postman.setNextRequest(pm.info.requestName);",
													"        } else { // timeout, reset counter",
													"            waitCounter = 0;",
													"        }",
													"    } else { // wait doen, reset counter",
													"            waitCounter = 0;",
													"    }",
													"}",
													"",
													"pm.globals.set(\"waitCounter\", waitCounter);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/resources/automationRequests/{{requestId}}",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"resources",
												"automationRequests",
												"{{requestId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "get result",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// get global variable to use in this test",
													"var requestId = pm.globals.get('requestId');",
													"var serverAddr = pm.variables.get(\"server_address\");",
													"var server_context = pm.variables.get(\"server_context\");",
													"var AutomationPlanId = pm.variables.get(\"AutomationPlanId\");",
													"var test_arguments = pm.variables.get(\"arguments\");",
													"var SUT = pm.variables.get(\"SUT\");",
													"",
													"",
													"pm.test(\"Response code should be 200 (OK)\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"AutomationResult state should be #complete\", function () {",
													"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#new\\\"/>\");",
													"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#inProgress\\\"/>\");",
													"    pm.expect(pm.response.text()).to.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#complete\\\"/>\");",
													"});",
													"pm.test(\"AutomationResult verdict should be #failed\", function () {",
													"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:verdict rdf:resource=\\\"http://open-services.net/ns/auto#unavailable\\\"/>\");",
													"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:verdict rdf:resource=\\\"http://open-services.net/ns/auto#passed\\\"/>\");",
													"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:verdict rdf:resource=\\\"http://open-services.net/ns/auto#error\\\"/>\");",
													"    pm.expect(pm.response.text()).to.include(\"oslc_auto:verdict rdf:resource=\\\"http://open-services.net/ns/auto#failed\\\"/>\");",
													"});",
													"pm.test(\"AutomationResult analysis statusMessage should have the expected value\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"Executing afterCommand: invalidCommand\");",
													"    pm.expect(pm.response.text()).to.include(\"Analysis completed successfully\");",
													"});",
													"pm.test(\"analysis should have been executed\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"<dcterms:title rdf:parseType=\\\"Literal\\\">stdout</dcterms:title>\");",
													"    pm.expect(pm.response.text()).to.include(\"<dcterms:title rdf:parseType=\\\"Literal\\\">stderr</dcterms:title>\");",
													"    pm.expect(pm.response.text()).to.include(\"<dcterms:title rdf:parseType=\\\"Literal\\\">returnCode</dcterms:title>\");",
													"    pm.expect(pm.response.text()).to.include(\"<dcterms:title rdf:parseType=\\\"Literal\\\">executionTime</dcterms:title>\");",
													"});",
													"pm.test(\"AutomationResult analysis stderr be empty (~)\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"<rdf:value></rdf:value>\");",
													"});",
													"",
													"pm.test(\"should include the afterCommand parameter\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"<oslc:name>afterCommand</oslc:name>\");",
													"    pm.expect(pm.response.text()).to.include(\"<rdf:value>invalidCommand</rdf:value>\");",
													"});",
													"",
													"pm.test(\"should include the afterCommandStdout\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"<dcterms:title rdf:parseType=\\\"Literal\\\">afterCommandStdout</dcterms:title>\");",
													"});",
													"pm.test(\"afterCommandStdout should have the expected value\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"<rdf:value></rdf:value>\");",
													"});",
													"",
													"pm.test(\"should include the afterCommandStderr\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"<dcterms:title rdf:parseType=\\\"Literal\\\">afterCommandStderr</dcterms:title>\");",
													"});",
													"pm.test(\"afterCommandStderr should have the expected value\", function () {",
													"    ",
													"    // hack aroud linux vs windows",
													"    if (pm.response.text().includes(\"'invalidCommand' is not recognized as the name of a cmdlet\"))",
													"    {",
													"        pm.expect(pm.response.text()).to.include(\"'invalidCommand' is not recognized as the name of a cmdlet\");",
													"    }",
													"    else if (pm.response.text().includes(\"invalidCommand: command not found\"))",
													"    {",
													"        pm.expect(pm.response.text()).to.include(\"invalidCommand: command not found\");",
													"    }",
													"    else",
													"    {",
													"        pm.expect(false);",
													"    }",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/resources/automationResults/{{requestId}}",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"resources",
												"automationResults",
												"{{requestId}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "analysis fail (so no after command)",
							"item": [
								{
									"name": "create request",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Response code should be 201 (created)\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"",
													"// save the request ID as a global variable for later tests to use",
													"const response = xml2Json(pm.response.text());",
													"var resrouceAbout = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"].$[\"rdf:about\"];",
													"var resourceAboutSplit = resrouceAbout.split(\"/\");",
													"var requestId = resourceAboutSplit[resourceAboutSplit.length-1];",
													"pm.globals.set('requestId', requestId);",
													"",
													"",
													"                ",
													"pm.test(\"should include the afterCommand parameter\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"<oslc:name>afterCommand</oslc:name>\");",
													"    pm.expect(pm.response.text()).to.include(\"<rdf:value>echo \\\"test after command file contents\\\" &gt; afterCommandTestFile ; cat afterCommandTestFile</rdf:value>\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{server_address}}/{{server_context}}/services/resources/automationPlans/dummy\" />\n\t<dcterms:title>test</dcterms:title>\n\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>arguments</oslc:name>\n\t\t\t<rdf:value>invalidCommand</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>toolCommand</oslc:name>\n\t\t\t<rdf:value>false</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>afterCommand</oslc:name>\n\t\t\t<rdf:value>echo \"test after command file contents\" > afterCommandTestFile ; cat afterCommandTestFile</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>outputFileRegex</oslc:name>\n\t\t\t<rdf:value>.*</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>SUT</oslc:name>\n\t\t\t<rdf:value>{{SUT}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>",
											"options": {
												"raw": {
													"language": "xml"
												}
											}
										},
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/resources/createAutomationRequest",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"resources",
												"createAutomationRequest"
											]
										}
									},
									"response": []
								},
								{
									"name": "wait for #complete (analysis/common input paramters/afterCommand/analysis fail)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var timeoutSeconds = pm.collectionVariables.get('automation_wait_time');",
													"",
													"var waitCounter = pm.globals.get(\"waitCounter\");",
													"if(!waitCounter) {",
													"    waitCounter = 0;",
													"}",
													"",
													"if (pm.response.code != 200) { // wait for the resource to be created",
													"    if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
													"        setTimeout(function(){}, [1000]); // 1 second",
													"        waitCounter++;",
													"        postman.setNextRequest(pm.info.requestName);",
													"    } else { // timeout, reset counter",
													"        waitCounter = 0;",
													"    }",
													"} else { // wait for the automation to complete",
													"    const response = xml2Json(pm.response.text());",
													"    var state = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"][\"oslc_auto:state\"].$[\"rdf:resource\"];",
													"    if (state == \"http://open-services.net/ns/auto#inProgress\") {",
													"        if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
													"            setTimeout(function(){}, [1000]); // 1 second",
													"            waitCounter++;",
													"            postman.setNextRequest(pm.info.requestName);",
													"        } else { // timeout, reset counter",
													"            waitCounter = 0;",
													"        }",
													"    } else { // wait doen, reset counter",
													"            waitCounter = 0;",
													"    }",
													"}",
													"",
													"pm.globals.set(\"waitCounter\", waitCounter);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/resources/automationRequests/{{requestId}}",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"resources",
												"automationRequests",
												"{{requestId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "get result",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// get global variable to use in this test",
													"var requestId = pm.globals.get('requestId');",
													"var serverAddr = pm.variables.get(\"server_address\");",
													"var server_context = pm.variables.get(\"server_context\");",
													"var AutomationPlanId = pm.variables.get(\"AutomationPlanId\");",
													"var test_arguments = pm.variables.get(\"arguments\");",
													"var SUT = pm.variables.get(\"SUT\");",
													"",
													"",
													"pm.test(\"Response code should be 200 (OK)\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"AutomationResult state should be #complete\", function () {",
													"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#new\\\"/>\");",
													"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#inProgress\\\"/>\");",
													"    pm.expect(pm.response.text()).to.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#complete\\\"/>\");",
													"});",
													"pm.test(\"AutomationResult verdict should be #failed\", function () {",
													"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:verdict rdf:resource=\\\"http://open-services.net/ns/auto#unavailable\\\"/>\");",
													"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:verdict rdf:resource=\\\"http://open-services.net/ns/auto#passed\\\"/>\");",
													"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:verdict rdf:resource=\\\"http://open-services.net/ns/auto#error\\\"/>\");",
													"    pm.expect(pm.response.text()).to.include(\"oslc_auto:verdict rdf:resource=\\\"http://open-services.net/ns/auto#failed\\\"/>\");",
													"});",
													"pm.test(\"AutomationResult analysis statusMessage should have the expected value\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"Analysis failed (returned non-zero:\");",
													"    pm.expect(pm.response.text()).to.include(\"Skipping afterCommand due to previous failures\");",
													"});",
													"pm.test(\"analysis should have been executed\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"<dcterms:title rdf:parseType=\\\"Literal\\\">stdout</dcterms:title>\");",
													"    pm.expect(pm.response.text()).to.include(\"<dcterms:title rdf:parseType=\\\"Literal\\\">stderr</dcterms:title>\");",
													"    pm.expect(pm.response.text()).to.include(\"<dcterms:title rdf:parseType=\\\"Literal\\\">returnCode</dcterms:title>\");",
													"    pm.expect(pm.response.text()).to.include(\"<dcterms:title rdf:parseType=\\\"Literal\\\">executionTime</dcterms:title>\");",
													"});",
													"pm.test(\"AutomationResult analysis stderr be empty (~)\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"<rdf:value></rdf:value>\");",
													"});",
													"",
													"pm.test(\"should include the afterCommand parameter\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"<oslc:name>afterCommand</oslc:name>\");",
													"    pm.expect(pm.response.text()).to.include(\"<rdf:value>echo \\\"test after command file contents\\\" &gt; afterCommandTestFile ; cat afterCommandTestFile</rdf:value>\");",
													"});",
													"",
													"pm.test(\"should not include the afterCommandStdout\", function () {",
													"    pm.expect(pm.response.text()).to.not.include(\"<dcterms:title rdf:parseType=\\\"Literal\\\">afterCommandStdout</dcterms:title>\");",
													"});",
													"",
													"pm.test(\"should not include the afterCommandStderr\", function () {",
													"    pm.expect(pm.response.text()).to.not.include(\"<dcterms:title rdf:parseType=\\\"Literal\\\">afterCommandStderr</dcterms:title>\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/resources/automationResults/{{requestId}}",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"resources",
												"automationResults",
												"{{requestId}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "envVariable",
					"item": [
						{
							"name": "basic",
							"item": [
								{
									"name": "envVariable",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response code should be 201 (created)\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"",
													"// save the request ID as a global variable for later tests to use",
													"const response = xml2Json(pm.response.text());",
													"var resrouceAbout = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"].$[\"rdf:about\"];",
													"var resourceAboutSplit = resrouceAbout.split(\"/\");",
													"var requestId = resourceAboutSplit[resourceAboutSplit.length-1];",
													"pm.globals.set('requestId', requestId);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{server_address}}/{{server_context}}/services/resources/automationPlans/dummy\" />\n\t<dcterms:title>test</dcterms:title>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>arguments</oslc:name>\n\t\t\t<rdf:value>asdfasdf</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>envVariable</oslc:name>\n\t\t\t<rdf:value>EnvVar1\nEnvVar1Value</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>SUT</oslc:name>\n\t\t\t<rdf:value>{{SUT}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>",
											"options": {
												"raw": {
													"language": "xml"
												}
											}
										},
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/resources/createAutomationRequest",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"resources",
												"createAutomationRequest"
											]
										}
									},
									"response": []
								},
								{
									"name": "wait for #complete (analysis/common input paramters/envVariable/basic)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var timeoutSeconds = pm.collectionVariables.get('automation_wait_time');",
													"",
													"var waitCounter = pm.globals.get(\"waitCounter\");",
													"if(!waitCounter) {",
													"    waitCounter = 0;",
													"}",
													"",
													"if (pm.response.code != 200) { // wait for the resource to be created",
													"    if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
													"        setTimeout(function(){}, [1000]); // 1 second",
													"        waitCounter++;",
													"        postman.setNextRequest(pm.info.requestName);",
													"    } else { // timeout, reset counter",
													"        waitCounter = 0;",
													"    }",
													"} else { // wait for the automation to complete",
													"    const response = xml2Json(pm.response.text());",
													"    var state = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"][\"oslc_auto:state\"].$[\"rdf:resource\"];",
													"    if (state == \"http://open-services.net/ns/auto#inProgress\") {",
													"        if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
													"            setTimeout(function(){}, [1000]); // 1 second",
													"            waitCounter++;",
													"            postman.setNextRequest(pm.info.requestName);",
													"        } else { // timeout, reset counter",
													"            waitCounter = 0;",
													"        }",
													"    } else { // wait doen, reset counter",
													"            waitCounter = 0;",
													"    }",
													"}",
													"",
													"pm.globals.set(\"waitCounter\", waitCounter);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/resources/automationRequests/{{requestId}}",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"resources",
												"automationRequests",
												"{{requestId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "get result",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// get global variable to use in this test",
													"var requestId = pm.globals.get('requestId');",
													"var serverAddr = pm.variables.get(\"server_address\");",
													"var server_context = pm.variables.get(\"server_context\");",
													"var AutomationPlanId = pm.variables.get(\"AutomationPlanId\");",
													"var test_arguments = pm.variables.get(\"arguments\");",
													"var SUT = pm.variables.get(\"SUT\");",
													"",
													"",
													"pm.test(\"Response code should be 200 (OK)\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"AutomationResult state should be #complete\", function () {",
													"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#new\\\"/>\");",
													"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#inProgress\\\"/>\");",
													"    pm.expect(pm.response.text()).to.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#complete\\\"/>\");",
													"});",
													"pm.test(\"AutomationResult verdict should be #passed\", function () {",
													"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:verdict rdf:resource=\\\"http://open-services.net/ns/auto#unavailable\\\"/>\");",
													"    pm.expect(pm.response.text()).to.include(\"oslc_auto:verdict rdf:resource=\\\"http://open-services.net/ns/auto#passed\\\"/>\");",
													"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#error\\\"/>\");",
													"});",
													"pm.test(\"AutomationResult statusMessage should have the expected value\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"Executing analysis: \");",
													"    pm.expect(pm.response.text()).to.include(\"Analysis completed successfully\");",
													"});",
													"pm.test(\"returnCode should be 0\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"<rdf:value>0</rdf:value>\");",
													"});",
													"pm.test(\"AutomationResult analysis stderr be empty (~)\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"<rdf:value></rdf:value>\");",
													"});",
													"pm.test(\"envVariable should be printed in the stdout by the dummy tool\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"EnvVar1: EnvVar1Value\");",
													"});",
													"pm.test(\"should contain a envVariable input parameter\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"<rdf:value>EnvVar1\\nEnvVar1Value</rdf:value>\");",
													"    pm.expect(pm.response.text()).to.include(\"<oslc:name>envVariable</oslc:name>\");",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/resources/automationResults/{{requestId}}",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"resources",
												"automationResults",
												"{{requestId}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "multiple env variables",
							"item": [
								{
									"name": "multiple envVariable",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response code should be 201 (created)\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"",
													"// save the request ID as a global variable for later tests to use",
													"const response = xml2Json(pm.response.text());",
													"var resrouceAbout = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"].$[\"rdf:about\"];",
													"var resourceAboutSplit = resrouceAbout.split(\"/\");",
													"var requestId = resourceAboutSplit[resourceAboutSplit.length-1];",
													"pm.globals.set('requestId', requestId);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{server_address}}/{{server_context}}/services/resources/automationPlans/dummy\" />\n\t<dcterms:title>test</dcterms:title>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>envVariable</oslc:name>\n\t\t\t<rdf:value>EnvVar1\nEnvVar1Value</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>envVariable</oslc:name>\n\t\t\t<rdf:value>EnvVar2\nEnvVar2Value</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>arguments</oslc:name>\n\t\t\t<rdf:value>asdfasdf</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\t\n\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>SUT</oslc:name>\n\t\t\t<rdf:value>{{SUT}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>",
											"options": {
												"raw": {
													"language": "xml"
												}
											}
										},
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/resources/createAutomationRequest",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"resources",
												"createAutomationRequest"
											]
										}
									},
									"response": []
								},
								{
									"name": "wait for #complete (analysis/common input paramters/envVariable/multiple env variable)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var timeoutSeconds = pm.collectionVariables.get('automation_wait_time');",
													"",
													"var waitCounter = pm.globals.get(\"waitCounter\");",
													"if(!waitCounter) {",
													"    waitCounter = 0;",
													"}",
													"",
													"if (pm.response.code != 200) { // wait for the resource to be created",
													"    if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
													"        setTimeout(function(){}, [1000]); // 1 second",
													"        waitCounter++;",
													"        postman.setNextRequest(pm.info.requestName);",
													"    } else { // timeout, reset counter",
													"        waitCounter = 0;",
													"    }",
													"} else { // wait for the automation to complete",
													"    const response = xml2Json(pm.response.text());",
													"    var state = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"][\"oslc_auto:state\"].$[\"rdf:resource\"];",
													"    if (state == \"http://open-services.net/ns/auto#inProgress\") {",
													"        if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
													"            setTimeout(function(){}, [1000]); // 1 second",
													"            waitCounter++;",
													"            postman.setNextRequest(pm.info.requestName);",
													"        } else { // timeout, reset counter",
													"            waitCounter = 0;",
													"        }",
													"    } else { // wait doen, reset counter",
													"            waitCounter = 0;",
													"    }",
													"}",
													"",
													"pm.globals.set(\"waitCounter\", waitCounter);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/resources/automationRequests/{{requestId}}",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"resources",
												"automationRequests",
												"{{requestId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "get result",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// get global variable to use in this test",
													"var requestId = pm.globals.get('requestId');",
													"var serverAddr = pm.variables.get(\"server_address\");",
													"var server_context = pm.variables.get(\"server_context\");",
													"var AutomationPlanId = pm.variables.get(\"AutomationPlanId\");",
													"var test_arguments = pm.variables.get(\"arguments\");",
													"var SUT = pm.variables.get(\"SUT\");",
													"",
													"",
													"pm.test(\"Response code should be 200 (OK)\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"AutomationResult state should be #complete\", function () {",
													"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#new\\\"/>\");",
													"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#inProgress\\\"/>\");",
													"    pm.expect(pm.response.text()).to.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#complete\\\"/>\");",
													"});",
													"pm.test(\"AutomationResult verdict should be #passed\", function () {",
													"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:verdict rdf:resource=\\\"http://open-services.net/ns/auto#unavailable\\\"/>\");",
													"    pm.expect(pm.response.text()).to.include(\"oslc_auto:verdict rdf:resource=\\\"http://open-services.net/ns/auto#passed\\\"/>\");",
													"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#error\\\"/>\");",
													"});",
													"pm.test(\"AutomationResult statusMessage should have the expected value\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"Executing analysis: \");",
													"    pm.expect(pm.response.text()).to.include(\"Analysis completed successfully\");",
													"});",
													"",
													"pm.test(\"returnCode should be 0\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"<rdf:value>0</rdf:value>\");",
													"});",
													"pm.test(\"AutomationResult analysis stderr be empty (~)\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"<rdf:value></rdf:value>\");",
													"});",
													"",
													"pm.test(\"envVariables should be printed in the stdout by the dummy tool\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"EnvVar1: EnvVar1Value\");",
													"    pm.expect(pm.response.text()).to.include(\"EnvVar2: EnvVar2Value\");",
													"});",
													"pm.test(\"should contain envVariable input parameters\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"<rdf:value>EnvVar1\\nEnvVar1Value</rdf:value>\");",
													"    pm.expect(pm.response.text()).to.include(\"<oslc:name>envVariable</oslc:name>\");",
													"    pm.expect(pm.response.text()).to.include(\"<rdf:value>EnvVar2\\nEnvVar2Value</rdf:value>\");",
													"    pm.expect(pm.response.text()).to.include(\"<oslc:name>envVariable</oslc:name>\");",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/resources/automationResults/{{requestId}}",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"resources",
												"automationResults",
												"{{requestId}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "invalid value",
							"item": [
								{
									"name": "missing new line",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response code should be 400 (bad request)\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Error msg should be - invalid format...\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"<oslc:message>AutomationRequest NOT created - Invalid format of envVariable value. No \\\"\\\\n\\\" delimiter found. Expected format: variable_name\\\\nvariable_value\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{server_address}}/{{server_context}}/services/resources/automationPlans/dummy\" />\n\t<dcterms:title>test</dcterms:title>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>envVariable</oslc:name>\n\t\t\t<rdf:value>EnvVar1EnvVar1Value</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>arguments</oslc:name>\n\t\t\t<rdf:value>asdfasdf</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\t\n\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>SUT</oslc:name>\n\t\t\t<rdf:value>{{SUT}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>",
											"options": {
												"raw": {
													"language": "xml"
												}
											}
										},
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/resources/createAutomationRequest",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"resources",
												"createAutomationRequest"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "Bugs",
			"item": [
				{
					"name": "quotes",
					"item": [
						{
							"name": "create SUT using the compilation provider",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// save the request ID as a global variable for later tests to use -- used as SUT ID",
											"const response = xml2Json(pm.response.text());",
											"var resrouceAbout = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"].$[\"rdf:about\"];",
											"var resourceAboutSplit = resrouceAbout.split(\"/\");",
											"var requestId = resourceAboutSplit[resourceAboutSplit.length-1];",
											"pm.globals.set('requestId', requestId);",
											"",
											"",
											"pm.test(\"Response code should be 201 (created)\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"var compilation_provider = pm.variables.get(\"compilation_provider\");",
											"var sutId = requestId;",
											"pm.globals.set(\"SUT\", compilation_provider + \"/services/resources/sUTs/\" + sutId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/xml"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>analysis test</dcterms:title>\n\t<dcterms:description>analysis test</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{compilation_provider}}/services/resources/automationPlans/0\" />\n\t\n\t<oslc_auto:inputParameter>\n        <oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>sourceBase64</oslc:name>\n\t\t\t<rdf:value>TestEchoProgram.cpp\nI2luY2x1ZGUgPHN0ZGlvLmg+CgppbnQgbWFpbihpbnQgYXJnYywgY2hhcioqIGFyZ3YpCnsKCXByaW50ZigiJXNcbiIsIGFyZ3ZbMV0pOwoJcmV0dXJuIDA7Cn0K</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>buildCommand</oslc:name>\n\t\t\t<rdf:value>gcc -g TestEchoProgram.cpp -o my_echo</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>launchCommand</oslc:name>\n\t\t\t<rdf:value>./my_echo</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>"
								},
								"url": {
									"raw": "{{compilation_provider}}/services/resources/createAutomationRequest",
									"host": [
										"{{compilation_provider}}"
									],
									"path": [
										"services",
										"resources",
										"createAutomationRequest"
									]
								}
							},
							"response": []
						},
						{
							"name": "wait for #complete (analysis/bugs/quotes/create sut)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var timeoutSeconds = pm.collectionVariables.get('automation_wait_time');",
											"",
											"var waitCounter = pm.globals.get(\"waitCounter\");",
											"if(!waitCounter) {",
											"    waitCounter = 0;",
											"}",
											"",
											"if (pm.response.code != 200) { // wait for the resource to be created",
											"    if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
											"        setTimeout(function(){}, [1000]); // 1 second",
											"        waitCounter++;",
											"        postman.setNextRequest(pm.info.requestName);",
											"    } else { // timeout, reset counter",
											"        waitCounter = 0;",
											"    }",
											"} else { // wait for the automation to complete",
											"    const response = xml2Json(pm.response.text());",
											"    var state = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"][\"oslc_auto:state\"].$[\"rdf:resource\"];",
											"    if (state == \"http://open-services.net/ns/auto#inProgress\") {",
											"        if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
											"            setTimeout(function(){}, [1000]); // 1 second",
											"            waitCounter++;",
											"            postman.setNextRequest(pm.info.requestName);",
											"        } else { // timeout, reset counter",
											"            waitCounter = 0;",
											"        }",
											"    } else { // wait doen, reset counter",
											"            waitCounter = 0;",
											"    }",
											"}",
											"",
											"pm.globals.set(\"waitCounter\", waitCounter);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"url": {
									"raw": "{{compilation_provider}}/services/resources/automationRequests/{{requestId}}",
									"host": [
										"{{compilation_provider}}"
									],
									"path": [
										"services",
										"resources",
										"automationRequests",
										"{{requestId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "create request",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response code should be 201 (created)\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"",
											"// save the request ID as a global variable for later tests to use",
											"const response = xml2Json(pm.response.text());",
											"var resrouceAbout = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"].$[\"rdf:about\"];",
											"var resourceAboutSplit = resrouceAbout.split(\"/\");",
											"var requestId = resourceAboutSplit[resourceAboutSplit.length-1];",
											"pm.globals.set('requestId', requestId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/xml"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>test</dcterms:title>\n\t<dcterms:description>test</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{server_address}}/{{server_context}}/services/resources/automationPlans/dummy\" />\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>arguments</oslc:name>\n\t\t\t<rdf:value>\"Hello World!\"</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>SUT</oslc:name>\n\t\t\t<rdf:value>{{SUT}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>"
								},
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/resources/createAutomationRequest",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"resources",
										"createAutomationRequest"
									]
								}
							},
							"response": []
						},
						{
							"name": "wait for #complete (analysis/bugs/quotes)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var timeoutSeconds = pm.collectionVariables.get('automation_wait_time');",
											"",
											"var waitCounter = pm.globals.get(\"waitCounter\");",
											"if(!waitCounter) {",
											"    waitCounter = 0;",
											"}",
											"",
											"if (pm.response.code != 200) { // wait for the resource to be created",
											"    if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
											"        setTimeout(function(){}, [1000]); // 1 second",
											"        waitCounter++;",
											"        postman.setNextRequest(pm.info.requestName);",
											"    } else { // timeout, reset counter",
											"        waitCounter = 0;",
											"    }",
											"} else { // wait for the automation to complete",
											"    const response = xml2Json(pm.response.text());",
											"    var state = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"][\"oslc_auto:state\"].$[\"rdf:resource\"];",
											"    if (state == \"http://open-services.net/ns/auto#inProgress\") {",
											"        if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
											"            setTimeout(function(){}, [1000]); // 1 second",
											"            waitCounter++;",
											"            postman.setNextRequest(pm.info.requestName);",
											"        } else { // timeout, reset counter",
											"            waitCounter = 0;",
											"        }",
											"    } else { // wait doen, reset counter",
											"            waitCounter = 0;",
											"    }",
											"}",
											"",
											"pm.globals.set(\"waitCounter\", waitCounter);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/resources/automationRequests/{{requestId}}",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"resources",
										"automationRequests",
										"{{requestId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "check result",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response code should be 200 (OK)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"AutomationResult state should be #complete\", function () {",
											"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#new\\\"/>\");",
											"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#inProgress\\\"/>\");",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#complete\\\"/>\");",
											"});",
											"pm.test(\"AutomationResult verdict should be #passed\", function () {",
											"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:verdict rdf:resource=\\\"http://open-services.net/ns/auto#unavailable\\\"/>\");",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:verdict rdf:resource=\\\"http://open-services.net/ns/auto#passed\\\"/>\");",
											"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#error\\\"/>\");",
											"});",
											"",
											"pm.test(\"AutomationResult statusMessage should have the expected value\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Executing analysis: \");",
											"    pm.expect(pm.response.text()).to.include(\"Analysis completed successfully\");",
											"});",
											"pm.test(\"returnCode should be 0\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<rdf:value>0</rdf:value>\");",
											"});",
											"pm.test(\"stdout should have the expected value\", function () {",
											"    var os = pm.globals.get(\"currentOS\");",
											"    if (os == \"windows_bat\"){",
											"        pm.expect(pm.response.text()).to.include(\"SUT: \\\"Hello World!\\\"\");  // TODO hack due to CMD processing \"=\" differently in --args=test_arguments",
											"    } else { ",
											"        pm.expect(pm.response.text()).to.include(\"Your argument: --args=Hello World!\");;",
											"    }",
											"",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/resources/automationResults/{{requestId}}",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"resources",
										"automationResults",
										"{{requestId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "multiple commands",
					"item": [
						{
							"name": "create SUT using the compilation provider",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// save the request ID as a global variable for later tests to use -- used as SUT ID",
											"const response = xml2Json(pm.response.text());",
											"var resrouceAbout = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"].$[\"rdf:about\"];",
											"var resourceAboutSplit = resrouceAbout.split(\"/\");",
											"var requestId = resourceAboutSplit[resourceAboutSplit.length-1];",
											"pm.globals.set('requestId', requestId);",
											"",
											"",
											"pm.test(\"Response code should be 201 (created)\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"var compilation_provider = pm.variables.get(\"compilation_provider\");",
											"var sutId = requestId;",
											"pm.globals.set(\"SUT\", compilation_provider + \"/services/resources/sUTs/\" + sutId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var os = pm.globals.get(\"currentOS\");\r",
											"if (os == \"windows_bat\"){\r",
											"    pm.globals.set(\"multipleCommands\", \"ls &amp; echo \\\"testing\\\" &amp; cat TestEchoProgram.cpp &amp; \");\r",
											"} else{\r",
											"    pm.globals.set(\"multipleCommands\", \"ls ; echo \\\"testing\\\" ; cat TestEchoProgram.cpp ; \");\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/xml"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>analysis test</dcterms:title>\n\t<dcterms:description>analysis test</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{compilation_provider}}/services/resources/automationPlans/0\" />\n\t\n\t<oslc_auto:inputParameter>\n        <oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>sourceBase64</oslc:name>\n\t\t\t<rdf:value>TestEchoProgram.cpp\nI2luY2x1ZGUgPHN0ZGlvLmg+CgppbnQgbWFpbihpbnQgYXJnYywgY2hhcioqIGFyZ3YpCnsKCXByaW50ZigiJXNcbiIsIGFyZ3ZbMV0pOwoJcmV0dXJuIDA7Cn0K</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>buildCommand</oslc:name>\n\t\t\t<rdf:value>gcc -g TestEchoProgram.cpp -o my_echo</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>launchCommand</oslc:name>\n\t\t\t<rdf:value>{{multipleCommands}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>"
								},
								"url": {
									"raw": "{{compilation_provider}}/services/resources/createAutomationRequest",
									"host": [
										"{{compilation_provider}}"
									],
									"path": [
										"services",
										"resources",
										"createAutomationRequest"
									]
								}
							},
							"response": []
						},
						{
							"name": "wait for #complete (analysis/bugs/multiple commands/create sut)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var timeoutSeconds = pm.collectionVariables.get('automation_wait_time');",
											"",
											"var waitCounter = pm.globals.get(\"waitCounter\");",
											"if(!waitCounter) {",
											"    waitCounter = 0;",
											"}",
											"",
											"if (pm.response.code != 200) { // wait for the resource to be created",
											"    if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
											"        setTimeout(function(){}, [1000]); // 1 second",
											"        waitCounter++;",
											"        postman.setNextRequest(pm.info.requestName);",
											"    } else { // timeout, reset counter",
											"        waitCounter = 0;",
											"    }",
											"} else { // wait for the automation to complete",
											"    const response = xml2Json(pm.response.text());",
											"    var state = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"][\"oslc_auto:state\"].$[\"rdf:resource\"];",
											"    if (state == \"http://open-services.net/ns/auto#inProgress\") {",
											"        if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
											"            setTimeout(function(){}, [1000]); // 1 second",
											"            waitCounter++;",
											"            postman.setNextRequest(pm.info.requestName);",
											"        } else { // timeout, reset counter",
											"            waitCounter = 0;",
											"        }",
											"    } else { // wait doen, reset counter",
											"            waitCounter = 0;",
											"    }",
											"}",
											"",
											"pm.globals.set(\"waitCounter\", waitCounter);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"url": {
									"raw": "{{compilation_provider}}/services/resources/automationRequests/{{requestId}}",
									"host": [
										"{{compilation_provider}}"
									],
									"path": [
										"services",
										"resources",
										"automationRequests",
										"{{requestId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "create request",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response code should be 201 (created)\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"",
											"// save the request ID as a global variable for later tests to use",
											"const response = xml2Json(pm.response.text());",
											"var resrouceAbout = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"].$[\"rdf:about\"];",
											"var resourceAboutSplit = resrouceAbout.split(\"/\");",
											"var requestId = resourceAboutSplit[resourceAboutSplit.length-1];",
											"pm.globals.set('requestId', requestId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/xml"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>test</dcterms:title>\n\t<dcterms:description>test</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{server_address}}/{{server_context}}/services/resources/automationPlans/dummy\" />\n    \n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>arguments</oslc:name>\n\t\t\t<rdf:value></rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>SUT</oslc:name>\n\t\t\t<rdf:value>{{SUT}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>"
								},
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/resources/createAutomationRequest",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"resources",
										"createAutomationRequest"
									]
								}
							},
							"response": []
						},
						{
							"name": "wait for #complete (analysis/bugs/multiple commands)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var timeoutSeconds = pm.collectionVariables.get('automation_wait_time');",
											"",
											"var waitCounter = pm.globals.get(\"waitCounter\");",
											"if(!waitCounter) {",
											"    waitCounter = 0;",
											"}",
											"",
											"if (pm.response.code != 200) { // wait for the resource to be created",
											"    if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
											"        setTimeout(function(){}, [1000]); // 1 second",
											"        waitCounter++;",
											"        postman.setNextRequest(pm.info.requestName);",
											"    } else { // timeout, reset counter",
											"        waitCounter = 0;",
											"    }",
											"} else { // wait for the automation to complete",
											"    const response = xml2Json(pm.response.text());",
											"    var state = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"][\"oslc_auto:state\"].$[\"rdf:resource\"];",
											"    if (state == \"http://open-services.net/ns/auto#inProgress\") {",
											"        if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
											"            setTimeout(function(){}, [1000]); // 1 second",
											"            waitCounter++;",
											"            postman.setNextRequest(pm.info.requestName);",
											"        } else { // timeout, reset counter",
											"            waitCounter = 0;",
											"        }",
											"    } else { // wait doen, reset counter",
											"            waitCounter = 0;",
											"    }",
											"}",
											"",
											"pm.globals.set(\"waitCounter\", waitCounter);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/resources/automationRequests/{{requestId}}",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"resources",
										"automationRequests",
										"{{requestId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "check result",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response code should be 200 (OK)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"AutomationResult state should be #complete\", function () {",
											"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#new\\\"/>\");",
											"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#inProgress\\\"/>\");",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#complete\\\"/>\");",
											"});",
											"pm.test(\"AutomationResult verdict should be #passed\", function () {",
											"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:verdict rdf:resource=\\\"http://open-services.net/ns/auto#unavailable\\\"/>\");",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:verdict rdf:resource=\\\"http://open-services.net/ns/auto#passed\\\"/>\");",
											"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#error\\\"/>\");",
											"});",
											"",
											"pm.test(\"AutomationResult statusMessage should have the expected value\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Executing analysis: \");",
											"    pm.expect(pm.response.text()).to.include(\"Analysis completed successfully\");",
											"});",
											"pm.test(\"returnCode should be 0\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<rdf:value>0</rdf:value>\");",
											"});",
											"pm.test(\"stdout should have the expected value\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"int main(int argc, char** argv)\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/resources/automationResults/{{requestId}}",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"resources",
										"automationResults",
										"{{requestId}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Special features",
			"item": [
				{
					"name": "GET and PUT file contents as Contribution",
					"item": [
						{
							"name": "create SUT using the compilation provider",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// save the request ID as a global variable for later tests to use -- used as SUT ID",
											"const response = xml2Json(pm.response.text());",
											"var resrouceAbout = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"].$[\"rdf:about\"];",
											"var resourceAboutSplit = resrouceAbout.split(\"/\");",
											"var requestId = resourceAboutSplit[resourceAboutSplit.length-1];",
											"pm.globals.set('requestId', requestId);",
											"",
											"",
											"pm.test(\"Response code should be 201 (created)\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"var compilation_provider = pm.variables.get(\"compilation_provider\");",
											"var sutId = requestId;",
											"pm.globals.set(\"SUT\", compilation_provider + \"/services/resources/sUTs/\" + sutId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/xml"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>analysis test</dcterms:title>\n\t<dcterms:description>analysis test</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{compilation_provider}}/services/resources/automationPlans/0\" />\n\t\n\t<oslc_auto:inputParameter>\n        <oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>sourceBase64</oslc:name>\n\t\t\t<rdf:value>TestEchoProgram.cpp\nI2luY2x1ZGUgPHN0ZGlvLmg+CgppbnQgbWFpbihpbnQgYXJnYywgY2hhcioqIGFyZ3YpCnsKCXByaW50ZigiJXNcbiIsIGFyZ3ZbMV0pOwoJcmV0dXJuIDA7Cn0K</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>buildCommand</oslc:name>\n\t\t\t<rdf:value>gcc -g TestEchoProgram.cpp -o my_echo</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>launchCommand</oslc:name>\n\t\t\t<rdf:value>./my_echo</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>"
								},
								"url": {
									"raw": "{{compilation_provider}}/services/resources/createAutomationRequest",
									"host": [
										"{{compilation_provider}}"
									],
									"path": [
										"services",
										"resources",
										"createAutomationRequest"
									]
								}
							},
							"response": []
						},
						{
							"name": "wait for #complete (analysis/special features/get and put file contents as contribution/basic function/create sut)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var timeoutSeconds = pm.collectionVariables.get('automation_wait_time');",
											"",
											"var waitCounter = pm.globals.get(\"waitCounter\");",
											"if(!waitCounter) {",
											"    waitCounter = 0;",
											"}",
											"",
											"if (pm.response.code != 200) { // wait for the resource to be created",
											"    if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
											"        setTimeout(function(){}, [1000]); // 1 second",
											"        waitCounter++;",
											"        postman.setNextRequest(pm.info.requestName);",
											"    } else { // timeout, reset counter",
											"        waitCounter = 0;",
											"    }",
											"} else { // wait for the automation to complete",
											"    const response = xml2Json(pm.response.text());",
											"    var state = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"][\"oslc_auto:state\"].$[\"rdf:resource\"];",
											"    if (state == \"http://open-services.net/ns/auto#inProgress\") {",
											"        if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
											"            setTimeout(function(){}, [1000]); // 1 second",
											"            waitCounter++;",
											"            postman.setNextRequest(pm.info.requestName);",
											"        } else { // timeout, reset counter",
											"            waitCounter = 0;",
											"        }",
											"    } else { // wait doen, reset counter",
											"            waitCounter = 0;",
											"    }",
											"}",
											"",
											"pm.globals.set(\"waitCounter\", waitCounter);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"url": {
									"raw": "{{compilation_provider}}/services/resources/automationRequests/{{requestId}}",
									"host": [
										"{{compilation_provider}}"
									],
									"path": [
										"services",
										"resources",
										"automationRequests",
										"{{requestId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "run a analysis on the SUT",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response code should be 201 (created)\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"// save the request ID as a global variable for later tests to use",
											"const response = xml2Json(pm.response.text());",
											"var resrouceAbout = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"].$[\"rdf:about\"];",
											"var resourceAboutSplit = resrouceAbout.split(\"/\");",
											"var requestId = resourceAboutSplit[resourceAboutSplit.length-1];",
											"pm.globals.set('requestId', requestId);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/xml"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>Test title</dcterms:title>\n\t<dcterms:description>Test description</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{server_address}}/{{server_context}}/services/resources/automationPlans/dummy\" />\n\t<dcterms:creator rdf:resource=\"https://pajda.fit.vutbr.cz/xvasic\"/>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>arguments</oslc:name>\n\t\t\t<rdf:value>test_arguments</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>SUT</oslc:name>\n\t\t\t<rdf:value>{{SUT}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>outputFileRegex</oslc:name>\n\t\t\t<rdf:value>.*</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>"
								},
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/resources/createAutomationRequest",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"resources",
										"createAutomationRequest"
									]
								}
							},
							"response": []
						},
						{
							"name": "wait for #complete  (analysis/special features/get and put file contents as contribution/basic function)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var timeoutSeconds = pm.collectionVariables.get('automation_wait_time');",
											"",
											"var waitCounter = pm.globals.get(\"waitCounter\");",
											"if(!waitCounter) {",
											"    waitCounter = 0;",
											"}",
											"",
											"if (pm.response.code != 200) { // wait for the resource to be created",
											"    if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
											"        setTimeout(function(){}, [1000]); // 1 second",
											"        waitCounter++;",
											"        postman.setNextRequest(pm.info.requestName);",
											"    } else { // timeout, reset counter",
											"        waitCounter = 0;",
											"    }",
											"} else { // wait for the automation to complete",
											"    const response = xml2Json(pm.response.text());",
											"    var state = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"][\"oslc_auto:state\"].$[\"rdf:resource\"];",
											"    if (state == \"http://open-services.net/ns/auto#inProgress\") {",
											"        if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
											"            setTimeout(function(){}, [1000]); // 1 second",
											"            waitCounter++;",
											"            postman.setNextRequest(pm.info.requestName);",
											"        } else { // timeout, reset counter",
											"            waitCounter = 0;",
											"        }",
											"    } else { // wait doen, reset counter",
											"            waitCounter = 0;",
											"    }",
											"}",
											"",
											"pm.globals.set(\"waitCounter\", waitCounter);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/resources/automationRequests/{{requestId}}",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"resources",
										"automationRequests",
										"{{requestId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get AutomatinResult to find file URI",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// save the URI of a file contribution for upcomming requests by finding the right one basend on its title and then getting its fileURI",
											"const response = xml2Json(pm.response.text());",
											"var allContributions = response[\"rdf:RDF\"][\"oslc_auto:AutomationResult\"][\"oslc_auto:contribution\"];",
											"var contribIdx;",
											"var i;",
											"for (i = 0; i < allContributions.length; i++) {",
											"  var title = allContributions[i][\"oslc_auto:Contribution\"][\"dcterms:title\"]._;",
											"  if (title == \"file1\")",
											"  {",
											"    contribIdx = i;",
											"    break;",
											"  }",
											"}",
											"",
											"var contributionFileUri = allContributions[contribIdx][\"oslc_auto:Contribution\"].$[\"rdf:about\"];",
											"pm.globals.set('contributionFileUri', contributionFileUri);",
											"",
											"",
											"pm.test(\"Response code should be 200 (OK)\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/resources/automationResults/{{requestId}}",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"resources",
										"automationResults",
										"{{requestId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET contribution as xml",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response code should be 200 (OK)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response should contain a contribution resource\", function () {",
											"    pm.expect(pm.response.text()).to.contain(\"oslc_auto:Contribution\");",
											"});",
											"",
											"pm.test(\"Contribution resource should contain a fit:filePath property\", function () {",
											"    pm.expect(pm.response.text()).to.contain(\"fit:filePath\");",
											"});",
											"pm.test(\"Contribution resource should contain a dcterms:title property\", function () {",
											"    pm.expect(pm.response.text()).to.contain(\"dcterms:title\");",
											"});",
											"pm.test(\"Contribution resource should contain a dcterms:description property\", function () {",
											"    pm.expect(pm.response.text()).to.contain(\"dcterms:description\");",
											"});",
											"pm.test(\"Contribution resource should contain a oslc:valueType property\", function () {",
											"    pm.expect(pm.response.text()).to.contain(\"oslc:valueType\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/rdf+xml",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{contributionFileUri}}",
									"host": [
										"{{contributionFileUri}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET file contents as Contribution",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response code should be 200 (OK)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"File should contain the expected text\", function () {",
											"    pm.expect(pm.response.text()).to.contain(\"test file\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/octet-stream",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{contributionFileUri}}",
									"host": [
										"{{contributionFileUri}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT file contents as Contribution",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response code should be 200 (OK)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/octet-stream",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "updated file contents",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{contributionFileUri}}",
									"host": [
										"{{contributionFileUri}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET file contents to check updated value",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response code should be 200 (OK)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"File should contain the expected text\", function () {",
											"    pm.expect(pm.response.text()).to.equal(\"updated file contents\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/octet-stream"
									}
								],
								"url": {
									"raw": "{{contributionFileUri}}",
									"host": [
										"{{contributionFileUri}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "error GET file contents from Contribution without file path",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response code should be 400 (Bad Request)\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/octet-stream",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/resources/contributions/{{requestId}}-statusMessage",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"resources",
										"contributions",
										"{{requestId}}-statusMessage"
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT file contents as Contribution Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response code should be 400 (OK)\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"",
											"pm.test(\"Error msg should be - AutomationPlan not found\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Failed to upload Contribution file: This resource does not represent a file which could be directly uploaded\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/octet-stream",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "updated file contents",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/resources/contributions/{{requestId}}-statusMessage",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"resources",
										"contributions",
										"{{requestId}}-statusMessage"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "launching a noncompiled SUT",
					"item": [
						{
							"name": "create SUT using the compilation provider",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// save the request ID as a global variable for later tests to use -- used as SUT ID",
											"const response = xml2Json(pm.response.text());",
											"var resrouceAbout = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"].$[\"rdf:about\"];",
											"var resourceAboutSplit = resrouceAbout.split(\"/\");",
											"var requestId = resourceAboutSplit[resourceAboutSplit.length-1];",
											"pm.globals.set('requestId', requestId);",
											"",
											"",
											"pm.test(\"Response code should be 201 (created)\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"var compilation_provider = pm.variables.get(\"compilation_provider\");",
											"var sutId = requestId;",
											"pm.globals.set(\"SUT\", compilation_provider + \"/services/resources/sUTs/\" + sutId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/xml"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>analysis test</dcterms:title>\n\t<dcterms:description>analysis test</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{compilation_provider}}/services/resources/automationPlans/0\" />\n\t\n\t<oslc_auto:inputParameter>\n        <oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>sourceBase64</oslc:name>\n\t\t\t<rdf:value>TestEchoProgram.cpp\nI2luY2x1ZGUgPHN0ZGlvLmg+CgppbnQgbWFpbihpbnQgYXJnYywgY2hhcioqIGFyZ3YpCnsKCXByaW50ZigiJXNcbiIsIGFyZ3ZbMV0pOwoJcmV0dXJuIDA7Cn0K</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>buildCommand</oslc:name>\n\t\t\t<rdf:value>gcc -g TestEchoProgram.cpp -o my_echo</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>compile</oslc:name>\n\t\t\t<rdf:value>false</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>launchCommand</oslc:name>\n\t\t\t<rdf:value>./my_echo</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>"
								},
								"url": {
									"raw": "{{compilation_provider}}/services/resources/createAutomationRequest",
									"host": [
										"{{compilation_provider}}"
									],
									"path": [
										"services",
										"resources",
										"createAutomationRequest"
									]
								}
							},
							"response": []
						},
						{
							"name": "wait for #complete (analysis/special feature/launching a noncompiled sut/create sut)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var timeoutSeconds = pm.collectionVariables.get('automation_wait_time');",
											"",
											"var waitCounter = pm.globals.get(\"waitCounter\");",
											"if(!waitCounter) {",
											"    waitCounter = 0;",
											"}",
											"",
											"if (pm.response.code != 200) { // wait for the resource to be created",
											"    if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
											"        setTimeout(function(){}, [1000]); // 1 second",
											"        waitCounter++;",
											"        postman.setNextRequest(pm.info.requestName);",
											"    } else { // timeout, reset counter",
											"        waitCounter = 0;",
											"    }",
											"} else { // wait for the automation to complete",
											"    const response = xml2Json(pm.response.text());",
											"    var state = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"][\"oslc_auto:state\"].$[\"rdf:resource\"];",
											"    if (state == \"http://open-services.net/ns/auto#inProgress\") {",
											"        if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
											"            setTimeout(function(){}, [1000]); // 1 second",
											"            waitCounter++;",
											"            postman.setNextRequest(pm.info.requestName);",
											"        } else { // timeout, reset counter",
											"            waitCounter = 0;",
											"        }",
											"    } else { // wait doen, reset counter",
											"            waitCounter = 0;",
											"    }",
											"}",
											"",
											"pm.globals.set(\"waitCounter\", waitCounter);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"url": {
									"raw": "{{compilation_provider}}/services/resources/automationRequests/{{requestId}}",
									"host": [
										"{{compilation_provider}}"
									],
									"path": [
										"services",
										"resources",
										"automationRequests",
										"{{requestId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "create request",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response code should be 201 (created)\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"",
											"// save the request ID as a global variable for later tests to use",
											"const response = xml2Json(pm.response.text());",
											"var resrouceAbout = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"].$[\"rdf:about\"];",
											"var resourceAboutSplit = resrouceAbout.split(\"/\");",
											"var requestId = resourceAboutSplit[resourceAboutSplit.length-1];",
											"pm.globals.set('requestId', requestId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/xml"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>test</dcterms:title>\n\t<dcterms:description>test</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{server_address}}/{{server_context}}/services/resources/automationPlans/dummy\" />\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>arguments</oslc:name>\n\t\t\t<rdf:value>\"Hello World!\"</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>SUT</oslc:name>\n\t\t\t<rdf:value>{{SUT}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>"
								},
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/resources/createAutomationRequest",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"resources",
										"createAutomationRequest"
									]
								}
							},
							"response": []
						},
						{
							"name": "wait for #complete (analysis/special feature/launching a noncompiled sut",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var timeoutSeconds = pm.collectionVariables.get('automation_wait_time');",
											"",
											"var waitCounter = pm.globals.get(\"waitCounter\");",
											"if(!waitCounter) {",
											"    waitCounter = 0;",
											"}",
											"",
											"if (pm.response.code != 200) { // wait for the resource to be created",
											"    if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
											"        setTimeout(function(){}, [1000]); // 1 second",
											"        waitCounter++;",
											"        postman.setNextRequest(pm.info.requestName);",
											"    } else { // timeout, reset counter",
											"        waitCounter = 0;",
											"    }",
											"} else { // wait for the automation to complete",
											"    const response = xml2Json(pm.response.text());",
											"    var state = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"][\"oslc_auto:state\"].$[\"rdf:resource\"];",
											"    if (state == \"http://open-services.net/ns/auto#inProgress\") {",
											"        if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
											"            setTimeout(function(){}, [1000]); // 1 second",
											"            waitCounter++;",
											"            postman.setNextRequest(pm.info.requestName);",
											"        } else { // timeout, reset counter",
											"            waitCounter = 0;",
											"        }",
											"    } else { // wait doen, reset counter",
											"            waitCounter = 0;",
											"    }",
											"}",
											"",
											"pm.globals.set(\"waitCounter\", waitCounter);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/resources/automationRequests/{{requestId}}",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"resources",
										"automationRequests",
										"{{requestId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "check result",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response code should be 200 (OK)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"AutomationResult state should be #complete\", function () {",
											"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#new\\\"/>\");",
											"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#inProgress\\\"/>\");",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#complete\\\"/>\");",
											"});",
											"pm.test(\"AutomationResult verdict should be #passed\", function () {",
											"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:verdict rdf:resource=\\\"http://open-services.net/ns/auto#unavailable\\\"/>\");",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:verdict rdf:resource=\\\"http://open-services.net/ns/auto#passed\\\"/>\");",
											"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#error\\\"/>\");",
											"});",
											"",
											"pm.test(\"AutomationResult statusMessage should contain a warning\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<rdf:value>Warning: Analysing an SUT which was not compiled\\nExecuting analysis:\");",
											"    pm.expect(pm.response.text()).to.include(\"Analysis completed successfully\");",
											"});",
											"pm.test(\"returnCode should be 0\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<rdf:value>0</rdf:value>\");",
											"});",
											"pm.test(\"stdout should have the expected value\", function () {",
											"    var os = pm.globals.get(\"currentOS\");",
											"    if (os == \"windows_bat\"){",
											"        pm.expect(pm.response.text()).to.include(\"Your argument: --args\");",
											"    } else {",
											"        pm.expect(pm.response.text()).to.include(\"Your argument: --args=Hello World!\");",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/resources/automationResults/{{requestId}}",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"resources",
										"automationResults",
										"{{requestId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "outputFilters",
					"item": [
						{
							"name": "builtin filters",
							"item": [
								{
									"name": "RemoveAllFileValues",
									"item": [
										{
											"name": "create SUT using the compilation provider",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// save the request ID as a global variable for later tests to use -- used as SUT ID",
															"const response = xml2Json(pm.response.text());",
															"var resrouceAbout = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"].$[\"rdf:about\"];",
															"var resourceAboutSplit = resrouceAbout.split(\"/\");",
															"var requestId = resourceAboutSplit[resourceAboutSplit.length-1];",
															"pm.globals.set('requestId', requestId);",
															"",
															"",
															"pm.test(\"Response code should be 201 (created)\", function () {",
															"    pm.response.to.have.status(201);",
															"});",
															"",
															"var compilation_provider = pm.variables.get(\"compilation_provider\");",
															"var sutId = requestId;",
															"pm.globals.set(\"SUT\", compilation_provider + \"/services/resources/sUTs/\" + sutId);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/xml"
													},
													{
														"key": "Accept",
														"type": "text",
														"value": "application/rdf+xml"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>analysis test</dcterms:title>\n\t<dcterms:description>analysis test</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{compilation_provider}}/services/resources/automationPlans/0\" />\n\t\n\t<oslc_auto:inputParameter>\n        <oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>sourceBase64</oslc:name>\n\t\t\t<rdf:value>TestEchoProgram.cpp\nI2luY2x1ZGUgPHN0ZGlvLmg+CgppbnQgbWFpbihpbnQgYXJnYywgY2hhcioqIGFyZ3YpCnsKCXByaW50ZigiJXNcbiIsIGFyZ3ZbMV0pOwoJcmV0dXJuIDA7Cn0K</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>buildCommand</oslc:name>\n\t\t\t<rdf:value>gcc -g TestEchoProgram.cpp -o my_echo</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>launchCommand</oslc:name>\n\t\t\t<rdf:value>./my_echo</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>"
												},
												"url": {
													"raw": "{{compilation_provider}}/services/resources/createAutomationRequest",
													"host": [
														"{{compilation_provider}}"
													],
													"path": [
														"services",
														"resources",
														"createAutomationRequest"
													]
												}
											},
											"response": []
										},
										{
											"name": "wait for #complete (analysis/special feature/outputFilters/builtin filters/default/create sut)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var timeoutSeconds = pm.collectionVariables.get('automation_wait_time');",
															"",
															"var waitCounter = pm.globals.get(\"waitCounter\");",
															"if(!waitCounter) {",
															"    waitCounter = 0;",
															"}",
															"",
															"if (pm.response.code != 200) { // wait for the resource to be created",
															"    if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
															"        setTimeout(function(){}, [1000]); // 1 second",
															"        waitCounter++;",
															"        postman.setNextRequest(pm.info.requestName);",
															"    } else { // timeout, reset counter",
															"        waitCounter = 0;",
															"    }",
															"} else { // wait for the automation to complete",
															"    const response = xml2Json(pm.response.text());",
															"    var state = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"][\"oslc_auto:state\"].$[\"rdf:resource\"];",
															"    if (state == \"http://open-services.net/ns/auto#inProgress\") {",
															"        if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
															"            setTimeout(function(){}, [1000]); // 1 second",
															"            waitCounter++;",
															"            postman.setNextRequest(pm.info.requestName);",
															"        } else { // timeout, reset counter",
															"            waitCounter = 0;",
															"        }",
															"    } else { // wait doen, reset counter",
															"            waitCounter = 0;",
															"    }",
															"}",
															"",
															"pm.globals.set(\"waitCounter\", waitCounter);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"type": "text",
														"value": "application/rdf+xml"
													}
												],
												"url": {
													"raw": "{{compilation_provider}}/services/resources/automationRequests/{{requestId}}",
													"host": [
														"{{compilation_provider}}"
													],
													"path": [
														"services",
														"resources",
														"automationRequests",
														"{{requestId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "create request",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response code should be 201 (created)\", function () {",
															"    pm.response.to.have.status(201);",
															"});",
															"",
															"",
															"// save the request ID as a global variable for later tests to use",
															"const response = xml2Json(pm.response.text());",
															"var resrouceAbout = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"].$[\"rdf:about\"];",
															"var resourceAboutSplit = resrouceAbout.split(\"/\");",
															"var requestId = resourceAboutSplit[resourceAboutSplit.length-1];",
															"pm.globals.set('requestId', requestId);",
															"",
															"",
															"pm.test(\"AutomationResult should contain outputFilter input parameter\", function () {",
															"    pm.expect(pm.response.text()).to.include(\"<oslc:name>outputFilter</oslc:name>\");",
															"});",
															"pm.test(\"OutputFilter value should be \\\"default\\\"\", function () {",
															"    pm.expect(pm.response.text()).to.include(\"<rdf:value>removeAllFileValues</rdf:value>\");",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/xml"
													},
													{
														"key": "Accept",
														"type": "text",
														"value": "application/rdf+xml"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>test</dcterms:title>\n\t<dcterms:description>test</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{server_address}}/{{server_context}}/services/resources/automationPlans/dummy\" />\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>arguments</oslc:name>\n\t\t\t<rdf:value>\"Hello World!\"</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>outputFilter</oslc:name>\n\t\t\t<rdf:value>removeAllFileValues</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n    \n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>outputFileRegex</oslc:name>\n\t\t\t<rdf:value>.*</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n    \n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>SUT</oslc:name>\n\t\t\t<rdf:value>{{SUT}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>"
												},
												"url": {
													"raw": "{{server_address}}/{{server_context}}/services/resources/createAutomationRequest",
													"host": [
														"{{server_address}}"
													],
													"path": [
														"{{server_context}}",
														"services",
														"resources",
														"createAutomationRequest"
													]
												}
											},
											"response": []
										},
										{
											"name": "wait for #complete (analysis/special feature/builtint filters/default/result)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var timeoutSeconds = pm.collectionVariables.get('automation_wait_time');",
															"",
															"var waitCounter = pm.globals.get(\"waitCounter\");",
															"if(!waitCounter) {",
															"    waitCounter = 0;",
															"}",
															"",
															"if (pm.response.code != 200) { // wait for the resource to be created",
															"    if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
															"        setTimeout(function(){}, [1000]); // 1 second",
															"        waitCounter++;",
															"        postman.setNextRequest(pm.info.requestName);",
															"    } else { // timeout, reset counter",
															"        waitCounter = 0;",
															"    }",
															"} else { // wait for the automation to complete",
															"    const response = xml2Json(pm.response.text());",
															"    var state = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"][\"oslc_auto:state\"].$[\"rdf:resource\"];",
															"    if (state == \"http://open-services.net/ns/auto#inProgress\") {",
															"        if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
															"            setTimeout(function(){}, [1000]); // 1 second",
															"            waitCounter++;",
															"            postman.setNextRequest(pm.info.requestName);",
															"        } else { // timeout, reset counter",
															"            waitCounter = 0;",
															"        }",
															"    } else { // wait doen, reset counter",
															"            waitCounter = 0;",
															"    }",
															"}",
															"",
															"pm.globals.set(\"waitCounter\", waitCounter);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"type": "text",
														"value": "application/rdf+xml"
													}
												],
												"url": {
													"raw": "{{server_address}}/{{server_context}}/services/resources/automationRequests/{{requestId}}",
													"host": [
														"{{server_address}}"
													],
													"path": [
														"{{server_context}}",
														"services",
														"resources",
														"automationRequests",
														"{{requestId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "check result",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response code should be 200 (OK)\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"pm.test(\"AutomationResult state should be #complete\", function () {",
															"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#new\\\"/>\");",
															"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#inProgress\\\"/>\");",
															"    pm.expect(pm.response.text()).to.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#complete\\\"/>\");",
															"});",
															"pm.test(\"AutomationResult verdict should be #passed\", function () {",
															"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:verdict rdf:resource=\\\"http://open-services.net/ns/auto#unavailable\\\"/>\");",
															"    pm.expect(pm.response.text()).to.include(\"oslc_auto:verdict rdf:resource=\\\"http://open-services.net/ns/auto#passed\\\"/>\");",
															"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#error\\\"/>\");",
															"});",
															"",
															"pm.test(\"AutomationResult statusMessage have the expected value\", function () {",
															"    pm.expect(pm.response.text()).to.include(\"Executing analysis:\");",
															"    pm.expect(pm.response.text()).to.include(\"Analysis completed successfully\");",
															"});",
															"pm.test(\"returnCode should be 0\", function () {",
															"    pm.expect(pm.response.text()).to.include(\"<rdf:value>0</rdf:value>\");",
															"});",
															"pm.test(\"stdout should be empty\", function () {",
															"    pm.expect(pm.response.text()).to.not.include(\"Your argument:\");",
															"});",
															"pm.test(\"file contributions should not have their values\", function () {",
															"    pm.expect(pm.response.text()).to.not.include(\"<rdf:value>test file \");",
															"});",
															"pm.test(\"contributions like execution time or return code should have their value\", function () {",
															"    pm.expect(pm.response.text()).to.include(\"<rdf:value>0</rdf:value>\");",
															"});",
															"",
															"",
															"pm.test(\"AutomationResult should contain outputFilter input parameter\", function () {",
															"    pm.expect(pm.response.text()).to.include(\"<oslc:name>outputFilter</oslc:name>\");",
															"});",
															"pm.test(\"OutputFilter value should be \\\"default\\\"\", function () {",
															"    pm.expect(pm.response.text()).to.include(\"<rdf:value>removeAllFileValues</rdf:value>\");",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"type": "text",
														"value": "application/rdf+xml"
													}
												],
												"url": {
													"raw": "{{server_address}}/{{server_context}}/services/resources/automationResults/{{requestId}}",
													"host": [
														"{{server_address}}"
													],
													"path": [
														"{{server_context}}",
														"services",
														"resources",
														"automationResults",
														"{{requestId}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "AddAllNonBinaryFileValues",
									"item": [
										{
											"name": "create SUT using the compilation provider",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// save the request ID as a global variable for later tests to use -- used as SUT ID",
															"const response = xml2Json(pm.response.text());",
															"var resrouceAbout = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"].$[\"rdf:about\"];",
															"var resourceAboutSplit = resrouceAbout.split(\"/\");",
															"var requestId = resourceAboutSplit[resourceAboutSplit.length-1];",
															"pm.globals.set('requestId', requestId);",
															"",
															"",
															"pm.test(\"Response code should be 201 (created)\", function () {",
															"    pm.response.to.have.status(201);",
															"});",
															"",
															"var compilation_provider = pm.variables.get(\"compilation_provider\");",
															"var sutId = requestId;",
															"pm.globals.set(\"SUT\", compilation_provider + \"/services/resources/sUTs/\" + sutId);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/xml"
													},
													{
														"key": "Accept",
														"type": "text",
														"value": "application/rdf+xml"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>analysis test</dcterms:title>\n\t<dcterms:description>analysis test</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{compilation_provider}}/services/resources/automationPlans/0\" />\n\t\n\t<oslc_auto:inputParameter>\n        <oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>sourceBase64</oslc:name>\n\t\t\t<rdf:value>TestEchoProgram.cpp\nI2luY2x1ZGUgPHN0ZGlvLmg+CgppbnQgbWFpbihpbnQgYXJnYywgY2hhcioqIGFyZ3YpCnsKCXByaW50ZigiJXNcbiIsIGFyZ3ZbMV0pOwoJcmV0dXJuIDA7Cn0K</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>buildCommand</oslc:name>\n\t\t\t<rdf:value>gcc -g TestEchoProgram.cpp -o my_echo</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>launchCommand</oslc:name>\n\t\t\t<rdf:value>./my_echo</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>"
												},
												"url": {
													"raw": "{{compilation_provider}}/services/resources/createAutomationRequest",
													"host": [
														"{{compilation_provider}}"
													],
													"path": [
														"services",
														"resources",
														"createAutomationRequest"
													]
												}
											},
											"response": []
										},
										{
											"name": "wait for #complete (analysis/special feature/outputFilters/builtin filters/AddAllNonBinaryFileValues/create sut)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var timeoutSeconds = pm.collectionVariables.get('automation_wait_time');",
															"",
															"var waitCounter = pm.globals.get(\"waitCounter\");",
															"if(!waitCounter) {",
															"    waitCounter = 0;",
															"}",
															"",
															"if (pm.response.code != 200) { // wait for the resource to be created",
															"    if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
															"        setTimeout(function(){}, [1000]); // 1 second",
															"        waitCounter++;",
															"        postman.setNextRequest(pm.info.requestName);",
															"    } else { // timeout, reset counter",
															"        waitCounter = 0;",
															"    }",
															"} else { // wait for the automation to complete",
															"    const response = xml2Json(pm.response.text());",
															"    var state = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"][\"oslc_auto:state\"].$[\"rdf:resource\"];",
															"    if (state == \"http://open-services.net/ns/auto#inProgress\") {",
															"        if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
															"            setTimeout(function(){}, [1000]); // 1 second",
															"            waitCounter++;",
															"            postman.setNextRequest(pm.info.requestName);",
															"        } else { // timeout, reset counter",
															"            waitCounter = 0;",
															"        }",
															"    } else { // wait doen, reset counter",
															"            waitCounter = 0;",
															"    }",
															"}",
															"",
															"pm.globals.set(\"waitCounter\", waitCounter);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"type": "text",
														"value": "application/rdf+xml"
													}
												],
												"url": {
													"raw": "{{compilation_provider}}/services/resources/automationRequests/{{requestId}}",
													"host": [
														"{{compilation_provider}}"
													],
													"path": [
														"services",
														"resources",
														"automationRequests",
														"{{requestId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "create request",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response code should be 201 (created)\", function () {",
															"    pm.response.to.have.status(201);",
															"});",
															"",
															"",
															"// save the request ID as a global variable for later tests to use",
															"const response = xml2Json(pm.response.text());",
															"var resrouceAbout = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"].$[\"rdf:about\"];",
															"var resourceAboutSplit = resrouceAbout.split(\"/\");",
															"var requestId = resourceAboutSplit[resourceAboutSplit.length-1];",
															"pm.globals.set('requestId', requestId);",
															"",
															"",
															"pm.test(\"AutomationResult should contain outputFilter input parameter\", function () {",
															"    pm.expect(pm.response.text()).to.include(\"<oslc:name>outputFilter</oslc:name>\");",
															"});",
															"pm.test(\"OutputFilter value should be \\\"default\\\"\", function () {",
															"    pm.expect(pm.response.text()).to.include(\"<rdf:value>addAllNonBinaryFileValues</rdf:value>\");",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/xml"
													},
													{
														"key": "Accept",
														"type": "text",
														"value": "application/rdf+xml"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>test</dcterms:title>\n\t<dcterms:description>test</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{server_address}}/{{server_context}}/services/resources/automationPlans/dummy\" />\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>arguments</oslc:name>\n\t\t\t<rdf:value>\"Hello World!\"</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>outputFilter</oslc:name>\n\t\t\t<rdf:value>addAllNonBinaryFileValues</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n    \n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>outputFileRegex</oslc:name>\n\t\t\t<rdf:value>.*</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n    \n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>SUT</oslc:name>\n\t\t\t<rdf:value>{{SUT}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>"
												},
												"url": {
													"raw": "{{server_address}}/{{server_context}}/services/resources/createAutomationRequest",
													"host": [
														"{{server_address}}"
													],
													"path": [
														"{{server_context}}",
														"services",
														"resources",
														"createAutomationRequest"
													]
												}
											},
											"response": []
										},
										{
											"name": "wait for #complete (analysis/special feature/builtint filters/AddAllNonBinaryFileValues/result)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var timeoutSeconds = pm.collectionVariables.get('automation_wait_time');",
															"",
															"var waitCounter = pm.globals.get(\"waitCounter\");",
															"if(!waitCounter) {",
															"    waitCounter = 0;",
															"}",
															"",
															"if (pm.response.code != 200) { // wait for the resource to be created",
															"    if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
															"        setTimeout(function(){}, [1000]); // 1 second",
															"        waitCounter++;",
															"        postman.setNextRequest(pm.info.requestName);",
															"    } else { // timeout, reset counter",
															"        waitCounter = 0;",
															"    }",
															"} else { // wait for the automation to complete",
															"    const response = xml2Json(pm.response.text());",
															"    var state = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"][\"oslc_auto:state\"].$[\"rdf:resource\"];",
															"    if (state == \"http://open-services.net/ns/auto#inProgress\") {",
															"        if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
															"            setTimeout(function(){}, [1000]); // 1 second",
															"            waitCounter++;",
															"            postman.setNextRequest(pm.info.requestName);",
															"        } else { // timeout, reset counter",
															"            waitCounter = 0;",
															"        }",
															"    } else { // wait doen, reset counter",
															"            waitCounter = 0;",
															"    }",
															"}",
															"",
															"pm.globals.set(\"waitCounter\", waitCounter);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"type": "text",
														"value": "application/rdf+xml"
													}
												],
												"url": {
													"raw": "{{server_address}}/{{server_context}}/services/resources/automationRequests/{{requestId}}",
													"host": [
														"{{server_address}}"
													],
													"path": [
														"{{server_context}}",
														"services",
														"resources",
														"automationRequests",
														"{{requestId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "check result",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response code should be 200 (OK)\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"pm.test(\"AutomationResult state should be #complete\", function () {",
															"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#new\\\"/>\");",
															"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#inProgress\\\"/>\");",
															"    pm.expect(pm.response.text()).to.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#complete\\\"/>\");",
															"});",
															"pm.test(\"AutomationResult verdict should be #passed\", function () {",
															"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:verdict rdf:resource=\\\"http://open-services.net/ns/auto#unavailable\\\"/>\");",
															"    pm.expect(pm.response.text()).to.include(\"oslc_auto:verdict rdf:resource=\\\"http://open-services.net/ns/auto#passed\\\"/>\");",
															"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#error\\\"/>\");",
															"});",
															"",
															"pm.test(\"AutomationResult statusMessage have the expected value\", function () {",
															"    pm.expect(pm.response.text()).to.include(\"Executing analysis:\");",
															"    pm.expect(pm.response.text()).to.include(\"Analysis completed successfully\");",
															"});",
															"pm.test(\"returnCode should be 0\", function () {",
															"    pm.expect(pm.response.text()).to.include(\"<rdf:value>0</rdf:value>\");",
															"});",
															"pm.test(\"stdout should not be empty\", function () {",
															"    pm.expect(pm.response.text()).to.include(\"Your argument:\");",
															"    pm.expect(pm.response.text()).to.include(\"Dummy tool!\");",
															"});",
															"",
															"pm.test(\"file contributions should not have their values (none are .txt)\", function () {",
															"    pm.expect(pm.response.text()).to.not.include(\"<rdf:value>test file \");",
															"});",
															"pm.test(\"contributions like execution time or return code should have their value\", function () {",
															"    pm.expect(pm.response.text()).to.include(\"<rdf:value>0</rdf:value>\");",
															"});",
															"",
															"pm.test(\"AutomationResult should contain outputFilter input parameter\", function () {",
															"    pm.expect(pm.response.text()).to.include(\"<oslc:name>outputFilter</oslc:name>\");",
															"});",
															"pm.test(\"OutputFilter value should be \\\"default\\\"\", function () {",
															"    pm.expect(pm.response.text()).to.include(\"<rdf:value>addAllNonBinaryFileValues</rdf:value>\");",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"type": "text",
														"value": "application/rdf+xml"
													}
												],
												"url": {
													"raw": "{{server_address}}/{{server_context}}/services/resources/automationResults/{{requestId}}",
													"host": [
														"{{server_address}}"
													],
													"path": [
														"{{server_context}}",
														"services",
														"resources",
														"automationResults",
														"{{requestId}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "AddAllFileValues",
									"item": [
										{
											"name": "create SUT using the compilation provider",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// save the request ID as a global variable for later tests to use -- used as SUT ID",
															"const response = xml2Json(pm.response.text());",
															"var resrouceAbout = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"].$[\"rdf:about\"];",
															"var resourceAboutSplit = resrouceAbout.split(\"/\");",
															"var requestId = resourceAboutSplit[resourceAboutSplit.length-1];",
															"pm.globals.set('requestId', requestId);",
															"",
															"",
															"pm.test(\"Response code should be 201 (created)\", function () {",
															"    pm.response.to.have.status(201);",
															"});",
															"",
															"var compilation_provider = pm.variables.get(\"compilation_provider\");",
															"var sutId = requestId;",
															"pm.globals.set(\"SUT\", compilation_provider + \"/services/resources/sUTs/\" + sutId);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/xml"
													},
													{
														"key": "Accept",
														"type": "text",
														"value": "application/rdf+xml"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>analysis test</dcterms:title>\n\t<dcterms:description>analysis test</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{compilation_provider}}/services/resources/automationPlans/0\" />\n\t\n\t<oslc_auto:inputParameter>\n        <oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>sourceBase64</oslc:name>\n\t\t\t<rdf:value>TestEchoProgram.cpp\nI2luY2x1ZGUgPHN0ZGlvLmg+CgppbnQgbWFpbihpbnQgYXJnYywgY2hhcioqIGFyZ3YpCnsKCXByaW50ZigiJXNcbiIsIGFyZ3ZbMV0pOwoJcmV0dXJuIDA7Cn0K</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>buildCommand</oslc:name>\n\t\t\t<rdf:value>gcc -g TestEchoProgram.cpp -o my_echo</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>launchCommand</oslc:name>\n\t\t\t<rdf:value>./my_echo</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>"
												},
												"url": {
													"raw": "{{compilation_provider}}/services/resources/createAutomationRequest",
													"host": [
														"{{compilation_provider}}"
													],
													"path": [
														"services",
														"resources",
														"createAutomationRequest"
													]
												}
											},
											"response": []
										},
										{
											"name": "wait for #complete (analysis/special feature/outputFilters/builtin filters/AddAllFileValues/create sut)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var timeoutSeconds = pm.collectionVariables.get('automation_wait_time');",
															"",
															"var waitCounter = pm.globals.get(\"waitCounter\");",
															"if(!waitCounter) {",
															"    waitCounter = 0;",
															"}",
															"",
															"if (pm.response.code != 200) { // wait for the resource to be created",
															"    if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
															"        setTimeout(function(){}, [1000]); // 1 second",
															"        waitCounter++;",
															"        postman.setNextRequest(pm.info.requestName);",
															"    } else { // timeout, reset counter",
															"        waitCounter = 0;",
															"    }",
															"} else { // wait for the automation to complete",
															"    const response = xml2Json(pm.response.text());",
															"    var state = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"][\"oslc_auto:state\"].$[\"rdf:resource\"];",
															"    if (state == \"http://open-services.net/ns/auto#inProgress\") {",
															"        if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
															"            setTimeout(function(){}, [1000]); // 1 second",
															"            waitCounter++;",
															"            postman.setNextRequest(pm.info.requestName);",
															"        } else { // timeout, reset counter",
															"            waitCounter = 0;",
															"        }",
															"    } else { // wait doen, reset counter",
															"            waitCounter = 0;",
															"    }",
															"}",
															"",
															"pm.globals.set(\"waitCounter\", waitCounter);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"type": "text",
														"value": "application/rdf+xml"
													}
												],
												"url": {
													"raw": "{{compilation_provider}}/services/resources/automationRequests/{{requestId}}",
													"host": [
														"{{compilation_provider}}"
													],
													"path": [
														"services",
														"resources",
														"automationRequests",
														"{{requestId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "create request",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response code should be 201 (created)\", function () {",
															"    pm.response.to.have.status(201);",
															"});",
															"",
															"",
															"// save the request ID as a global variable for later tests to use",
															"const response = xml2Json(pm.response.text());",
															"var resrouceAbout = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"].$[\"rdf:about\"];",
															"var resourceAboutSplit = resrouceAbout.split(\"/\");",
															"var requestId = resourceAboutSplit[resourceAboutSplit.length-1];",
															"pm.globals.set('requestId', requestId);",
															"",
															"",
															"pm.test(\"AutomationResult should contain outputFilter input parameter\", function () {",
															"    pm.expect(pm.response.text()).to.include(\"<oslc:name>outputFilter</oslc:name>\");",
															"});",
															"pm.test(\"OutputFilter value should be \\\"default\\\"\", function () {",
															"    pm.expect(pm.response.text()).to.include(\"<rdf:value>addAllFileValues</rdf:value>\");",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/xml"
													},
													{
														"key": "Accept",
														"type": "text",
														"value": "application/rdf+xml"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>test</dcterms:title>\n\t<dcterms:description>test</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{server_address}}/{{server_context}}/services/resources/automationPlans/dummy\" />\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>arguments</oslc:name>\n\t\t\t<rdf:value>\"Hello World!\"</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>outputFilter</oslc:name>\n\t\t\t<rdf:value>addAllFileValues</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n    \n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>outputFileRegex</oslc:name>\n\t\t\t<rdf:value>.*</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n    \n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>SUT</oslc:name>\n\t\t\t<rdf:value>{{SUT}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>"
												},
												"url": {
													"raw": "{{server_address}}/{{server_context}}/services/resources/createAutomationRequest",
													"host": [
														"{{server_address}}"
													],
													"path": [
														"{{server_context}}",
														"services",
														"resources",
														"createAutomationRequest"
													]
												}
											},
											"response": []
										},
										{
											"name": "wait for #complete (analysis/special feature/builtint filters/AddAllFileValues/result)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var timeoutSeconds = pm.collectionVariables.get('automation_wait_time');",
															"",
															"var waitCounter = pm.globals.get(\"waitCounter\");",
															"if(!waitCounter) {",
															"    waitCounter = 0;",
															"}",
															"",
															"if (pm.response.code != 200) { // wait for the resource to be created",
															"    if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
															"        setTimeout(function(){}, [1000]); // 1 second",
															"        waitCounter++;",
															"        postman.setNextRequest(pm.info.requestName);",
															"    } else { // timeout, reset counter",
															"        waitCounter = 0;",
															"    }",
															"} else { // wait for the automation to complete",
															"    const response = xml2Json(pm.response.text());",
															"    var state = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"][\"oslc_auto:state\"].$[\"rdf:resource\"];",
															"    if (state == \"http://open-services.net/ns/auto#inProgress\") {",
															"        if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
															"            setTimeout(function(){}, [1000]); // 1 second",
															"            waitCounter++;",
															"            postman.setNextRequest(pm.info.requestName);",
															"        } else { // timeout, reset counter",
															"            waitCounter = 0;",
															"        }",
															"    } else { // wait doen, reset counter",
															"            waitCounter = 0;",
															"    }",
															"}",
															"",
															"pm.globals.set(\"waitCounter\", waitCounter);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"type": "text",
														"value": "application/rdf+xml"
													}
												],
												"url": {
													"raw": "{{server_address}}/{{server_context}}/services/resources/automationRequests/{{requestId}}",
													"host": [
														"{{server_address}}"
													],
													"path": [
														"{{server_context}}",
														"services",
														"resources",
														"automationRequests",
														"{{requestId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "check result",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response code should be 200 (OK)\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"pm.test(\"AutomationResult state should be #complete\", function () {",
															"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#new\\\"/>\");",
															"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#inProgress\\\"/>\");",
															"    pm.expect(pm.response.text()).to.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#complete\\\"/>\");",
															"});",
															"pm.test(\"AutomationResult verdict should be #passed\", function () {",
															"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:verdict rdf:resource=\\\"http://open-services.net/ns/auto#unavailable\\\"/>\");",
															"    pm.expect(pm.response.text()).to.include(\"oslc_auto:verdict rdf:resource=\\\"http://open-services.net/ns/auto#passed\\\"/>\");",
															"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#error\\\"/>\");",
															"});",
															"",
															"pm.test(\"AutomationResult statusMessage have the expected value\", function () {",
															"    pm.expect(pm.response.text()).to.include(\"Executing analysis:\");",
															"    pm.expect(pm.response.text()).to.include(\"Analysis completed successfully\");",
															"});",
															"pm.test(\"returnCode should be 0\", function () {",
															"    pm.expect(pm.response.text()).to.include(\"<rdf:value>0</rdf:value>\");",
															"});",
															"pm.test(\"stdout should not be empty\", function () {",
															"    pm.expect(pm.response.text()).to.include(\"Your argument:\");",
															"    pm.expect(pm.response.text()).to.include(\"Dummy tool!\");",
															"});",
															"pm.test(\"file contributions should have their values\", function () {",
															"    pm.expect(pm.response.text()).to.include(\"<rdf:value>test file\");",
															"});",
															"pm.test(\"contributions like execution time or return code should have their value\", function () {",
															"    pm.expect(pm.response.text()).to.include(\"<rdf:value>0</rdf:value>\");",
															"});",
															"",
															"",
															"",
															"pm.test(\"AutomationResult should contain outputFilter input parameter\", function () {",
															"    pm.expect(pm.response.text()).to.include(\"<oslc:name>outputFilter</oslc:name>\");",
															"});",
															"pm.test(\"OutputFilter value should be \\\"default\\\"\", function () {",
															"    pm.expect(pm.response.text()).to.include(\"<rdf:value>addAllFileValues</rdf:value>\");",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"type": "text",
														"value": "application/rdf+xml"
													}
												],
												"url": {
													"raw": "{{server_address}}/{{server_context}}/services/resources/automationResults/{{requestId}}",
													"host": [
														"{{server_address}}"
													],
													"path": [
														"{{server_context}}",
														"services",
														"resources",
														"automationResults",
														"{{requestId}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "AddStdoutAndStderrValues",
									"item": [
										{
											"name": "create SUT using the compilation provider",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// save the request ID as a global variable for later tests to use -- used as SUT ID",
															"const response = xml2Json(pm.response.text());",
															"var resrouceAbout = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"].$[\"rdf:about\"];",
															"var resourceAboutSplit = resrouceAbout.split(\"/\");",
															"var requestId = resourceAboutSplit[resourceAboutSplit.length-1];",
															"pm.globals.set('requestId', requestId);",
															"",
															"",
															"pm.test(\"Response code should be 201 (created)\", function () {",
															"    pm.response.to.have.status(201);",
															"});",
															"",
															"var compilation_provider = pm.variables.get(\"compilation_provider\");",
															"var sutId = requestId;",
															"pm.globals.set(\"SUT\", compilation_provider + \"/services/resources/sUTs/\" + sutId);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/xml"
													},
													{
														"key": "Accept",
														"type": "text",
														"value": "application/rdf+xml"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>analysis test</dcterms:title>\n\t<dcterms:description>analysis test</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{compilation_provider}}/services/resources/automationPlans/0\" />\n\t\n\t<oslc_auto:inputParameter>\n        <oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>sourceBase64</oslc:name>\n\t\t\t<rdf:value>TestEchoProgram.cpp\nI2luY2x1ZGUgPHN0ZGlvLmg+CgppbnQgbWFpbihpbnQgYXJnYywgY2hhcioqIGFyZ3YpCnsKCXByaW50ZigiJXNcbiIsIGFyZ3ZbMV0pOwoJcmV0dXJuIDA7Cn0K</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>buildCommand</oslc:name>\n\t\t\t<rdf:value>gcc -g TestEchoProgram.cpp -o my_echo</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>launchCommand</oslc:name>\n\t\t\t<rdf:value>./my_echo</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>"
												},
												"url": {
													"raw": "{{compilation_provider}}/services/resources/createAutomationRequest",
													"host": [
														"{{compilation_provider}}"
													],
													"path": [
														"services",
														"resources",
														"createAutomationRequest"
													]
												}
											},
											"response": []
										},
										{
											"name": "wait for #complete (analysis/special feature/outputFilters/builtin filters/AddStdoutAndStderrValues/create sut)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var timeoutSeconds = pm.collectionVariables.get('automation_wait_time');",
															"",
															"var waitCounter = pm.globals.get(\"waitCounter\");",
															"if(!waitCounter) {",
															"    waitCounter = 0;",
															"}",
															"",
															"if (pm.response.code != 200) { // wait for the resource to be created",
															"    if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
															"        setTimeout(function(){}, [1000]); // 1 second",
															"        waitCounter++;",
															"        postman.setNextRequest(pm.info.requestName);",
															"    } else { // timeout, reset counter",
															"        waitCounter = 0;",
															"    }",
															"} else { // wait for the automation to complete",
															"    const response = xml2Json(pm.response.text());",
															"    var state = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"][\"oslc_auto:state\"].$[\"rdf:resource\"];",
															"    if (state == \"http://open-services.net/ns/auto#inProgress\") {",
															"        if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
															"            setTimeout(function(){}, [1000]); // 1 second",
															"            waitCounter++;",
															"            postman.setNextRequest(pm.info.requestName);",
															"        } else { // timeout, reset counter",
															"            waitCounter = 0;",
															"        }",
															"    } else { // wait doen, reset counter",
															"            waitCounter = 0;",
															"    }",
															"}",
															"",
															"pm.globals.set(\"waitCounter\", waitCounter);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"type": "text",
														"value": "application/rdf+xml"
													}
												],
												"url": {
													"raw": "{{compilation_provider}}/services/resources/automationRequests/{{requestId}}",
													"host": [
														"{{compilation_provider}}"
													],
													"path": [
														"services",
														"resources",
														"automationRequests",
														"{{requestId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "create request",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response code should be 201 (created)\", function () {",
															"    pm.response.to.have.status(201);",
															"});",
															"",
															"",
															"// save the request ID as a global variable for later tests to use",
															"const response = xml2Json(pm.response.text());",
															"var resrouceAbout = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"].$[\"rdf:about\"];",
															"var resourceAboutSplit = resrouceAbout.split(\"/\");",
															"var requestId = resourceAboutSplit[resourceAboutSplit.length-1];",
															"pm.globals.set('requestId', requestId);",
															"",
															"",
															"pm.test(\"AutomationResult should contain outputFilter input parameter\", function () {",
															"    pm.expect(pm.response.text()).to.include(\"<oslc:name>outputFilter</oslc:name>\");",
															"});",
															"pm.test(\"OutputFilter value should be \\\"default\\\"\", function () {",
															"    pm.expect(pm.response.text()).to.include(\"<rdf:value>addStdoutAndStderrValues</rdf:value>\");",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/xml"
													},
													{
														"key": "Accept",
														"type": "text",
														"value": "application/rdf+xml"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>test</dcterms:title>\n\t<dcterms:description>test</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{server_address}}/{{server_context}}/services/resources/automationPlans/dummy\" />\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>arguments</oslc:name>\n\t\t\t<rdf:value>\"Hello World!\"</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>outputFilter</oslc:name>\n\t\t\t<rdf:value>addStdoutAndStderrValues</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n    \n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>outputFileRegex</oslc:name>\n\t\t\t<rdf:value>.*</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n    \n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>SUT</oslc:name>\n\t\t\t<rdf:value>{{SUT}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>"
												},
												"url": {
													"raw": "{{server_address}}/{{server_context}}/services/resources/createAutomationRequest",
													"host": [
														"{{server_address}}"
													],
													"path": [
														"{{server_context}}",
														"services",
														"resources",
														"createAutomationRequest"
													]
												}
											},
											"response": []
										},
										{
											"name": "wait for #complete (analysis/special feature/builtint filters/AddStdoutAndStderrValues/result)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var timeoutSeconds = pm.collectionVariables.get('automation_wait_time');",
															"",
															"var waitCounter = pm.globals.get(\"waitCounter\");",
															"if(!waitCounter) {",
															"    waitCounter = 0;",
															"}",
															"",
															"if (pm.response.code != 200) { // wait for the resource to be created",
															"    if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
															"        setTimeout(function(){}, [1000]); // 1 second",
															"        waitCounter++;",
															"        postman.setNextRequest(pm.info.requestName);",
															"    } else { // timeout, reset counter",
															"        waitCounter = 0;",
															"    }",
															"} else { // wait for the automation to complete",
															"    const response = xml2Json(pm.response.text());",
															"    var state = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"][\"oslc_auto:state\"].$[\"rdf:resource\"];",
															"    if (state == \"http://open-services.net/ns/auto#inProgress\") {",
															"        if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
															"            setTimeout(function(){}, [1000]); // 1 second",
															"            waitCounter++;",
															"            postman.setNextRequest(pm.info.requestName);",
															"        } else { // timeout, reset counter",
															"            waitCounter = 0;",
															"        }",
															"    } else { // wait doen, reset counter",
															"            waitCounter = 0;",
															"    }",
															"}",
															"",
															"pm.globals.set(\"waitCounter\", waitCounter);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"type": "text",
														"value": "application/rdf+xml"
													}
												],
												"url": {
													"raw": "{{server_address}}/{{server_context}}/services/resources/automationRequests/{{requestId}}",
													"host": [
														"{{server_address}}"
													],
													"path": [
														"{{server_context}}",
														"services",
														"resources",
														"automationRequests",
														"{{requestId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "check result",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Response code should be 200 (OK)\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"pm.test(\"AutomationResult state should be #complete\", function () {",
															"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#new\\\"/>\");",
															"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#inProgress\\\"/>\");",
															"    pm.expect(pm.response.text()).to.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#complete\\\"/>\");",
															"});",
															"pm.test(\"AutomationResult verdict should be #passed\", function () {",
															"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:verdict rdf:resource=\\\"http://open-services.net/ns/auto#unavailable\\\"/>\");",
															"    pm.expect(pm.response.text()).to.include(\"oslc_auto:verdict rdf:resource=\\\"http://open-services.net/ns/auto#passed\\\"/>\");",
															"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#error\\\"/>\");",
															"});",
															"",
															"pm.test(\"AutomationResult statusMessage have the expected value\", function () {",
															"    pm.expect(pm.response.text()).to.include(\"Executing analysis:\");",
															"    pm.expect(pm.response.text()).to.include(\"Analysis completed successfully\");",
															"});",
															"pm.test(\"returnCode should be 0\", function () {",
															"    pm.expect(pm.response.text()).to.include(\"<rdf:value>0</rdf:value>\");",
															"});",
															"pm.test(\"stdout should not be empty\", function () {",
															"    pm.expect(pm.response.text()).to.include(\"Your argument:\");",
															"    pm.expect(pm.response.text()).to.include(\"Dummy tool!\");",
															"});",
															"pm.test(\"file contributions should not have their values\", function () {",
															"    pm.expect(pm.response.text()).to.not.include(\"<rdf:value>test file \");",
															"});",
															"pm.test(\"contributions like execution time or return code should have their value\", function () {",
															"    pm.expect(pm.response.text()).to.include(\"<rdf:value>0</rdf:value>\");",
															"});",
															"",
															"",
															"",
															"pm.test(\"AutomationResult should contain outputFilter input parameter\", function () {",
															"    pm.expect(pm.response.text()).to.include(\"<oslc:name>outputFilter</oslc:name>\");",
															"});",
															"pm.test(\"OutputFilter value should be \\\"default\\\"\", function () {",
															"    pm.expect(pm.response.text()).to.include(\"<rdf:value>addStdoutAndStderrValues</rdf:value>\");",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"type": "text",
														"value": "application/rdf+xml"
													}
												],
												"url": {
													"raw": "{{server_address}}/{{server_context}}/services/resources/automationResults/{{requestId}}",
													"host": [
														"{{server_address}}"
													],
													"path": [
														"{{server_context}}",
														"services",
														"resources",
														"automationResults",
														"{{requestId}}"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "plugin filter",
							"item": [
								{
									"name": "create SUT using the compilation provider",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// save the request ID as a global variable for later tests to use -- used as SUT ID",
													"const response = xml2Json(pm.response.text());",
													"var resrouceAbout = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"].$[\"rdf:about\"];",
													"var resourceAboutSplit = resrouceAbout.split(\"/\");",
													"var requestId = resourceAboutSplit[resourceAboutSplit.length-1];",
													"pm.globals.set('requestId', requestId);",
													"",
													"",
													"pm.test(\"Response code should be 201 (created)\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"var compilation_provider = pm.variables.get(\"compilation_provider\");",
													"var sutId = requestId;",
													"pm.globals.set(\"SUT\", compilation_provider + \"/services/resources/sUTs/\" + sutId);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/xml"
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>analysis test</dcterms:title>\n\t<dcterms:description>analysis test</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{compilation_provider}}/services/resources/automationPlans/0\" />\n\t\n\t<oslc_auto:inputParameter>\n        <oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>sourceBase64</oslc:name>\n\t\t\t<rdf:value>TestEchoProgram.cpp\nI2luY2x1ZGUgPHN0ZGlvLmg+CgppbnQgbWFpbihpbnQgYXJnYywgY2hhcioqIGFyZ3YpCnsKCXByaW50ZigiJXNcbiIsIGFyZ3ZbMV0pOwoJcmV0dXJuIDA7Cn0K</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>buildCommand</oslc:name>\n\t\t\t<rdf:value>gcc -g TestEchoProgram.cpp -o my_echo</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>launchCommand</oslc:name>\n\t\t\t<rdf:value>./my_echo</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>"
										},
										"url": {
											"raw": "{{compilation_provider}}/services/resources/createAutomationRequest",
											"host": [
												"{{compilation_provider}}"
											],
											"path": [
												"services",
												"resources",
												"createAutomationRequest"
											]
										}
									},
									"response": []
								},
								{
									"name": "wait for #complete (analysis/special feature/outputFilters/plugin filter/create sut)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var timeoutSeconds = pm.collectionVariables.get('automation_wait_time');",
													"",
													"var waitCounter = pm.globals.get(\"waitCounter\");",
													"if(!waitCounter) {",
													"    waitCounter = 0;",
													"}",
													"",
													"if (pm.response.code != 200) { // wait for the resource to be created",
													"    if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
													"        setTimeout(function(){}, [1000]); // 1 second",
													"        waitCounter++;",
													"        postman.setNextRequest(pm.info.requestName);",
													"    } else { // timeout, reset counter",
													"        waitCounter = 0;",
													"    }",
													"} else { // wait for the automation to complete",
													"    const response = xml2Json(pm.response.text());",
													"    var state = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"][\"oslc_auto:state\"].$[\"rdf:resource\"];",
													"    if (state == \"http://open-services.net/ns/auto#inProgress\") {",
													"        if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
													"            setTimeout(function(){}, [1000]); // 1 second",
													"            waitCounter++;",
													"            postman.setNextRequest(pm.info.requestName);",
													"        } else { // timeout, reset counter",
													"            waitCounter = 0;",
													"        }",
													"    } else { // wait doen, reset counter",
													"            waitCounter = 0;",
													"    }",
													"}",
													"",
													"pm.globals.set(\"waitCounter\", waitCounter);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"url": {
											"raw": "{{compilation_provider}}/services/resources/automationRequests/{{requestId}}",
											"host": [
												"{{compilation_provider}}"
											],
											"path": [
												"services",
												"resources",
												"automationRequests",
												"{{requestId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "create request",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response code should be 201 (created)\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"",
													"// save the request ID as a global variable for later tests to use",
													"const response = xml2Json(pm.response.text());",
													"var resrouceAbout = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"].$[\"rdf:about\"];",
													"var resourceAboutSplit = resrouceAbout.split(\"/\");",
													"var requestId = resourceAboutSplit[resourceAboutSplit.length-1];",
													"pm.globals.set('requestId', requestId);",
													"",
													"",
													"pm.test(\"AutomationResult should contain outputFilter input parameter\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"<oslc:name>outputFilter</oslc:name>\");",
													"});",
													"pm.test(\"OutputFilter value should be \\\"default\\\"\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"<rdf:value>dummy</rdf:value>\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/xml"
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>test</dcterms:title>\n\t<dcterms:description>test</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{server_address}}/{{server_context}}/services/resources/automationPlans/dummy\" />\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>arguments</oslc:name>\n\t\t\t<rdf:value>\"Hello World!\"</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>outputFilter</oslc:name>\n\t\t\t<rdf:value>dummy</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n    \n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>SUT</oslc:name>\n\t\t\t<rdf:value>{{SUT}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>"
										},
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/resources/createAutomationRequest",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"resources",
												"createAutomationRequest"
											]
										}
									},
									"response": []
								},
								{
									"name": "wait for #complete (analysis/special feature/plugin filter/outputFilters)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var timeoutSeconds = pm.collectionVariables.get('automation_wait_time');",
													"",
													"var waitCounter = pm.globals.get(\"waitCounter\");",
													"if(!waitCounter) {",
													"    waitCounter = 0;",
													"}",
													"",
													"if (pm.response.code != 200) { // wait for the resource to be created",
													"    if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
													"        setTimeout(function(){}, [1000]); // 1 second",
													"        waitCounter++;",
													"        postman.setNextRequest(pm.info.requestName);",
													"    } else { // timeout, reset counter",
													"        waitCounter = 0;",
													"    }",
													"} else { // wait for the automation to complete",
													"    const response = xml2Json(pm.response.text());",
													"    var state = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"][\"oslc_auto:state\"].$[\"rdf:resource\"];",
													"    if (state == \"http://open-services.net/ns/auto#inProgress\") {",
													"        if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
													"            setTimeout(function(){}, [1000]); // 1 second",
													"            waitCounter++;",
													"            postman.setNextRequest(pm.info.requestName);",
													"        } else { // timeout, reset counter",
													"            waitCounter = 0;",
													"        }",
													"    } else { // wait doen, reset counter",
													"            waitCounter = 0;",
													"    }",
													"}",
													"",
													"pm.globals.set(\"waitCounter\", waitCounter);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/resources/automationRequests/{{requestId}}",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"resources",
												"automationRequests",
												"{{requestId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "check result",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response code should be 200 (OK)\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"AutomationResult state should be #complete\", function () {",
													"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#new\\\"/>\");",
													"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#inProgress\\\"/>\");",
													"    pm.expect(pm.response.text()).to.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#complete\\\"/>\");",
													"});",
													"pm.test(\"AutomationResult verdict should be #passed\", function () {",
													"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:verdict rdf:resource=\\\"http://open-services.net/ns/auto#unavailable\\\"/>\");",
													"    pm.expect(pm.response.text()).to.include(\"oslc_auto:verdict rdf:resource=\\\"http://open-services.net/ns/auto#passed\\\"/>\");",
													"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#error\\\"/>\");",
													"});",
													"",
													"pm.test(\"returnCode should be 0\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"<rdf:value>0</rdf:value>\");",
													"});",
													"pm.test(\"AutomationResult should contain a \\\"test name\\\" Contribution\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"<dcterms:title rdf:parseType=\\\"Literal\\\">test name</dcterms:title>\");",
													"});",
													"pm.test(\"AutomationResult should not contain stdout, stderr, statusMessage, executionTime, returnCode, ...\", function () {",
													"    pm.expect(pm.response.text()).to.not.include(\"<dcterms:title rdf:parseType=\\\"Literal\\\">stdout</dcterms:title>\");",
													"    pm.expect(pm.response.text()).to.not.include(\"<dcterms:title rdf:parseType=\\\"Literal\\\">stderr</dcterms:title>\");",
													"    pm.expect(pm.response.text()).to.not.include(\"<dcterms:title rdf:parseType=\\\"Literal\\\">statusMessage</dcterms:title>\");",
													"    pm.expect(pm.response.text()).to.not.include(\"<dcterms:title rdf:parseType=\\\"Literal\\\">executionTime</dcterms:title>\");",
													"    pm.expect(pm.response.text()).to.not.include(\"<dcterms:title rdf:parseType=\\\"Literal\\\">returnCode</dcterms:title>\");",
													"});",
													"",
													"pm.test(\"AutomationResult should contain outputFilter input parameter\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"<oslc:name>outputFilter</oslc:name>\");",
													"});",
													"pm.test(\"OutputFilter value should be \\\"default\\\"\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"<rdf:value>dummy</rdf:value>\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/resources/automationResults/{{requestId}}",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"resources",
												"automationResults",
												"{{requestId}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "inProgress stdout and stderr",
					"item": [
						{
							"name": "create SUT using the compilation provider",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// save the request ID as a global variable for later tests to use -- used as SUT ID",
											"const response = xml2Json(pm.response.text());",
											"var resrouceAbout = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"].$[\"rdf:about\"];",
											"var resourceAboutSplit = resrouceAbout.split(\"/\");",
											"var requestId = resourceAboutSplit[resourceAboutSplit.length-1];",
											"pm.globals.set('requestId', requestId);",
											"",
											"",
											"pm.test(\"Response code should be 201 (created)\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"var compilation_provider = pm.variables.get(\"compilation_provider\");",
											"var sutId = requestId;",
											"pm.globals.set(\"SUT\", compilation_provider + \"/services/resources/sUTs/\" + sutId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/xml"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>analysis test</dcterms:title>\n\t<dcterms:description>analysis test</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{compilation_provider}}/services/resources/automationPlans/0\" />\n\t\n\t<oslc_auto:inputParameter>\n        <oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>sourceBase64</oslc:name>\n\t\t\t<rdf:value>TestEchoProgram.cpp\nI2luY2x1ZGUgPHN0ZGlvLmg+CgppbnQgbWFpbihpbnQgYXJnYywgY2hhcioqIGFyZ3YpCnsKCXByaW50ZigiJXNcbiIsIGFyZ3ZbMV0pOwoJcmV0dXJuIDA7Cn0K</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>buildCommand</oslc:name>\n\t\t\t<rdf:value>gcc -g TestEchoProgram.cpp -o my_echo</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>launchCommand</oslc:name>\n\t\t\t<rdf:value>./my_echo</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>"
								},
								"url": {
									"raw": "{{compilation_provider}}/services/resources/createAutomationRequest",
									"host": [
										"{{compilation_provider}}"
									],
									"path": [
										"services",
										"resources",
										"createAutomationRequest"
									]
								}
							},
							"response": []
						},
						{
							"name": "wait for #complete (analysis/special feature/inProgress stdout and stderr/create sut)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var timeoutSeconds = pm.collectionVariables.get('automation_wait_time');",
											"",
											"var waitCounter = pm.globals.get(\"waitCounter\");",
											"if(!waitCounter) {",
											"    waitCounter = 0;",
											"}",
											"",
											"if (pm.response.code != 200) { // wait for the resource to be created",
											"    if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
											"        setTimeout(function(){}, [1000]); // 1 second",
											"        waitCounter++;",
											"        postman.setNextRequest(pm.info.requestName);",
											"    } else { // timeout, reset counter",
											"        waitCounter = 0;",
											"    }",
											"} else { // wait for the automation to complete",
											"    const response = xml2Json(pm.response.text());",
											"    var state = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"][\"oslc_auto:state\"].$[\"rdf:resource\"];",
											"    if (state == \"http://open-services.net/ns/auto#inProgress\") {",
											"        if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
											"            setTimeout(function(){}, [1000]); // 1 second",
											"            waitCounter++;",
											"            postman.setNextRequest(pm.info.requestName);",
											"        } else { // timeout, reset counter",
											"            waitCounter = 0;",
											"        }",
											"    } else { // wait doen, reset counter",
											"            waitCounter = 0;",
											"    }",
											"}",
											"",
											"pm.globals.set(\"waitCounter\", waitCounter);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"url": {
									"raw": "{{compilation_provider}}/services/resources/automationRequests/{{requestId}}",
									"host": [
										"{{compilation_provider}}"
									],
									"path": [
										"services",
										"resources",
										"automationRequests",
										"{{requestId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "create request",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response code should be 201 (created)\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"",
											"// save the request ID as a global variable for later tests to use",
											"const response = xml2Json(pm.response.text());",
											"var resrouceAbout = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"].$[\"rdf:about\"];",
											"var resourceAboutSplit = resrouceAbout.split(\"/\");",
											"var requestId = resourceAboutSplit[resourceAboutSplit.length-1];",
											"pm.globals.set('requestId', requestId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/xml"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>test</dcterms:title>\n\t<dcterms:description>test</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{server_address}}/{{server_context}}/services/resources/automationPlans/dummy\" />\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>arguments</oslc:name>\n\t\t\t<rdf:value>\"Hello World!\"</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n    \n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>sleepDuration</oslc:name>\n\t\t\t<rdf:value>5</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n    \n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>SUT</oslc:name>\n\t\t\t<rdf:value>{{SUT}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>"
								},
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/resources/createAutomationRequest",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"resources",
										"createAutomationRequest"
									]
								}
							},
							"response": []
						},
						{
							"name": "check result inProgress",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response code should be 200 (OK)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"AutomationResult state should be #inProgress\", function () {",
											"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#new\\\"/>\");",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#inProgress\\\"/>\");",
											"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#complete\\\"/>\");",
											"});",
											"pm.test(\"AutomationResult verdict should be #unavailable\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:verdict rdf:resource=\\\"http://open-services.net/ns/auto#unavailable\\\"/>\");",
											"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:verdict rdf:resource=\\\"http://open-services.net/ns/auto#passed\\\"/>\");",
											"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#error\\\"/>\");",
											"});",
											"/*",
											"pm.test(\"AutomationResult statusMessage have the expected value\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Executing analysis:\");",
											"    pm.expect(pm.response.text()).to.include(\"Analysis completed successfully\");",
											"});",
											"*/",
											"pm.test(\"returnCode should be 0\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<rdf:value>0</rdf:value>\");",
											"});",
											"pm.test(\"stdout should contain some outputs\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Dummy tool!\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// wait a bit for some outputs to get to stdout\r",
											"// the execution should take over 5 seconds\r",
											"setTimeout(function(){}, [2000]); // 2 second\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/resources/automationResults/{{requestId}}",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"resources",
										"automationResults",
										"{{requestId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "wait for #complete (analysis/special feature/inProgress stdout and stderr)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var timeoutSeconds = pm.collectionVariables.get('automation_wait_time');",
											"",
											"var waitCounter = pm.globals.get(\"waitCounter\");",
											"if(!waitCounter) {",
											"    waitCounter = 0;",
											"}",
											"",
											"if (pm.response.code != 200) { // wait for the resource to be created",
											"    if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
											"        setTimeout(function(){}, [1000]); // 1 second",
											"        waitCounter++;",
											"        postman.setNextRequest(pm.info.requestName);",
											"    } else { // timeout, reset counter",
											"        waitCounter = 0;",
											"    }",
											"} else { // wait for the automation to complete",
											"    const response = xml2Json(pm.response.text());",
											"    var state = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"][\"oslc_auto:state\"].$[\"rdf:resource\"];",
											"    if (state == \"http://open-services.net/ns/auto#inProgress\") {",
											"        if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
											"            setTimeout(function(){}, [1000]); // 1 second",
											"            waitCounter++;",
											"            postman.setNextRequest(pm.info.requestName);",
											"        } else { // timeout, reset counter",
											"            waitCounter = 0;",
											"        }",
											"    } else { // wait doen, reset counter",
											"            waitCounter = 0;",
											"    }",
											"}",
											"",
											"pm.globals.set(\"waitCounter\", waitCounter);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/resources/automationRequests/{{requestId}}",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"resources",
										"automationRequests",
										"{{requestId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "check result finished",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response code should be 200 (OK)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"AutomationResult state should be #complete\", function () {",
											"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#new\\\"/>\");",
											"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#inProgress\\\"/>\");",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#complete\\\"/>\");",
											"});",
											"pm.test(\"AutomationResult verdict should be #passed\", function () {",
											"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:verdict rdf:resource=\\\"http://open-services.net/ns/auto#unavailable\\\"/>\");",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:verdict rdf:resource=\\\"http://open-services.net/ns/auto#passed\\\"/>\");",
											"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#error\\\"/>\");",
											"});",
											"",
											"pm.test(\"AutomationResult statusMessage have the expected value\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Executing analysis:\");",
											"    pm.expect(pm.response.text()).to.include(\"Analysis completed successfully\");",
											"});",
											"pm.test(\"returnCode should be 0\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<rdf:value>0</rdf:value>\");",
											"});",
											"pm.test(\"stdout should contain all outputs\", function () {",
											"    ",
											"    pm.expect(pm.response.text()).to.include(\"Dummy tool!\");",
											"    var os = pm.globals.get(\"currentOS\");",
											"    if (os == \"windows_bat\"){",
											"        pm.expect(pm.response.text()).to.include(\"Your argument: --args\");",
											"    } else {",
											"        pm.expect(pm.response.text()).to.include(\"Your argument: --args=Hello World!\");",
											"    }",
											"    pm.expect(pm.response.text()).to.include(\"SUT: \");",
											"    pm.expect(pm.response.text()).to.include(\"EnvVar1: \");",
											"    pm.expect(pm.response.text()).to.include(\"EnvVar2: \");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/resources/automationResults/{{requestId}}",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"resources",
										"automationResults",
										"{{requestId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "disable inProgress stdout and stderr",
					"item": [
						{
							"name": "create SUT using the compilation provider",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// save the request ID as a global variable for later tests to use -- used as SUT ID",
											"const response = xml2Json(pm.response.text());",
											"var resrouceAbout = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"].$[\"rdf:about\"];",
											"var resourceAboutSplit = resrouceAbout.split(\"/\");",
											"var requestId = resourceAboutSplit[resourceAboutSplit.length-1];",
											"pm.globals.set('requestId', requestId);",
											"",
											"",
											"pm.test(\"Response code should be 201 (created)\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"var compilation_provider = pm.variables.get(\"compilation_provider\");",
											"var sutId = requestId;",
											"pm.globals.set(\"SUT\", compilation_provider + \"/services/resources/sUTs/\" + sutId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/xml"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>analysis test</dcterms:title>\n\t<dcterms:description>analysis test</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{compilation_provider}}/services/resources/automationPlans/0\" />\n\t\n\t<oslc_auto:inputParameter>\n        <oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>sourceBase64</oslc:name>\n\t\t\t<rdf:value>TestEchoProgram.cpp\nI2luY2x1ZGUgPHN0ZGlvLmg+CgppbnQgbWFpbihpbnQgYXJnYywgY2hhcioqIGFyZ3YpCnsKCXByaW50ZigiJXNcbiIsIGFyZ3ZbMV0pOwoJcmV0dXJuIDA7Cn0K</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>buildCommand</oslc:name>\n\t\t\t<rdf:value>gcc -g TestEchoProgram.cpp -o my_echo</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>launchCommand</oslc:name>\n\t\t\t<rdf:value>./my_echo</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>"
								},
								"url": {
									"raw": "{{compilation_provider}}/services/resources/createAutomationRequest",
									"host": [
										"{{compilation_provider}}"
									],
									"path": [
										"services",
										"resources",
										"createAutomationRequest"
									]
								}
							},
							"response": []
						},
						{
							"name": "wait for #complete (analysis/special feature/disable inProgress stdout and stderr/create sut)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var timeoutSeconds = pm.collectionVariables.get('automation_wait_time');",
											"",
											"var waitCounter = pm.globals.get(\"waitCounter\");",
											"if(!waitCounter) {",
											"    waitCounter = 0;",
											"}",
											"",
											"if (pm.response.code != 200) { // wait for the resource to be created",
											"    if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
											"        setTimeout(function(){}, [1000]); // 1 second",
											"        waitCounter++;",
											"        postman.setNextRequest(pm.info.requestName);",
											"    } else { // timeout, reset counter",
											"        waitCounter = 0;",
											"    }",
											"} else { // wait for the automation to complete",
											"    const response = xml2Json(pm.response.text());",
											"    var state = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"][\"oslc_auto:state\"].$[\"rdf:resource\"];",
											"    if (state == \"http://open-services.net/ns/auto#inProgress\") {",
											"        if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
											"            setTimeout(function(){}, [1000]); // 1 second",
											"            waitCounter++;",
											"            postman.setNextRequest(pm.info.requestName);",
											"        } else { // timeout, reset counter",
											"            waitCounter = 0;",
											"        }",
											"    } else { // wait doen, reset counter",
											"            waitCounter = 0;",
											"    }",
											"}",
											"",
											"pm.globals.set(\"waitCounter\", waitCounter);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"url": {
									"raw": "{{compilation_provider}}/services/resources/automationRequests/{{requestId}}",
									"host": [
										"{{compilation_provider}}"
									],
									"path": [
										"services",
										"resources",
										"automationRequests",
										"{{requestId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "create request",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response code should be 201 (created)\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"",
											"// save the request ID as a global variable for later tests to use",
											"const response = xml2Json(pm.response.text());",
											"var resrouceAbout = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"].$[\"rdf:about\"];",
											"var resourceAboutSplit = resrouceAbout.split(\"/\");",
											"var requestId = resourceAboutSplit[resourceAboutSplit.length-1];",
											"pm.globals.set('requestId', requestId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/xml"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>test</dcterms:title>\n\t<dcterms:description>test</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{server_address}}/{{server_context}}/services/resources/automationPlans/dummy\" />\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>arguments</oslc:name>\n\t\t\t<rdf:value>\"Hello World!\"</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n    \n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>sleepDuration</oslc:name>\n\t\t\t<rdf:value>5</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n    \n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>SUT</oslc:name>\n\t\t\t<rdf:value>{{SUT}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>"
								},
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/resources/createAutomationRequest?enableInProgressOutputs=false",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"resources",
										"createAutomationRequest"
									],
									"query": [
										{
											"key": "enableInProgressOutputs",
											"value": "false"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "check result inProgress",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response code should be 200 (OK)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"AutomationResult state should be #inProgress\", function () {",
											"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#new\\\"/>\");",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#inProgress\\\"/>\");",
											"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#complete\\\"/>\");",
											"});",
											"pm.test(\"AutomationResult verdict should be #unavailable\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:verdict rdf:resource=\\\"http://open-services.net/ns/auto#unavailable\\\"/>\");",
											"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:verdict rdf:resource=\\\"http://open-services.net/ns/auto#passed\\\"/>\");",
											"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#error\\\"/>\");",
											"});",
											"/*",
											"pm.test(\"AutomationResult statusMessage have the expected value\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Executing analysis:\");",
											"    pm.expect(pm.response.text()).to.include(\"Analysis completed successfully\");",
											"});",
											"*/",
											"pm.test(\"returnCode should be 0\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<rdf:value>0</rdf:value>\");",
											"});",
											"pm.test(\"stdout should not contain any outputs\", function () {",
											"    pm.expect(pm.response.text()).to.not.include(\"Dummy tool!\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// wait a bit for some outputs to get to stdout\r",
											"// the execution should take over 5 seconds\r",
											"setTimeout(function(){}, [2000]); // 2 second\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/resources/automationResults/{{requestId}}?enableInProgressOutputs=false",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"resources",
										"automationResults",
										"{{requestId}}"
									],
									"query": [
										{
											"key": "enableInProgressOutputs",
											"value": "false"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "wait for #complete (analysis/special feature/disable inProgress stdout and stderr)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var timeoutSeconds = pm.collectionVariables.get('automation_wait_time');",
											"",
											"var waitCounter = pm.globals.get(\"waitCounter\");",
											"if(!waitCounter) {",
											"    waitCounter = 0;",
											"}",
											"",
											"if (pm.response.code != 200) { // wait for the resource to be created",
											"    if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
											"        setTimeout(function(){}, [1000]); // 1 second",
											"        waitCounter++;",
											"        postman.setNextRequest(pm.info.requestName);",
											"    } else { // timeout, reset counter",
											"        waitCounter = 0;",
											"    }",
											"} else { // wait for the automation to complete",
											"    const response = xml2Json(pm.response.text());",
											"    var state = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"][\"oslc_auto:state\"].$[\"rdf:resource\"];",
											"    if (state == \"http://open-services.net/ns/auto#inProgress\") {",
											"        if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
											"            setTimeout(function(){}, [1000]); // 1 second",
											"            waitCounter++;",
											"            postman.setNextRequest(pm.info.requestName);",
											"        } else { // timeout, reset counter",
											"            waitCounter = 0;",
											"        }",
											"    } else { // wait doen, reset counter",
											"            waitCounter = 0;",
											"    }",
											"}",
											"",
											"pm.globals.set(\"waitCounter\", waitCounter);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/resources/automationRequests/{{requestId}}",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"resources",
										"automationRequests",
										"{{requestId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "check result finished",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response code should be 200 (OK)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"AutomationResult state should be #complete\", function () {",
											"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#new\\\"/>\");",
											"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#inProgress\\\"/>\");",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#complete\\\"/>\");",
											"});",
											"pm.test(\"AutomationResult verdict should be #passed\", function () {",
											"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:verdict rdf:resource=\\\"http://open-services.net/ns/auto#unavailable\\\"/>\");",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:verdict rdf:resource=\\\"http://open-services.net/ns/auto#passed\\\"/>\");",
											"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#error\\\"/>\");",
											"});",
											"",
											"pm.test(\"AutomationResult statusMessage have the expected value\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Executing analysis:\");",
											"    pm.expect(pm.response.text()).to.include(\"Analysis completed successfully\");",
											"});",
											"pm.test(\"returnCode should be 0\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<rdf:value>0</rdf:value>\");",
											"});",
											"pm.test(\"stdout should contain all outputs\", function () {",
											"    ",
											"    pm.expect(pm.response.text()).to.include(\"Dummy tool!\");",
											"    var os = pm.globals.get(\"currentOS\");",
											"    if (os == \"windows_bat\"){",
											"        pm.expect(pm.response.text()).to.include(\"Your argument: --args\");",
											"    } else {",
											"        pm.expect(pm.response.text()).to.include(\"Your argument: --args=Hello World!\");",
											"    }",
											"    pm.expect(pm.response.text()).to.include(\"SUT: \");",
											"    pm.expect(pm.response.text()).to.include(\"EnvVar1: \");",
											"    pm.expect(pm.response.text()).to.include(\"EnvVar2: \");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/resources/automationResults/{{requestId}}",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"resources",
										"automationResults",
										"{{requestId}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Resource delete",
			"item": [
				{
					"name": "pre init",
					"item": [
						{
							"name": "create SUT using the compilation provider",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// save the request ID as a global variable for later tests to use -- used as SUT ID",
											"const response = xml2Json(pm.response.text());",
											"var resrouceAbout = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"].$[\"rdf:about\"];",
											"var resourceAboutSplit = resrouceAbout.split(\"/\");",
											"var requestId = resourceAboutSplit[resourceAboutSplit.length-1];",
											"pm.globals.set('requestId', requestId);",
											"",
											"",
											"pm.test(\"Response code should be 201 (created)\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"var compilation_provider = pm.variables.get(\"compilation_provider\");",
											"var sutId = requestId;",
											"pm.globals.set(\"SUT\", compilation_provider + \"/services/resources/sUTs/\" + sutId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/xml"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>analysis test</dcterms:title>\n\t<dcterms:description>analysis test</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{compilation_provider}}/services/resources/automationPlans/0\" />\n\t\n\t<oslc_auto:inputParameter>\n        <oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>sourceBase64</oslc:name>\n\t\t\t<rdf:value>TestEchoProgram.cpp\nI2luY2x1ZGUgPHN0ZGlvLmg+CgppbnQgbWFpbihpbnQgYXJnYywgY2hhcioqIGFyZ3YpCnsKCXByaW50ZigiJXNcbiIsIGFyZ3ZbMV0pOwoJcmV0dXJuIDA7Cn0K</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>buildCommand</oslc:name>\n\t\t\t<rdf:value>gcc -g TestEchoProgram.cpp -o my_echo</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>launchCommand</oslc:name>\n\t\t\t<rdf:value>./my_echo</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>"
								},
								"url": {
									"raw": "{{compilation_provider}}/services/resources/createAutomationRequest",
									"host": [
										"{{compilation_provider}}"
									],
									"path": [
										"services",
										"resources",
										"createAutomationRequest"
									]
								}
							},
							"response": []
						},
						{
							"name": "wait for #complete (analysis/resource delete/pre init)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var timeoutSeconds = pm.collectionVariables.get('automation_wait_time');",
											"",
											"var waitCounter = pm.globals.get(\"waitCounter\");",
											"if(!waitCounter) {",
											"    waitCounter = 0;",
											"}",
											"",
											"if (pm.response.code != 200) { // wait for the resource to be created",
											"    if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
											"        setTimeout(function(){}, [1000]); // 1 second",
											"        waitCounter++;",
											"        postman.setNextRequest(pm.info.requestName);",
											"    } else { // timeout, reset counter",
											"        waitCounter = 0;",
											"    }",
											"} else { // wait for the automation to complete",
											"    const response = xml2Json(pm.response.text());",
											"    var state = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"][\"oslc_auto:state\"].$[\"rdf:resource\"];",
											"    if (state == \"http://open-services.net/ns/auto#inProgress\") {",
											"        if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
											"            setTimeout(function(){}, [1000]); // 1 second",
											"            waitCounter++;",
											"            postman.setNextRequest(pm.info.requestName);",
											"        } else { // timeout, reset counter",
											"            waitCounter = 0;",
											"        }",
											"    } else { // wait doen, reset counter",
											"            waitCounter = 0;",
											"    }",
											"}",
											"",
											"pm.globals.set(\"waitCounter\", waitCounter);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"url": {
									"raw": "{{compilation_provider}}/services/resources/automationRequests/{{requestId}}",
									"host": [
										"{{compilation_provider}}"
									],
									"path": [
										"services",
										"resources",
										"automationRequests",
										"{{requestId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "automation requests",
					"item": [
						{
							"name": "non cascade delete",
							"item": [
								{
									"name": "create a request to delete later",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Response code should be 201 (created)\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"",
													"// save the request ID as a global variable for later tests to use",
													"const response = xml2Json(pm.response.text());",
													"var resrouceAbout = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"].$[\"rdf:about\"];",
													"var resourceAboutSplit = resrouceAbout.split(\"/\");",
													"var requestId = resourceAboutSplit[resourceAboutSplit.length-1];",
													"pm.globals.set('requestId', requestId);",
													"",
													"",
													"pm.globals.set(\"waitCounter\", 0);",
													"pm.test(\"Response code should be 201 (created)\", function () {",
													"    pm.response.to.have.status(201);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{server_address}}/{{server_context}}/services/resources/automationPlans/dummy\" />\n\t<dcterms:title>test</dcterms:title>\n\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>arguments</oslc:name>\n\t\t\t<rdf:value>asdfasdf</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>SUT</oslc:name>\n\t\t\t<rdf:value>{{SUT}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>",
											"options": {
												"raw": {
													"language": "xml"
												}
											}
										},
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/resources/createAutomationRequest",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"resources",
												"createAutomationRequest"
											]
										}
									},
									"response": []
								},
								{
									"name": "wait for #complete (analysis/resource delete/automation requests/non cascade delete)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var timeoutSeconds = pm.collectionVariables.get('automation_wait_time');",
													"",
													"var waitCounter = pm.globals.get(\"waitCounter\");",
													"if(!waitCounter) {",
													"    waitCounter = 0;",
													"}",
													"",
													"if (pm.response.code != 200) { // wait for the resource to be created",
													"    if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
													"        setTimeout(function(){}, [1000]); // 1 second",
													"        waitCounter++;",
													"        postman.setNextRequest(pm.info.requestName);",
													"    } else { // timeout, reset counter",
													"        waitCounter = 0;",
													"    }",
													"} else { // wait for the automation to complete",
													"    const response = xml2Json(pm.response.text());",
													"    var state = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"][\"oslc_auto:state\"].$[\"rdf:resource\"];",
													"    if (state == \"http://open-services.net/ns/auto#inProgress\") {",
													"        if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
													"            setTimeout(function(){}, [1000]); // 1 second",
													"            waitCounter++;",
													"            postman.setNextRequest(pm.info.requestName);",
													"        } else { // timeout, reset counter",
													"            waitCounter = 0;",
													"        }",
													"    } else { // wait doen, reset counter",
													"            waitCounter = 0;",
													"    }",
													"}",
													"",
													"pm.globals.set(\"waitCounter\", waitCounter);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/resources/automationRequests/{{requestId}}",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"resources",
												"automationRequests",
												"{{requestId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "check that request exists",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response code should be 200 (OK)\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/resources/automationRequests/{{requestId}}",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"resources",
												"automationRequests",
												"{{requestId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "check that result exists",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response code should be 200 (OK)\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/resources/automationResults/{{requestId}}",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"resources",
												"automationResults",
												"{{requestId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "delete request",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response code should be 200 (OK)\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/resources/automationRequests/{{requestId}}",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"resources",
												"automationRequests",
												"{{requestId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "check that request does NOT exist",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response code should be 404 (not found)\", function () {",
													"    pm.response.to.have.status(404);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/resources/automationRequests/{{requestId}}",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"resources",
												"automationRequests",
												"{{requestId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "check that result still exists",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response code should be 200 (OK)\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/resources/automationResults/{{requestId}}",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"resources",
												"automationResults",
												"{{requestId}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "cascade delete",
							"item": [
								{
									"name": "create a request to delete later",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Response code should be 201 (created)\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"",
													"// save the request ID as a global variable for later tests to use",
													"const response = xml2Json(pm.response.text());",
													"var resrouceAbout = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"].$[\"rdf:about\"];",
													"var resourceAboutSplit = resrouceAbout.split(\"/\");",
													"var requestId = resourceAboutSplit[resourceAboutSplit.length-1];",
													"pm.globals.set('requestId', requestId);",
													"",
													"",
													"pm.globals.set(\"waitCounter\", 0);",
													"pm.test(\"Response code should be 201 (created)\", function () {",
													"    pm.response.to.have.status(201);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{server_address}}/{{server_context}}/services/resources/automationPlans/dummy\" />\n\t<dcterms:title>test</dcterms:title>\n\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>arguments</oslc:name>\n\t\t\t<rdf:value>asdfasdf</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>SUT</oslc:name>\n\t\t\t<rdf:value>{{SUT}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>",
											"options": {
												"raw": {
													"language": "xml"
												}
											}
										},
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/resources/createAutomationRequest",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"resources",
												"createAutomationRequest"
											]
										}
									},
									"response": []
								},
								{
									"name": "wait for #complete (analysis/resource delete/automation requests/cascade delete)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var timeoutSeconds = pm.collectionVariables.get('automation_wait_time');",
													"",
													"var waitCounter = pm.globals.get(\"waitCounter\");",
													"if(!waitCounter) {",
													"    waitCounter = 0;",
													"}",
													"",
													"if (pm.response.code != 200) { // wait for the resource to be created",
													"    if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
													"        setTimeout(function(){}, [1000]); // 1 second",
													"        waitCounter++;",
													"        postman.setNextRequest(pm.info.requestName);",
													"    } else { // timeout, reset counter",
													"        waitCounter = 0;",
													"    }",
													"} else { // wait for the automation to complete",
													"    const response = xml2Json(pm.response.text());",
													"    var state = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"][\"oslc_auto:state\"].$[\"rdf:resource\"];",
													"    if (state == \"http://open-services.net/ns/auto#inProgress\") {",
													"        if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
													"            setTimeout(function(){}, [1000]); // 1 second",
													"            waitCounter++;",
													"            postman.setNextRequest(pm.info.requestName);",
													"        } else { // timeout, reset counter",
													"            waitCounter = 0;",
													"        }",
													"    } else { // wait doen, reset counter",
													"            waitCounter = 0;",
													"    }",
													"}",
													"",
													"pm.globals.set(\"waitCounter\", waitCounter);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/resources/automationRequests/{{requestId}}",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"resources",
												"automationRequests",
												"{{requestId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "check that request exists",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response code should be 200 (OK)\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/resources/automationRequests/{{requestId}}",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"resources",
												"automationRequests",
												"{{requestId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "check that result exists",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response code should be 200 (OK)\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/resources/automationResults/{{requestId}}",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"resources",
												"automationResults",
												"{{requestId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "delete request",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response code should be 200 (OK)\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/resources/automationRequests/{{requestId}}?cascade=true",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"resources",
												"automationRequests",
												"{{requestId}}"
											],
											"query": [
												{
													"key": "cascade",
													"value": "true"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "check that request does NOT exist",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response code should be 404 (not found)\", function () {",
													"    pm.response.to.have.status(404);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/resources/automationRequests/{{requestId}}",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"resources",
												"automationRequests",
												"{{requestId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "check that result does NOT exist",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response code should be 404 (not found)\", function () {",
													"    pm.response.to.have.status(404);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/resources/automationResults/{{requestId}}",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"resources",
												"automationResults",
												"{{requestId}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "delete before exec finishes (cascade)",
							"item": [
								{
									"name": "create a request to delete later",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Response code should be 201 (created)\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"",
													"// save the request ID as a global variable for later tests to use",
													"const response = xml2Json(pm.response.text());",
													"var resrouceAbout = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"].$[\"rdf:about\"];",
													"var resourceAboutSplit = resrouceAbout.split(\"/\");",
													"var requestId = resourceAboutSplit[resourceAboutSplit.length-1];",
													"pm.globals.set('requestId', requestId);",
													"",
													"",
													"pm.globals.set(\"waitCounter\", 0);",
													"pm.test(\"Response code should be 201 (created)\", function () {",
													"    pm.response.to.have.status(201);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{server_address}}/{{server_context}}/services/resources/automationPlans/dummy\" />\n\t<dcterms:title>test</dcterms:title>\n\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>arguments</oslc:name>\n\t\t\t<rdf:value>asdfasdf</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>SUT</oslc:name>\n\t\t\t<rdf:value>{{SUT}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>",
											"options": {
												"raw": {
													"language": "xml"
												}
											}
										},
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/resources/createAutomationRequest",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"resources",
												"createAutomationRequest"
											]
										}
									},
									"response": []
								},
								{
									"name": "check that request exists",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response code should be 200 (OK)\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/resources/automationRequests/{{requestId}}",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"resources",
												"automationRequests",
												"{{requestId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "check that result exists",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response code should be 200 (OK)\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/resources/automationResults/{{requestId}}",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"resources",
												"automationResults",
												"{{requestId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "delete request",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response code should be 200 (OK)\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/resources/automationRequests/{{requestId}}?cascade=true",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"resources",
												"automationRequests",
												"{{requestId}}"
											],
											"query": [
												{
													"key": "cascade",
													"value": "true"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "check that request does NOT exist",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response code should be 404 (not found)\", function () {",
													"    pm.response.to.have.status(404);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/resources/automationRequests/{{requestId}}",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"resources",
												"automationRequests",
												"{{requestId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "check that result does not exist",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response code should be 404 (not found)\", function () {",
													"    pm.response.to.have.status(404);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/resources/automationResults/{{requestId}}",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"resources",
												"automationResults",
												"{{requestId}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "automation result",
					"item": [
						{
							"name": "non cascade delete",
							"item": [
								{
									"name": "create a request to delete later",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Response code should be 201 (created)\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"",
													"// save the request ID as a global variable for later tests to use",
													"const response = xml2Json(pm.response.text());",
													"var resrouceAbout = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"].$[\"rdf:about\"];",
													"var resourceAboutSplit = resrouceAbout.split(\"/\");",
													"var requestId = resourceAboutSplit[resourceAboutSplit.length-1];",
													"pm.globals.set('requestId', requestId);",
													"",
													"",
													"pm.globals.set(\"waitCounter\", 0);",
													"pm.test(\"Response code should be 201 (created)\", function () {",
													"    pm.response.to.have.status(201);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{server_address}}/{{server_context}}/services/resources/automationPlans/dummy\" />\n\t<dcterms:title>test</dcterms:title>\n\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>arguments</oslc:name>\n\t\t\t<rdf:value>asdfasdf</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>SUT</oslc:name>\n\t\t\t<rdf:value>{{SUT}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>",
											"options": {
												"raw": {
													"language": "xml"
												}
											}
										},
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/resources/createAutomationRequest",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"resources",
												"createAutomationRequest"
											]
										}
									},
									"response": []
								},
								{
									"name": "wait for #complete (analysis/resource delete/automation results/non cascade delete)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var timeoutSeconds = pm.collectionVariables.get('automation_wait_time');",
													"",
													"var waitCounter = pm.globals.get(\"waitCounter\");",
													"if(!waitCounter) {",
													"    waitCounter = 0;",
													"}",
													"",
													"if (pm.response.code != 200) { // wait for the resource to be created",
													"    if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
													"        setTimeout(function(){}, [1000]); // 1 second",
													"        waitCounter++;",
													"        postman.setNextRequest(pm.info.requestName);",
													"    } else { // timeout, reset counter",
													"        waitCounter = 0;",
													"    }",
													"} else { // wait for the automation to complete",
													"    const response = xml2Json(pm.response.text());",
													"    var state = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"][\"oslc_auto:state\"].$[\"rdf:resource\"];",
													"    if (state == \"http://open-services.net/ns/auto#inProgress\") {",
													"        if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
													"            setTimeout(function(){}, [1000]); // 1 second",
													"            waitCounter++;",
													"            postman.setNextRequest(pm.info.requestName);",
													"        } else { // timeout, reset counter",
													"            waitCounter = 0;",
													"        }",
													"    } else { // wait doen, reset counter",
													"            waitCounter = 0;",
													"    }",
													"}",
													"",
													"pm.globals.set(\"waitCounter\", waitCounter);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/resources/automationRequests/{{requestId}}",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"resources",
												"automationRequests",
												"{{requestId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "check that request exists",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response code should be 200 (OK)\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/resources/automationRequests/{{requestId}}",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"resources",
												"automationRequests",
												"{{requestId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "check that result exists",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response code should be 200 (OK)\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/resources/automationResults/{{requestId}}",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"resources",
												"automationResults",
												"{{requestId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "delete result",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response code should be 200 (OK)\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/resources/automationResults/{{requestId}}",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"resources",
												"automationResults",
												"{{requestId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "check that result does NOT exist",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response code should be 404 (not found)\", function () {",
													"    pm.response.to.have.status(404);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/resources/automationResults/{{requestId}}",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"resources",
												"automationResults",
												"{{requestId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "check that request still exists",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response code should be 200 (OK)\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/resources/automationRequests/{{requestId}}",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"resources",
												"automationRequests",
												"{{requestId}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "cascade delete",
							"item": [
								{
									"name": "create a request to delete later",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Response code should be 201 (created)\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"",
													"// save the request ID as a global variable for later tests to use",
													"const response = xml2Json(pm.response.text());",
													"var resrouceAbout = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"].$[\"rdf:about\"];",
													"var resourceAboutSplit = resrouceAbout.split(\"/\");",
													"var requestId = resourceAboutSplit[resourceAboutSplit.length-1];",
													"pm.globals.set('requestId', requestId);",
													"",
													"",
													"pm.globals.set(\"waitCounter\", 0);",
													"pm.test(\"Response code should be 201 (created)\", function () {",
													"    pm.response.to.have.status(201);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{server_address}}/{{server_context}}/services/resources/automationPlans/dummy\" />\n\t<dcterms:title>test</dcterms:title>\n\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>arguments</oslc:name>\n\t\t\t<rdf:value>asdfasdf</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>SUT</oslc:name>\n\t\t\t<rdf:value>{{SUT}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>",
											"options": {
												"raw": {
													"language": "xml"
												}
											}
										},
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/resources/createAutomationRequest",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"resources",
												"createAutomationRequest"
											]
										}
									},
									"response": []
								},
								{
									"name": "wait for #complete (analysis/resource delete/automation results/non cascade delete)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var timeoutSeconds = pm.collectionVariables.get('automation_wait_time');",
													"",
													"var waitCounter = pm.globals.get(\"waitCounter\");",
													"if(!waitCounter) {",
													"    waitCounter = 0;",
													"}",
													"",
													"if (pm.response.code != 200) { // wait for the resource to be created",
													"    if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
													"        setTimeout(function(){}, [1000]); // 1 second",
													"        waitCounter++;",
													"        postman.setNextRequest(pm.info.requestName);",
													"    } else { // timeout, reset counter",
													"        waitCounter = 0;",
													"    }",
													"} else { // wait for the automation to complete",
													"    const response = xml2Json(pm.response.text());",
													"    var state = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"][\"oslc_auto:state\"].$[\"rdf:resource\"];",
													"    if (state == \"http://open-services.net/ns/auto#inProgress\") {",
													"        if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
													"            setTimeout(function(){}, [1000]); // 1 second",
													"            waitCounter++;",
													"            postman.setNextRequest(pm.info.requestName);",
													"        } else { // timeout, reset counter",
													"            waitCounter = 0;",
													"        }",
													"    } else { // wait doen, reset counter",
													"            waitCounter = 0;",
													"    }",
													"}",
													"",
													"pm.globals.set(\"waitCounter\", waitCounter);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/resources/automationRequests/{{requestId}}",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"resources",
												"automationRequests",
												"{{requestId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "check that request exists",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response code should be 200 (OK)\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/resources/automationRequests/{{requestId}}",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"resources",
												"automationRequests",
												"{{requestId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "check that result exists",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response code should be 200 (OK)\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/resources/automationResults/{{requestId}}",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"resources",
												"automationResults",
												"{{requestId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "delete result",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response code should be 200 (OK)\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/resources/automationResults/{{requestId}}?cascade=true",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"resources",
												"automationResults",
												"{{requestId}}"
											],
											"query": [
												{
													"key": "cascade",
													"value": "true"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "check that result does NOT exist",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response code should be 404 (not found)\", function () {",
													"    pm.response.to.have.status(404);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/resources/automationResults/{{requestId}}",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"resources",
												"automationResults",
												"{{requestId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "check that request does NOT exist",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response code should be 404 (not found)\", function () {",
													"    pm.response.to.have.status(404);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/resources/automationRequests/{{requestId}}",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"resources",
												"automationRequests",
												"{{requestId}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "delete before exec finishes",
							"item": [
								{
									"name": "create a request to delete later",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Response code should be 201 (created)\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"",
													"// save the request ID as a global variable for later tests to use",
													"const response = xml2Json(pm.response.text());",
													"var resrouceAbout = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"].$[\"rdf:about\"];",
													"var resourceAboutSplit = resrouceAbout.split(\"/\");",
													"var requestId = resourceAboutSplit[resourceAboutSplit.length-1];",
													"pm.globals.set('requestId', requestId);",
													"",
													"",
													"pm.globals.set(\"waitCounter\", 0);",
													"pm.test(\"Response code should be 201 (created)\", function () {",
													"    pm.response.to.have.status(201);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{server_address}}/{{server_context}}/services/resources/automationPlans/dummy\" />\n\t<dcterms:title>test</dcterms:title>\n\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>arguments</oslc:name>\n\t\t\t<rdf:value>asdfasdf</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>sleepDuration</oslc:name>\n\t\t\t<rdf:value>5</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n    \n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>SUT</oslc:name>\n\t\t\t<rdf:value>{{SUT}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>",
											"options": {
												"raw": {
													"language": "xml"
												}
											}
										},
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/resources/createAutomationRequest",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"resources",
												"createAutomationRequest"
											]
										}
									},
									"response": []
								},
								{
									"name": "check that request exists",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response code should be 200 (OK)\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/resources/automationRequests/{{requestId}}",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"resources",
												"automationRequests",
												"{{requestId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "check that result exists",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response code should be 200 (OK)\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/resources/automationResults/{{requestId}}",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"resources",
												"automationResults",
												"{{requestId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "delete result error",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response code should be 500 (internal error)\", function () {",
													"    pm.response.to.have.status(500);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/resources/automationResults/{{requestId}}?cascade=true",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"resources",
												"automationResults",
												"{{requestId}}"
											],
											"query": [
												{
													"key": "cascade",
													"value": "true"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "check that request does exist",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response code should be 200 (OK)\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/resources/automationRequests/{{requestId}}",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"resources",
												"automationRequests",
												"{{requestId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "check that result does exist",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response code should be 200 (OK)\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/resources/automationResults/{{requestId}}",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"resources",
												"automationResults",
												"{{requestId}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "contribution",
					"item": [
						{
							"name": "non cascade delete",
							"item": [
								{
									"name": "create a request to delete later",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Response code should be 201 (created)\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"",
													"// save the request ID as a global variable for later tests to use",
													"const response = xml2Json(pm.response.text());",
													"var resrouceAbout = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"].$[\"rdf:about\"];",
													"var resourceAboutSplit = resrouceAbout.split(\"/\");",
													"var requestId = resourceAboutSplit[resourceAboutSplit.length-1];",
													"pm.globals.set('requestId', requestId);",
													"",
													"",
													"pm.globals.set(\"waitCounter\", 0);",
													"pm.test(\"Response code should be 201 (created)\", function () {",
													"    pm.response.to.have.status(201);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{server_address}}/{{server_context}}/services/resources/automationPlans/dummy\" />\n\t<dcterms:title>test</dcterms:title>\n\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>arguments</oslc:name>\n\t\t\t<rdf:value>asdfasdf</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>SUT</oslc:name>\n\t\t\t<rdf:value>{{SUT}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>",
											"options": {
												"raw": {
													"language": "xml"
												}
											}
										},
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/resources/createAutomationRequest",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"resources",
												"createAutomationRequest"
											]
										}
									},
									"response": []
								},
								{
									"name": "wait for #complete (analysis/resource delete/contributions/non cascade delete)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var timeoutSeconds = pm.collectionVariables.get('automation_wait_time');",
													"",
													"var waitCounter = pm.globals.get(\"waitCounter\");",
													"if(!waitCounter) {",
													"    waitCounter = 0;",
													"}",
													"",
													"if (pm.response.code != 200) { // wait for the resource to be created",
													"    if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
													"        setTimeout(function(){}, [1000]); // 1 second",
													"        waitCounter++;",
													"        postman.setNextRequest(pm.info.requestName);",
													"    } else { // timeout, reset counter",
													"        waitCounter = 0;",
													"    }",
													"} else { // wait for the automation to complete",
													"    const response = xml2Json(pm.response.text());",
													"    var state = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"][\"oslc_auto:state\"].$[\"rdf:resource\"];",
													"    if (state == \"http://open-services.net/ns/auto#inProgress\") {",
													"        if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
													"            setTimeout(function(){}, [1000]); // 1 second",
													"            waitCounter++;",
													"            postman.setNextRequest(pm.info.requestName);",
													"        } else { // timeout, reset counter",
													"            waitCounter = 0;",
													"        }",
													"    } else { // wait doen, reset counter",
													"            waitCounter = 0;",
													"    }",
													"}",
													"",
													"pm.globals.set(\"waitCounter\", waitCounter);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/resources/automationRequests/{{requestId}}",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"resources",
												"automationRequests",
												"{{requestId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "check that request exists",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response code should be 200 (OK)\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/resources/automationRequests/{{requestId}}",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"resources",
												"automationRequests",
												"{{requestId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "check that result exists",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response code should be 200 (OK)\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/resources/automationResults/{{requestId}}",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"resources",
												"automationResults",
												"{{requestId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "check that contribution exists",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response code should be 200 (OK)\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/resources/contributions/{{requestId}}-stdout",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"resources",
												"contributions",
												"{{requestId}}-stdout"
											]
										}
									},
									"response": []
								},
								{
									"name": "delete contribution",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response code should be 200 (OK)\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/resources/contributions/{{requestId}}-stdout",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"resources",
												"contributions",
												"{{requestId}}-stdout"
											]
										}
									},
									"response": []
								},
								{
									"name": "check that contribution does NOT exist",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response code should be 404 (not found)\", function () {",
													"    pm.response.to.have.status(404);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/resources/contributions/{{requestId}}-stdout",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"resources",
												"contributions",
												"{{requestId}}-stdout"
											]
										}
									},
									"response": []
								},
								{
									"name": "check that request still exists",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response code should be 200 (OK)\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/resources/automationRequests/{{requestId}}",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"resources",
												"automationRequests",
												"{{requestId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "check that result still exists",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response code should be 200 (OK)\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/resources/automationResults/{{requestId}}",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"resources",
												"automationResults",
												"{{requestId}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "Resource update",
			"item": [
				{
					"name": "pre init",
					"item": [
						{
							"name": "create SUT using the compilation provider",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// save the request ID as a global variable for later tests to use -- used as SUT ID",
											"const response = xml2Json(pm.response.text());",
											"var resrouceAbout = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"].$[\"rdf:about\"];",
											"var resourceAboutSplit = resrouceAbout.split(\"/\");",
											"var requestId = resourceAboutSplit[resourceAboutSplit.length-1];",
											"pm.globals.set('requestId', requestId);",
											"",
											"",
											"pm.test(\"Response code should be 201 (created)\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"var compilation_provider = pm.variables.get(\"compilation_provider\");",
											"var sutId = requestId;",
											"pm.globals.set(\"SUT\", compilation_provider + \"/services/resources/sUTs/\" + sutId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/xml"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>analysis test</dcterms:title>\n\t<dcterms:description>analysis test</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{compilation_provider}}/services/resources/automationPlans/0\" />\n\t\n\t<oslc_auto:inputParameter>\n        <oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>sourceBase64</oslc:name>\n\t\t\t<rdf:value>TestEchoProgram.cpp\nI2luY2x1ZGUgPHN0ZGlvLmg+CgppbnQgbWFpbihpbnQgYXJnYywgY2hhcioqIGFyZ3YpCnsKCXByaW50ZigiJXNcbiIsIGFyZ3ZbMV0pOwoJcmV0dXJuIDA7Cn0K</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>buildCommand</oslc:name>\n\t\t\t<rdf:value>gcc -g TestEchoProgram.cpp -o my_echo</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>launchCommand</oslc:name>\n\t\t\t<rdf:value>./my_echo</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>"
								},
								"url": {
									"raw": "{{compilation_provider}}/services/resources/createAutomationRequest",
									"host": [
										"{{compilation_provider}}"
									],
									"path": [
										"services",
										"resources",
										"createAutomationRequest"
									]
								}
							},
							"response": []
						},
						{
							"name": "wait for #complete (analysis/resource update/pre init)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var timeoutSeconds = pm.collectionVariables.get('automation_wait_time');",
											"",
											"var waitCounter = pm.globals.get(\"waitCounter\");",
											"if(!waitCounter) {",
											"    waitCounter = 0;",
											"}",
											"",
											"if (pm.response.code != 200) { // wait for the resource to be created",
											"    if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
											"        setTimeout(function(){}, [1000]); // 1 second",
											"        waitCounter++;",
											"        postman.setNextRequest(pm.info.requestName);",
											"    } else { // timeout, reset counter",
											"        waitCounter = 0;",
											"    }",
											"} else { // wait for the automation to complete",
											"    const response = xml2Json(pm.response.text());",
											"    var state = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"][\"oslc_auto:state\"].$[\"rdf:resource\"];",
											"    if (state == \"http://open-services.net/ns/auto#inProgress\") {",
											"        if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
											"            setTimeout(function(){}, [1000]); // 1 second",
											"            waitCounter++;",
											"            postman.setNextRequest(pm.info.requestName);",
											"        } else { // timeout, reset counter",
											"            waitCounter = 0;",
											"        }",
											"    } else { // wait doen, reset counter",
											"            waitCounter = 0;",
											"    }",
											"}",
											"",
											"pm.globals.set(\"waitCounter\", waitCounter);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"url": {
									"raw": "{{compilation_provider}}/services/resources/automationRequests/{{requestId}}",
									"host": [
										"{{compilation_provider}}"
									],
									"path": [
										"services",
										"resources",
										"automationRequests",
										"{{requestId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Automation Request",
					"item": [
						{
							"name": "normal update",
							"item": [
								{
									"name": "create a request to update later",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Response code should be 201 (created)\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"",
													"// save the request ID as a global variable for later tests to use",
													"const response = xml2Json(pm.response.text());",
													"var resrouceAbout = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"].$[\"rdf:about\"];",
													"var resourceAboutSplit = resrouceAbout.split(\"/\");",
													"var requestId = resourceAboutSplit[resourceAboutSplit.length-1];",
													"pm.globals.set('requestId', requestId);",
													"",
													"// pass the response body to the update request after this one",
													"pm.globals.set('responseBody', pm.response.text());",
													"",
													"",
													"pm.globals.set(\"waitCounter\", 0);",
													"pm.test(\"Response code should be 201 (created)\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"",
													"pm.test(\"AutomationRequest state should be #inProgress\", function () {",
													"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#new\\\"/>\");",
													"    pm.expect(pm.response.text()).to.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#inProgress\\\"/>\");",
													"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#complete\\\"/>\");",
													"});",
													"",
													"",
													"pm.test(\"desired state should be #complete \", function () {",
													"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:desiredState rdf:resource=\\\"http://open-services.net/ns/auto#new\\\"/>\");",
													"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:desiredState rdf:resource=\\\"http://open-services.net/ns/auto#inProgress\\\"/>\");",
													"    pm.expect(pm.response.text()).to.include(\"oslc_auto:desiredState rdf:resource=\\\"http://open-services.net/ns/auto#complete\\\"/>\");",
													"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:desiredState rdf:resource=\\\"http://open-services.net/ns/auto#canceled\\\"/>\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{server_address}}/{{server_context}}/services/resources/automationPlans/dummy\" />\n\t<dcterms:title>before update title</dcterms:title>\n\t<dcterms:description>before update description</dcterms:description>\n\t<dcterms:creator rdf:resource=\"http://before_update_creator\"/>\n\t<dcterms:contributor rdf:resource=\"http://before_update_contributor\"/>\n\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>arguments</oslc:name>\n\t\t\t<rdf:value>before update argument value</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>SUT</oslc:name>\n\t\t\t<rdf:value>{{SUT}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>",
											"options": {
												"raw": {
													"language": "xml"
												}
											}
										},
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/resources/createAutomationRequest",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"resources",
												"createAutomationRequest"
											]
										}
									},
									"response": []
								},
								{
									"name": "wait for #complete (analysis/resoruce update/automation request/normal update)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var timeoutSeconds = pm.collectionVariables.get('automation_wait_time');",
													"",
													"var waitCounter = pm.globals.get(\"waitCounter\");",
													"if(!waitCounter) {",
													"    waitCounter = 0;",
													"}",
													"",
													"if (pm.response.code != 200) { // wait for the resource to be created",
													"    if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
													"        setTimeout(function(){}, [1000]); // 1 second",
													"        waitCounter++;",
													"        postman.setNextRequest(pm.info.requestName);",
													"    } else { // timeout, reset counter",
													"        waitCounter = 0;",
													"    }",
													"} else { // wait for the automation to complete",
													"    const response = xml2Json(pm.response.text());",
													"    var state = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"][\"oslc_auto:state\"].$[\"rdf:resource\"];",
													"    if (state == \"http://open-services.net/ns/auto#inProgress\") {",
													"        if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
													"            setTimeout(function(){}, [1000]); // 1 second",
													"            waitCounter++;",
													"            postman.setNextRequest(pm.info.requestName);",
													"        } else { // timeout, reset counter",
													"            waitCounter = 0;",
													"        }",
													"    } else { // wait doen, reset counter",
													"            waitCounter = 0;",
													"    }",
													"}",
													"",
													"pm.globals.set(\"waitCounter\", waitCounter);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/resources/automationRequests/{{requestId}}",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"resources",
												"automationRequests",
												"{{requestId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "check request before update",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// get global variable to use in this test",
													"var requestId = pm.globals.get('requestId');",
													"var serverAddr = pm.variables.get(\"server_address\");",
													"var server_context = pm.variables.get(\"server_context\");",
													"var AutomationPlanId = pm.variables.get(\"AutomationPlanId\");",
													"var test_arguments = pm.variables.get(\"arguments\");",
													"var SUT = pm.variables.get(\"SUT\");",
													"",
													"",
													"pm.test(\"Response code should be 200 (OK)\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"check title\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"before update title\");",
													"});",
													"pm.test(\"check description\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"before update description\");",
													"});",
													"pm.test(\"check creator\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"before_update_creator\");",
													"});",
													"pm.test(\"check contributor\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"before_update_contributor\");",
													"});",
													"pm.test(\"check argument value\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"before update argument value\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/resources/automationRequests/{{requestId}}",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"resources",
												"automationRequests",
												"{{requestId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "update",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response code should be 200 (OK)\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var requestBody = pm.globals.get('responseBody');\r",
													"\r",
													"// modify some properties\r",
													"requestBody = requestBody.replace(\"before update title\", \"after update title\");\r",
													"requestBody = requestBody.replace(\"before update description\", \"after update description\");\r",
													"requestBody = requestBody.replace(\"before_update_creator\", \"after_update_creator\");\r",
													"requestBody = requestBody.replace(\"before_update_contributor\", \"after_update_contributor\");\r",
													"\r",
													"// test that not all changes\r",
													"requestBody = requestBody.replace(\"before update argument value\", \"after update argument value\");\r",
													"\r",
													"pm.globals.set('requestBody', requestBody);\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "xml"
												}
											}
										},
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/resources/automationRequests/{{requestId}}",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"resources",
												"automationRequests",
												"{{requestId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "check request after update",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// get global variable to use in this test",
													"var requestId = pm.globals.get('requestId');",
													"var serverAddr = pm.variables.get(\"server_address\");",
													"var server_context = pm.variables.get(\"server_context\");",
													"var AutomationPlanId = pm.variables.get(\"AutomationPlanId\");",
													"var test_arguments = pm.variables.get(\"arguments\");",
													"var SUT = pm.variables.get(\"SUT\");",
													"",
													"",
													"pm.test(\"Response code should be 200 (OK)\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"check title\", function () {",
													"    pm.expect(pm.response.text()).to.not.include(\"before update title\");",
													"    pm.expect(pm.response.text()).to.include(\"after update title\");",
													"});",
													"pm.test(\"check description\", function () {",
													"    pm.expect(pm.response.text()).to.not.include(\"before update description\");",
													"    pm.expect(pm.response.text()).to.include(\"after update description\");",
													"});",
													"pm.test(\"check creator\", function () {",
													"    pm.expect(pm.response.text()).to.not.include(\"before_update_creator\");",
													"    pm.expect(pm.response.text()).to.include(\"after_update_creator\");",
													"});",
													"pm.test(\"check contributor\", function () {",
													"    pm.expect(pm.response.text()).to.not.include(\"before_update_contributor\");",
													"    pm.expect(pm.response.text()).to.include(\"after_update_contributor\");",
													"});",
													"pm.test(\"check argument value\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"before update argument value\");",
													"    pm.expect(pm.response.text()).to.not.include(\"after update argument value\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/resources/automationRequests/{{requestId}}",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"resources",
												"automationRequests",
												"{{requestId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "check request after update Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// get global variable to use in this test",
													"var requestId = pm.globals.get('requestId');",
													"var serverAddr = pm.variables.get(\"server_address\");",
													"var server_context = pm.variables.get(\"server_context\");",
													"var AutomationPlanId = pm.variables.get(\"AutomationPlanId\");",
													"var test_arguments = pm.variables.get(\"arguments\");",
													"var SUT = pm.variables.get(\"SUT\");",
													"",
													"",
													"pm.test(\"Response code should be 200 (OK)\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"check title\", function () {",
													"    pm.expect(pm.response.text()).to.not.include(\"before update title\");",
													"    pm.expect(pm.response.text()).to.include(\"after update title\");",
													"});",
													"pm.test(\"check description\", function () {",
													"    pm.expect(pm.response.text()).to.not.include(\"before update description\");",
													"    pm.expect(pm.response.text()).to.include(\"after update description\");",
													"});",
													"pm.test(\"check creator\", function () {",
													"    pm.expect(pm.response.text()).to.not.include(\"before_update_creator\");",
													"    pm.expect(pm.response.text()).to.include(\"after_update_creator\");",
													"});",
													"pm.test(\"check contributor\", function () {",
													"    pm.expect(pm.response.text()).to.not.include(\"before_update_contributor\");",
													"    pm.expect(pm.response.text()).to.include(\"after_update_contributor\");",
													"});",
													"pm.test(\"check argument value\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"before update argument value\");",
													"    pm.expect(pm.response.text()).to.not.include(\"after update argument value\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/resources/automationRequests/{{requestId}}",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"resources",
												"automationRequests",
												"{{requestId}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "error update",
							"item": [
								{
									"name": "create a request to update",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Response code should be 201 (created)\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"",
													"// save the request ID as a global variable for later tests to use",
													"const response = xml2Json(pm.response.text());",
													"var resrouceAbout = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"].$[\"rdf:about\"];",
													"var resourceAboutSplit = resrouceAbout.split(\"/\");",
													"var requestId = resourceAboutSplit[resourceAboutSplit.length-1];",
													"pm.globals.set('requestId', requestId);",
													"",
													"// pass the response body to the update request after this one",
													"pm.globals.set('responseBody', pm.response.text());",
													"",
													"",
													"pm.globals.set(\"waitCounter\", 0);",
													"pm.test(\"Response code should be 201 (created)\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"",
													"pm.test(\"AutomationRequest state should be #inProgress\", function () {",
													"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#new\\\"/>\");",
													"    pm.expect(pm.response.text()).to.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#inProgress\\\"/>\");",
													"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#complete\\\"/>\");",
													"});",
													"",
													"",
													"pm.test(\"desired state should be #complete \", function () {",
													"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:desiredState rdf:resource=\\\"http://open-services.net/ns/auto#new\\\"/>\");",
													"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:desiredState rdf:resource=\\\"http://open-services.net/ns/auto#inProgress\\\"/>\");",
													"    pm.expect(pm.response.text()).to.include(\"oslc_auto:desiredState rdf:resource=\\\"http://open-services.net/ns/auto#complete\\\"/>\");",
													"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:desiredState rdf:resource=\\\"http://open-services.net/ns/auto#canceled\\\"/>\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{server_address}}/{{server_context}}/services/resources/automationPlans/dummy\" />\n\t<dcterms:title>test</dcterms:title>\n\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>arguments</oslc:name>\n\t\t\t<rdf:value>asdfasdf</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>sleepDuration</oslc:name>\n\t\t\t<rdf:value>5</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n    \n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>SUT</oslc:name>\n\t\t\t<rdf:value>{{SUT}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>",
											"options": {
												"raw": {
													"language": "xml"
												}
											}
										},
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/resources/createAutomationRequest",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"resources",
												"createAutomationRequest"
											]
										}
									},
									"response": []
								},
								{
									"name": "try updating before it finishes",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response code should be 500 (internal error)\", function () {",
													"    pm.response.to.have.status(500);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var requestBody = pm.globals.get('responseBody');\r",
													"\r",
													"pm.globals.set('requestBody', requestBody);\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "xml"
												}
											}
										},
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/resources/automationRequests/{{requestId}}",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"resources",
												"automationRequests",
												"{{requestId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "sending an empty update",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response code should be 400 (bad request)\", function () {",
													"    pm.response.to.have.status(400);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "xml"
												}
											}
										},
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/resources/automationRequests/{{requestId}}",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"resources",
												"automationRequests",
												"{{requestId}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Execution cancel",
							"item": [
								{
									"name": "create a request to cancel later",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Response code should be 201 (created)\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"",
													"// save the request ID as a global variable for later tests to use",
													"const response = xml2Json(pm.response.text());",
													"var resrouceAbout = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"].$[\"rdf:about\"];",
													"var resourceAboutSplit = resrouceAbout.split(\"/\");",
													"var requestId = resourceAboutSplit[resourceAboutSplit.length-1];",
													"pm.globals.set('requestId', requestId);",
													"",
													"// pass the response body to the update request after this one",
													"pm.globals.set('responseBody', pm.response.text());",
													"",
													"",
													"pm.globals.set(\"waitCounter\", 0);",
													"pm.test(\"Response code should be 201 (created)\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"",
													"pm.test(\"AutomationRequest state should be #inProgress\", function () {",
													"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#new\\\"/>\");",
													"    pm.expect(pm.response.text()).to.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#inProgress\\\"/>\");",
													"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#complete\\\"/>\");",
													"});",
													"",
													"",
													"pm.test(\"desired state should be #complete \", function () {",
													"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:desiredState rdf:resource=\\\"http://open-services.net/ns/auto#new\\\"/>\");",
													"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:desiredState rdf:resource=\\\"http://open-services.net/ns/auto#inProgress\\\"/>\");",
													"    pm.expect(pm.response.text()).to.include(\"oslc_auto:desiredState rdf:resource=\\\"http://open-services.net/ns/auto#complete\\\"/>\");",
													"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:desiredState rdf:resource=\\\"http://open-services.net/ns/auto#canceled\\\"/>\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{server_address}}/{{server_context}}/services/resources/automationPlans/dummy\" />\n\t<dcterms:title>test</dcterms:title>\n\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>arguments</oslc:name>\n\t\t\t<rdf:value>asdfasdf</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>sleepDuration</oslc:name>\n\t\t\t<rdf:value>5</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n    \n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>SUT</oslc:name>\n\t\t\t<rdf:value>{{SUT}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>",
											"options": {
												"raw": {
													"language": "xml"
												}
											}
										},
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/resources/createAutomationRequest",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"resources",
												"createAutomationRequest"
											]
										}
									},
									"response": []
								},
								{
									"name": "update to cancel",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response code should be 200 (OK)\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var requestBody = pm.globals.get('responseBody');\r",
													"\r",
													"// replace desired state with \"cancelled\"\r",
													"requestBody = requestBody.replace(\"http://open-services.net/ns/auto#complete\", \"http://open-services.net/ns/auto#canceled\");\r",
													"\r",
													"pm.globals.set('requestBody', requestBody);\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "xml"
												}
											}
										},
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/resources/automationRequests/{{requestId}}",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"resources",
												"automationRequests",
												"{{requestId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "check the request",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// get global variable to use in this test",
													"var requestId = pm.globals.get('requestId');",
													"var serverAddr = pm.variables.get(\"server_address\");",
													"var server_context = pm.variables.get(\"server_context\");",
													"var AutomationPlanId = pm.variables.get(\"AutomationPlanId\");",
													"var test_arguments = pm.variables.get(\"arguments\");",
													"var SUT = pm.variables.get(\"SUT\");",
													"",
													"",
													"pm.test(\"Response code should be 200 (OK)\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"state should be #canceled \", function () {",
													"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#new\\\"/>\");",
													"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#inProgress\\\"/>\");",
													"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#complete\\\"/>\");",
													"    pm.expect(pm.response.text()).to.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#canceled\\\"/>\");",
													"});",
													"pm.test(\"desired state should be #canceled \", function () {",
													"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:desiredState rdf:resource=\\\"http://open-services.net/ns/auto#new\\\"/>\");",
													"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:desiredState rdf:resource=\\\"http://open-services.net/ns/auto#inProgress\\\"/>\");",
													"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:desiredState rdf:resource=\\\"http://open-services.net/ns/auto#complete\\\"/>\");",
													"    pm.expect(pm.response.text()).to.include(\"oslc_auto:desiredState rdf:resource=\\\"http://open-services.net/ns/auto#canceled\\\"/>\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/resources/automationRequests/{{requestId}}",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"resources",
												"automationRequests",
												"{{requestId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "check the result",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// get global variable to use in this test",
													"var requestId = pm.globals.get('requestId');",
													"var serverAddr = pm.variables.get(\"server_address\");",
													"var server_context = pm.variables.get(\"server_context\");",
													"var AutomationPlanId = pm.variables.get(\"AutomationPlanId\");",
													"var test_arguments = pm.variables.get(\"arguments\");",
													"var SUT = pm.variables.get(\"SUT\");",
													"",
													"",
													"pm.test(\"Response code should be 200 (OK)\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"state should be #canceled \", function () {",
													"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#new\\\"/>\");",
													"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#inProgress\\\"/>\");",
													"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#complete\\\"/>\");",
													"    pm.expect(pm.response.text()).to.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#canceled\\\"/>\");",
													"});",
													"pm.test(\"desired state should be #canceled \", function () {",
													"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:desiredState rdf:resource=\\\"http://open-services.net/ns/auto#new\\\"/>\");",
													"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:desiredState rdf:resource=\\\"http://open-services.net/ns/auto#inProgress\\\"/>\");",
													"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:desiredState rdf:resource=\\\"http://open-services.net/ns/auto#complete\\\"/>\");",
													"    pm.expect(pm.response.text()).to.include(\"oslc_auto:desiredState rdf:resource=\\\"http://open-services.net/ns/auto#canceled\\\"/>\");",
													"});",
													"pm.test(\"verdict should be #unavailable\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"oslc_auto:verdict rdf:resource=\\\"http://open-services.net/ns/auto#unavailable\\\"/>\");",
													"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:verdict rdf:resource=\\\"http://open-services.net/ns/auto#passed\\\"/>\");",
													"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:verdict rdf:resource=\\\"http://open-services.net/ns/auto#error\\\"/>\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/resources/automationResults/{{requestId}}",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"resources",
												"automationResults",
												"{{requestId}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Automation Result",
					"item": [
						{
							"name": "normal update",
							"item": [
								{
									"name": "create a request to update later",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Response code should be 201 (created)\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"",
													"// save the request ID as a global variable for later tests to use",
													"const response = xml2Json(pm.response.text());",
													"var resrouceAbout = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"].$[\"rdf:about\"];",
													"var resourceAboutSplit = resrouceAbout.split(\"/\");",
													"var requestId = resourceAboutSplit[resourceAboutSplit.length-1];",
													"pm.globals.set('requestId', requestId);",
													"",
													"",
													"pm.globals.set(\"waitCounter\", 0);",
													"pm.test(\"Response code should be 201 (created)\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"",
													"pm.test(\"AutomationRequest state should be #inProgress\", function () {",
													"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#new\\\"/>\");",
													"    pm.expect(pm.response.text()).to.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#inProgress\\\"/>\");",
													"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#complete\\\"/>\");",
													"});",
													"",
													"",
													"pm.test(\"desired state should be #complete \", function () {",
													"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:desiredState rdf:resource=\\\"http://open-services.net/ns/auto#new\\\"/>\");",
													"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:desiredState rdf:resource=\\\"http://open-services.net/ns/auto#inProgress\\\"/>\");",
													"    pm.expect(pm.response.text()).to.include(\"oslc_auto:desiredState rdf:resource=\\\"http://open-services.net/ns/auto#complete\\\"/>\");",
													"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:desiredState rdf:resource=\\\"http://open-services.net/ns/auto#canceled\\\"/>\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{server_address}}/{{server_context}}/services/resources/automationPlans/dummy\" />\n\t<dcterms:title>before update title</dcterms:title>\n\t<dcterms:description>before update description</dcterms:description>\n\t<dcterms:creator rdf:resource=\"http://before_update_creator\"/>\n\t<dcterms:contributor rdf:resource=\"http://before_update_contributor\"/>\n\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>arguments</oslc:name>\n\t\t\t<rdf:value>before update argument value</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>SUT</oslc:name>\n\t\t\t<rdf:value>{{SUT}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>",
											"options": {
												"raw": {
													"language": "xml"
												}
											}
										},
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/resources/createAutomationRequest",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"resources",
												"createAutomationRequest"
											]
										}
									},
									"response": []
								},
								{
									"name": "wait for #complete (analysis/resoruce update/automation result/normal update)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var timeoutSeconds = pm.collectionVariables.get('automation_wait_time');",
													"",
													"var waitCounter = pm.globals.get(\"waitCounter\");",
													"if(!waitCounter) {",
													"    waitCounter = 0;",
													"}",
													"",
													"if (pm.response.code != 200) { // wait for the resource to be created",
													"    if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
													"        setTimeout(function(){}, [1000]); // 1 second",
													"        waitCounter++;",
													"        postman.setNextRequest(pm.info.requestName);",
													"    } else { // timeout, reset counter",
													"        waitCounter = 0;",
													"    }",
													"} else { // wait for the automation to complete",
													"    const response = xml2Json(pm.response.text());",
													"    var state = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"][\"oslc_auto:state\"].$[\"rdf:resource\"];",
													"    if (state == \"http://open-services.net/ns/auto#inProgress\") {",
													"        if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
													"            setTimeout(function(){}, [1000]); // 1 second",
													"            waitCounter++;",
													"            postman.setNextRequest(pm.info.requestName);",
													"        } else { // timeout, reset counter",
													"            waitCounter = 0;",
													"        }",
													"    } else { // wait doen, reset counter",
													"            waitCounter = 0;",
													"    }",
													"}",
													"",
													"pm.globals.set(\"waitCounter\", waitCounter);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/resources/automationRequests/{{requestId}}",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"resources",
												"automationRequests",
												"{{requestId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "check result before update",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// get global variable to use in this test",
													"var requestId = pm.globals.get('requestId');",
													"var serverAddr = pm.variables.get(\"server_address\");",
													"var server_context = pm.variables.get(\"server_context\");",
													"var AutomationPlanId = pm.variables.get(\"AutomationPlanId\");",
													"var test_arguments = pm.variables.get(\"arguments\");",
													"var SUT = pm.variables.get(\"SUT\");",
													"",
													"",
													"pm.test(\"Response code should be 200 (OK)\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// pass the response body to the update request after this one",
													"pm.globals.set('responseBody', pm.response.text());",
													"",
													"pm.test(\"check title\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"Result - before update title\");",
													"});",
													"pm.test(\"check creator\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"before_update_creator\");",
													"});",
													"pm.test(\"check contributor\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"before_update_contributor\");",
													"});",
													"pm.test(\"check argument value\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"before update argument value\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/resources/automationResults/{{requestId}}",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"resources",
												"automationResults",
												"{{requestId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "update",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response code should be 200 (OK)\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var requestBody = pm.globals.get('responseBody');\r",
													"\r",
													"// modify some properties\r",
													"requestBody = requestBody.replace(\"Result - before update title\", \"Result - after update title\");\r",
													"requestBody = requestBody.replace(\"before_update_creator\", \"after_update_creator\");\r",
													"requestBody = requestBody.replace(\"before_update_contributor\", \"after_update_contributor\");\r",
													"\r",
													"// test that not all changes\r",
													"requestBody = requestBody.replace(\"before update argument value\", \"after update argument value\");\r",
													"\r",
													"pm.globals.set('requestBody', requestBody);\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "xml"
												}
											}
										},
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/resources/automationResults/{{requestId}}",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"resources",
												"automationResults",
												"{{requestId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "check result after update",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// get global variable to use in this test",
													"var requestId = pm.globals.get('requestId');",
													"var serverAddr = pm.variables.get(\"server_address\");",
													"var server_context = pm.variables.get(\"server_context\");",
													"var AutomationPlanId = pm.variables.get(\"AutomationPlanId\");",
													"var test_arguments = pm.variables.get(\"arguments\");",
													"var SUT = pm.variables.get(\"SUT\");",
													"",
													"",
													"pm.test(\"Response code should be 200 (OK)\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"check title\", function () {",
													"    pm.expect(pm.response.text()).to.not.include(\"Result - before update title\");",
													"    pm.expect(pm.response.text()).to.include(\"Result - after update title\");",
													"});",
													"pm.test(\"check creator\", function () {",
													"    pm.expect(pm.response.text()).to.not.include(\"before_update_creator\");",
													"    pm.expect(pm.response.text()).to.include(\"after_update_creator\");",
													"});",
													"pm.test(\"check contributor\", function () {",
													"    pm.expect(pm.response.text()).to.not.include(\"before_update_contributor\");",
													"    pm.expect(pm.response.text()).to.include(\"after_update_contributor\");",
													"});",
													"pm.test(\"check argument value\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"before update argument value\");",
													"    pm.expect(pm.response.text()).to.not.include(\"after update argument value\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/resources/automationResults/{{requestId}}",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"resources",
												"automationResults",
												"{{requestId}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "error update",
							"item": [
								{
									"name": "create a request to update",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Response code should be 201 (created)\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"",
													"// save the request ID as a global variable for later tests to use",
													"const response = xml2Json(pm.response.text());",
													"var resrouceAbout = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"].$[\"rdf:about\"];",
													"var resourceAboutSplit = resrouceAbout.split(\"/\");",
													"var requestId = resourceAboutSplit[resourceAboutSplit.length-1];",
													"pm.globals.set('requestId', requestId);",
													"",
													"// pass the response body to the update request after this one",
													"pm.globals.set('responseBody', pm.response.text());",
													"",
													"",
													"pm.globals.set(\"waitCounter\", 0);",
													"pm.test(\"Response code should be 201 (created)\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"",
													"pm.test(\"AutomationRequest state should be #inProgress\", function () {",
													"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#new\\\"/>\");",
													"    pm.expect(pm.response.text()).to.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#inProgress\\\"/>\");",
													"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#complete\\\"/>\");",
													"});",
													"",
													"",
													"pm.test(\"desired state should be #complete \", function () {",
													"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:desiredState rdf:resource=\\\"http://open-services.net/ns/auto#new\\\"/>\");",
													"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:desiredState rdf:resource=\\\"http://open-services.net/ns/auto#inProgress\\\"/>\");",
													"    pm.expect(pm.response.text()).to.include(\"oslc_auto:desiredState rdf:resource=\\\"http://open-services.net/ns/auto#complete\\\"/>\");",
													"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:desiredState rdf:resource=\\\"http://open-services.net/ns/auto#canceled\\\"/>\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{server_address}}/{{server_context}}/services/resources/automationPlans/dummy\" />\n\t<dcterms:title>test</dcterms:title>\n\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>arguments</oslc:name>\n\t\t\t<rdf:value>asdfasdf</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>sleepDuration</oslc:name>\n\t\t\t<rdf:value>5</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n    \n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>SUT</oslc:name>\n\t\t\t<rdf:value>{{SUT}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>",
											"options": {
												"raw": {
													"language": "xml"
												}
											}
										},
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/resources/createAutomationRequest",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"resources",
												"createAutomationRequest"
											]
										}
									},
									"response": []
								},
								{
									"name": "check the result before",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// get global variable to use in this test",
													"var requestId = pm.globals.get('requestId');",
													"var serverAddr = pm.variables.get(\"server_address\");",
													"var server_context = pm.variables.get(\"server_context\");",
													"var AutomationPlanId = pm.variables.get(\"AutomationPlanId\");",
													"var test_arguments = pm.variables.get(\"arguments\");",
													"var SUT = pm.variables.get(\"SUT\");",
													"",
													"",
													"pm.test(\"Response code should be 200 (OK)\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// pass the response body to the update request after this one",
													"pm.globals.set('responseBody', pm.response.text());",
													"",
													"pm.test(\"state should be #inProgress \", function () {",
													"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#new\\\"/>\");",
													"    pm.expect(pm.response.text()).to.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#inProgress\\\"/>\");",
													"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#complete\\\"/>\");",
													"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#canceled\\\"/>\");",
													"});",
													"pm.test(\"desired state should be #complete \", function () {",
													"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:desiredState rdf:resource=\\\"http://open-services.net/ns/auto#new\\\"/>\");",
													"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:desiredState rdf:resource=\\\"http://open-services.net/ns/auto#inProgress\\\"/>\");",
													"    pm.expect(pm.response.text()).to.include(\"oslc_auto:desiredState rdf:resource=\\\"http://open-services.net/ns/auto#complete\\\"/>\");",
													"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:desiredState rdf:resource=\\\"http://open-services.net/ns/auto#canceled\\\"/>\");",
													"});",
													"pm.test(\"verdict should be #unavailable\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"oslc_auto:verdict rdf:resource=\\\"http://open-services.net/ns/auto#unavailable\\\"/>\");",
													"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:verdict rdf:resource=\\\"http://open-services.net/ns/auto#passed\\\"/>\");",
													"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:verdict rdf:resource=\\\"http://open-services.net/ns/auto#error\\\"/>\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/resources/automationResults/{{requestId}}",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"resources",
												"automationResults",
												"{{requestId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "try updating before it finishes",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response code should be 500 (internal error)\", function () {",
													"    pm.response.to.have.status(500);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var requestBody = pm.globals.get('responseBody');\r",
													"\r",
													"pm.globals.set('requestBody', requestBody);\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "xml"
												}
											}
										},
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/resources/automationResults/{{requestId}}",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"resources",
												"automationResults",
												"{{requestId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "sending an empty update",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response code should be 400 (bad request)\", function () {",
													"    pm.response.to.have.status(400);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "xml"
												}
											}
										},
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/resources/automationResults/{{requestId}}",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"resources",
												"automationResults",
												"{{requestId}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Execution cancel error",
							"item": [
								{
									"name": "create a request to cancel later",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Response code should be 201 (created)\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"",
													"// save the request ID as a global variable for later tests to use",
													"const response = xml2Json(pm.response.text());",
													"var resrouceAbout = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"].$[\"rdf:about\"];",
													"var resourceAboutSplit = resrouceAbout.split(\"/\");",
													"var requestId = resourceAboutSplit[resourceAboutSplit.length-1];",
													"pm.globals.set('requestId', requestId);",
													"",
													"",
													"",
													"pm.globals.set(\"waitCounter\", 0);",
													"pm.test(\"Response code should be 201 (created)\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"",
													"pm.test(\"AutomationRequest state should be #inProgress\", function () {",
													"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#new\\\"/>\");",
													"    pm.expect(pm.response.text()).to.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#inProgress\\\"/>\");",
													"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#complete\\\"/>\");",
													"});",
													"",
													"",
													"pm.test(\"desired state should be #complete \", function () {",
													"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:desiredState rdf:resource=\\\"http://open-services.net/ns/auto#new\\\"/>\");",
													"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:desiredState rdf:resource=\\\"http://open-services.net/ns/auto#inProgress\\\"/>\");",
													"    pm.expect(pm.response.text()).to.include(\"oslc_auto:desiredState rdf:resource=\\\"http://open-services.net/ns/auto#complete\\\"/>\");",
													"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:desiredState rdf:resource=\\\"http://open-services.net/ns/auto#canceled\\\"/>\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{server_address}}/{{server_context}}/services/resources/automationPlans/dummy\" />\n\t<dcterms:title>test</dcterms:title>\n\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>arguments</oslc:name>\n\t\t\t<rdf:value>asdfasdf</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>sleepDuration</oslc:name>\n\t\t\t<rdf:value>5</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n    \n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>SUT</oslc:name>\n\t\t\t<rdf:value>{{SUT}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>",
											"options": {
												"raw": {
													"language": "xml"
												}
											}
										},
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/resources/createAutomationRequest",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"resources",
												"createAutomationRequest"
											]
										}
									},
									"response": []
								},
								{
									"name": "check the result before",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// get global variable to use in this test",
													"var requestId = pm.globals.get('requestId');",
													"var serverAddr = pm.variables.get(\"server_address\");",
													"var server_context = pm.variables.get(\"server_context\");",
													"var AutomationPlanId = pm.variables.get(\"AutomationPlanId\");",
													"var test_arguments = pm.variables.get(\"arguments\");",
													"var SUT = pm.variables.get(\"SUT\");",
													"",
													"",
													"pm.test(\"Response code should be 200 (OK)\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// pass the response body to the update request after this one",
													"pm.globals.set('responseBody', pm.response.text());",
													"",
													"pm.test(\"state should be #inProgress \", function () {",
													"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#new\\\"/>\");",
													"    pm.expect(pm.response.text()).to.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#inProgress\\\"/>\");",
													"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#complete\\\"/>\");",
													"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#canceled\\\"/>\");",
													"});",
													"pm.test(\"desired state should be #complete \", function () {",
													"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:desiredState rdf:resource=\\\"http://open-services.net/ns/auto#new\\\"/>\");",
													"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:desiredState rdf:resource=\\\"http://open-services.net/ns/auto#inProgress\\\"/>\");",
													"    pm.expect(pm.response.text()).to.include(\"oslc_auto:desiredState rdf:resource=\\\"http://open-services.net/ns/auto#complete\\\"/>\");",
													"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:desiredState rdf:resource=\\\"http://open-services.net/ns/auto#canceled\\\"/>\");",
													"});",
													"pm.test(\"verdict should be #unavailable\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"oslc_auto:verdict rdf:resource=\\\"http://open-services.net/ns/auto#unavailable\\\"/>\");",
													"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:verdict rdf:resource=\\\"http://open-services.net/ns/auto#passed\\\"/>\");",
													"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:verdict rdf:resource=\\\"http://open-services.net/ns/auto#error\\\"/>\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/resources/automationResults/{{requestId}}",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"resources",
												"automationResults",
												"{{requestId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "update to cancel",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response code should be 500 (internal error)\", function () {",
													"    pm.response.to.have.status(500);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var requestBody = pm.globals.get('responseBody');\r",
													"\r",
													"// replace desired state with \"cancelled\"\r",
													"requestBody = requestBody.replace(\"http://open-services.net/ns/auto#complete\", \"http://open-services.net/ns/auto#canceled\");\r",
													"\r",
													"pm.globals.set('requestBody', requestBody);\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "xml"
												}
											}
										},
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/resources/automationResults/{{requestId}}",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"resources",
												"automationResults",
												"{{requestId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "check the result",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// get global variable to use in this test",
													"var requestId = pm.globals.get('requestId');",
													"var serverAddr = pm.variables.get(\"server_address\");",
													"var server_context = pm.variables.get(\"server_context\");",
													"var AutomationPlanId = pm.variables.get(\"AutomationPlanId\");",
													"var test_arguments = pm.variables.get(\"arguments\");",
													"var SUT = pm.variables.get(\"SUT\");",
													"",
													"",
													"pm.test(\"Response code should be 200 (OK)\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"state should be #inProgress \", function () {",
													"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#new\\\"/>\");",
													"    pm.expect(pm.response.text()).to.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#inProgress\\\"/>\");",
													"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#complete\\\"/>\");",
													"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#canceled\\\"/>\");",
													"});",
													"pm.test(\"desired state should be #complete \", function () {",
													"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:desiredState rdf:resource=\\\"http://open-services.net/ns/auto#new\\\"/>\");",
													"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:desiredState rdf:resource=\\\"http://open-services.net/ns/auto#inProgress\\\"/>\");",
													"    pm.expect(pm.response.text()).to.include(\"oslc_auto:desiredState rdf:resource=\\\"http://open-services.net/ns/auto#complete\\\"/>\");",
													"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:desiredState rdf:resource=\\\"http://open-services.net/ns/auto#canceled\\\"/>\");",
													"});",
													"pm.test(\"verdict should be #unavailable\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"oslc_auto:verdict rdf:resource=\\\"http://open-services.net/ns/auto#unavailable\\\"/>\");",
													"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:verdict rdf:resource=\\\"http://open-services.net/ns/auto#passed\\\"/>\");",
													"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:verdict rdf:resource=\\\"http://open-services.net/ns/auto#error\\\"/>\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/resources/automationResults/{{requestId}}",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"resources",
												"automationResults",
												"{{requestId}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "contribution",
					"item": [
						{
							"name": "normal update",
							"item": [
								{
									"name": "create a request to update later",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Response code should be 201 (created)\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"",
													"// save the request ID as a global variable for later tests to use",
													"const response = xml2Json(pm.response.text());",
													"var resrouceAbout = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"].$[\"rdf:about\"];",
													"var resourceAboutSplit = resrouceAbout.split(\"/\");",
													"var requestId = resourceAboutSplit[resourceAboutSplit.length-1];",
													"pm.globals.set('requestId', requestId);",
													"",
													"",
													"pm.globals.set(\"waitCounter\", 0);",
													"pm.test(\"Response code should be 201 (created)\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"",
													"pm.test(\"AutomationRequest state should be #inProgress\", function () {",
													"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#new\\\"/>\");",
													"    pm.expect(pm.response.text()).to.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#inProgress\\\"/>\");",
													"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#complete\\\"/>\");",
													"});",
													"",
													"",
													"pm.test(\"desired state should be #complete \", function () {",
													"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:desiredState rdf:resource=\\\"http://open-services.net/ns/auto#new\\\"/>\");",
													"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:desiredState rdf:resource=\\\"http://open-services.net/ns/auto#inProgress\\\"/>\");",
													"    pm.expect(pm.response.text()).to.include(\"oslc_auto:desiredState rdf:resource=\\\"http://open-services.net/ns/auto#complete\\\"/>\");",
													"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:desiredState rdf:resource=\\\"http://open-services.net/ns/auto#canceled\\\"/>\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{server_address}}/{{server_context}}/services/resources/automationPlans/dummy\" />\n\t<dcterms:title>before update title</dcterms:title>\n\t<dcterms:description>before update description</dcterms:description>\n\t<dcterms:creator rdf:resource=\"http://before_update_creator\"/>\n\t<dcterms:contributor rdf:resource=\"http://before_update_contributor\"/>\n\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>arguments</oslc:name>\n\t\t\t<rdf:value>before update argument value</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>SUT</oslc:name>\n\t\t\t<rdf:value>{{SUT}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>",
											"options": {
												"raw": {
													"language": "xml"
												}
											}
										},
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/resources/createAutomationRequest",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"resources",
												"createAutomationRequest"
											]
										}
									},
									"response": []
								},
								{
									"name": "wait for #complete (analysis/resoruce update/contribution/normal update)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var timeoutSeconds = pm.collectionVariables.get('automation_wait_time');",
													"",
													"var waitCounter = pm.globals.get(\"waitCounter\");",
													"if(!waitCounter) {",
													"    waitCounter = 0;",
													"}",
													"",
													"if (pm.response.code != 200) { // wait for the resource to be created",
													"    if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
													"        setTimeout(function(){}, [1000]); // 1 second",
													"        waitCounter++;",
													"        postman.setNextRequest(pm.info.requestName);",
													"    } else { // timeout, reset counter",
													"        waitCounter = 0;",
													"    }",
													"} else { // wait for the automation to complete",
													"    const response = xml2Json(pm.response.text());",
													"    var state = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"][\"oslc_auto:state\"].$[\"rdf:resource\"];",
													"    if (state == \"http://open-services.net/ns/auto#inProgress\") {",
													"        if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
													"            setTimeout(function(){}, [1000]); // 1 second",
													"            waitCounter++;",
													"            postman.setNextRequest(pm.info.requestName);",
													"        } else { // timeout, reset counter",
													"            waitCounter = 0;",
													"        }",
													"    } else { // wait doen, reset counter",
													"            waitCounter = 0;",
													"    }",
													"}",
													"",
													"pm.globals.set(\"waitCounter\", waitCounter);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/resources/automationRequests/{{requestId}}",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"resources",
												"automationRequests",
												"{{requestId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "check the contribution result before update",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// get global variable to use in this test",
													"var requestId = pm.globals.get('requestId');",
													"var serverAddr = pm.variables.get(\"server_address\");",
													"var server_context = pm.variables.get(\"server_context\");",
													"var AutomationPlanId = pm.variables.get(\"AutomationPlanId\");",
													"var test_arguments = pm.variables.get(\"arguments\");",
													"var SUT = pm.variables.get(\"SUT\");",
													"",
													"",
													"pm.test(\"Response code should be 200 (OK)\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// pass the response body to the update request after this one",
													"pm.globals.set('responseBody', pm.response.text());",
													"",
													"pm.test(\"check title\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"stdout</dcterms:title>\");",
													"});",
													"pm.test(\"check description\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"Standard output of the analysis.\");",
													"});",
													"pm.test(\"check filePath\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"stdout_analysis_\" + requestId + \"</fit:filePath>\");",
													"});",
													"pm.test(\"check value type\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"oslc:valueType rdf:resource=\\\"http://www.w3.org/2001/XMLSchema#string\\\"\");",
													"});",
													"pm.test(\"checkvalue\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"<rdf:value>Dummy tool!\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/resources/contributions/{{requestId}}-stdout",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"resources",
												"contributions",
												"{{requestId}}-stdout"
											]
										}
									},
									"response": []
								},
								{
									"name": "update",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response code should be 200 (OK)\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var requestBody = pm.globals.get('responseBody');\r",
													"var requestId = pm.globals.get('requestId');\r",
													"\r",
													"// modify some properties\r",
													"requestBody = requestBody.replace(\"stdout</dcterms:title>\", \"after update title</dcterms:title>\");\r",
													"requestBody = requestBody.replace(\"Standard output of the analysis.\", \"after update description\");\r",
													"requestBody = requestBody.replace(\"stdout_analysis_\" + requestId + \"</fit:filePath>\", \"after_update_file_path</fit:filePath>\");\r",
													"requestBody = requestBody.replace(\"oslc:valueType rdf:resource=\\\"http://www.w3.org/2001/XMLSchema#string\\\"\", \"oslc:valueType rdf:resource=\\\"http://after.update.value.type\\\"\");\r",
													"requestBody = requestBody.replace(\"<rdf:value>Dummy tool!\", \"<rdf:value>after update value\");\r",
													"\r",
													"\r",
													"pm.globals.set('requestBody', requestBody);\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "xml"
												}
											}
										},
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/resources/contributions/{{requestId}}-stdout",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"resources",
												"contributions",
												"{{requestId}}-stdout"
											]
										}
									},
									"response": []
								},
								{
									"name": "check the contribution after update",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// get global variable to use in this test",
													"var requestId = pm.globals.get('requestId');",
													"var serverAddr = pm.variables.get(\"server_address\");",
													"var server_context = pm.variables.get(\"server_context\");",
													"var AutomationPlanId = pm.variables.get(\"AutomationPlanId\");",
													"var test_arguments = pm.variables.get(\"arguments\");",
													"var SUT = pm.variables.get(\"SUT\");",
													"",
													"",
													"pm.test(\"Response code should be 200 (OK)\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"check title\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"after update title</dcterms:title>\");",
													"    pm.expect(pm.response.text()).to.not.include(\"stdout</dcterms:title>\");",
													"});",
													"pm.test(\"check description\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"after update description\");",
													"    pm.expect(pm.response.text()).to.not.include(\"Standard output of the analysis.\");",
													"});",
													"pm.test(\"check filePath\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"after_update_file_path</fit:filePath>\");",
													"    pm.expect(pm.response.text()).to.not.include(\"stdout_analysis_\" + requestId + \"</fit:filePath>\");",
													"});",
													"pm.test(\"check value type\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"oslc:valueType rdf:resource=\\\"http://after.update.value.type\\\"\");",
													"    pm.expect(pm.response.text()).to.not.include(\"oslc:valueType rdf:resource=\\\"http://www.w3.org/2001/XMLSchema#string\\\"\");",
													"});",
													"pm.test(\"checkvalue\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"<rdf:value>after update value\");",
													"    pm.expect(pm.response.text()).to.not.include(\"<rdf:value>Dummy tool!\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/resources/contributions/{{requestId}}-stdout",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"resources",
												"contributions",
												"{{requestId}}-stdout"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "error update",
							"item": [
								{
									"name": "create a request",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"",
													"pm.test(\"Response code should be 201 (created)\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"",
													"// save the request ID as a global variable for later tests to use",
													"const response = xml2Json(pm.response.text());",
													"var resrouceAbout = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"].$[\"rdf:about\"];",
													"var resourceAboutSplit = resrouceAbout.split(\"/\");",
													"var requestId = resourceAboutSplit[resourceAboutSplit.length-1];",
													"pm.globals.set('requestId', requestId);",
													"",
													"",
													"pm.globals.set(\"waitCounter\", 0);",
													"pm.test(\"Response code should be 201 (created)\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"",
													"pm.test(\"AutomationRequest state should be #inProgress\", function () {",
													"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#new\\\"/>\");",
													"    pm.expect(pm.response.text()).to.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#inProgress\\\"/>\");",
													"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#complete\\\"/>\");",
													"});",
													"",
													"",
													"pm.test(\"desired state should be #complete \", function () {",
													"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:desiredState rdf:resource=\\\"http://open-services.net/ns/auto#new\\\"/>\");",
													"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:desiredState rdf:resource=\\\"http://open-services.net/ns/auto#inProgress\\\"/>\");",
													"    pm.expect(pm.response.text()).to.include(\"oslc_auto:desiredState rdf:resource=\\\"http://open-services.net/ns/auto#complete\\\"/>\");",
													"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:desiredState rdf:resource=\\\"http://open-services.net/ns/auto#canceled\\\"/>\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{server_address}}/{{server_context}}/services/resources/automationPlans/dummy\" />\n\t<dcterms:title>before update title</dcterms:title>\n\t<dcterms:description>before update description</dcterms:description>\n\t<dcterms:creator rdf:resource=\"http://before_update_creator\"/>\n\t<dcterms:contributor rdf:resource=\"http://before_update_contributor\"/>\n\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>arguments</oslc:name>\n\t\t\t<rdf:value>before update argument value</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>SUT</oslc:name>\n\t\t\t<rdf:value>{{SUT}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>",
											"options": {
												"raw": {
													"language": "xml"
												}
											}
										},
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/resources/createAutomationRequest",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"resources",
												"createAutomationRequest"
											]
										}
									},
									"response": []
								},
								{
									"name": "wait for #complete (analysis/resoruce update/contribution/error update)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var timeoutSeconds = pm.collectionVariables.get('automation_wait_time');",
													"",
													"var waitCounter = pm.globals.get(\"waitCounter\");",
													"if(!waitCounter) {",
													"    waitCounter = 0;",
													"}",
													"",
													"if (pm.response.code != 200) { // wait for the resource to be created",
													"    if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
													"        setTimeout(function(){}, [1000]); // 1 second",
													"        waitCounter++;",
													"        postman.setNextRequest(pm.info.requestName);",
													"    } else { // timeout, reset counter",
													"        waitCounter = 0;",
													"    }",
													"} else { // wait for the automation to complete",
													"    const response = xml2Json(pm.response.text());",
													"    var state = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"][\"oslc_auto:state\"].$[\"rdf:resource\"];",
													"    if (state == \"http://open-services.net/ns/auto#inProgress\") {",
													"        if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
													"            setTimeout(function(){}, [1000]); // 1 second",
													"            waitCounter++;",
													"            postman.setNextRequest(pm.info.requestName);",
													"        } else { // timeout, reset counter",
													"            waitCounter = 0;",
													"        }",
													"    } else { // wait doen, reset counter",
													"            waitCounter = 0;",
													"    }",
													"}",
													"",
													"pm.globals.set(\"waitCounter\", waitCounter);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/resources/automationRequests/{{requestId}}",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"resources",
												"automationRequests",
												"{{requestId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "check the contribution result before update",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// get global variable to use in this test",
													"var requestId = pm.globals.get('requestId');",
													"var serverAddr = pm.variables.get(\"server_address\");",
													"var server_context = pm.variables.get(\"server_context\");",
													"var AutomationPlanId = pm.variables.get(\"AutomationPlanId\");",
													"var test_arguments = pm.variables.get(\"arguments\");",
													"var SUT = pm.variables.get(\"SUT\");",
													"",
													"",
													"pm.test(\"Response code should be 200 (OK)\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"// pass the response body to the update request after this one",
													"pm.globals.set('responseBody', pm.response.text());",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/resources/contributions/{{requestId}}-stdout",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"resources",
												"contributions",
												"{{requestId}}-stdout"
											]
										}
									},
									"response": []
								},
								{
									"name": "illegal file path (security)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response code should be 500 (internal error)\", function () {",
													"    pm.response.to.have.status(500);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var requestBody = pm.globals.get('responseBody');\r",
													"var requestId = pm.globals.get('requestId');\r",
													"\r",
													"// modify some properties\r",
													"requestBody = requestBody.replace(new RegExp(\"SUT\", 'g'), \"insecure_file_path\");\r",
													"\r",
													"pm.globals.set('requestBody', requestBody);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{requestBody}}",
											"options": {
												"raw": {
													"language": "xml"
												}
											}
										},
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/resources/contributions/{{requestId}}-stdout",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"resources",
												"contributions",
												"{{requestId}}-stdout"
											]
										}
									},
									"response": []
								},
								{
									"name": "sending an empty update",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response code should be 400 (bad request)\", function () {",
													"    pm.response.to.have.status(400);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											},
											{
												"key": "Content-Type",
												"value": "application/rdf+xml",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\r\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\r\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\r\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\r\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\r\n\r\n</rdf:RDF>",
											"options": {
												"raw": {
													"language": "xml"
												}
											}
										},
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/resources/contributions/{{requestId}}-stdout",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"resources",
												"contributions",
												"{{requestId}}-stdout"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "Query Capability",
			"item": [
				{
					"name": "pre init some resources",
					"item": [
						{
							"name": "create SUT using the compilation provider",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// save the request ID as a global variable for later tests to use -- used as SUT ID",
											"const response = xml2Json(pm.response.text());",
											"var resrouceAbout = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"].$[\"rdf:about\"];",
											"var resourceAboutSplit = resrouceAbout.split(\"/\");",
											"var requestId = resourceAboutSplit[resourceAboutSplit.length-1];",
											"pm.globals.set('requestId', requestId);",
											"",
											"",
											"pm.test(\"Response code should be 201 (created)\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"var compilation_provider = pm.variables.get(\"compilation_provider\");",
											"var sutId = requestId;",
											"pm.globals.set(\"SUT\", compilation_provider + \"/services/resources/sUTs/\" + sutId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/xml"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>analysis test</dcterms:title>\n\t<dcterms:description>analysis test</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{compilation_provider}}/services/resources/automationPlans/0\" />\n\t\n\t<oslc_auto:inputParameter>\n        <oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>sourceBase64</oslc:name>\n\t\t\t<rdf:value>TestEchoProgram.cpp\nI2luY2x1ZGUgPHN0ZGlvLmg+CgppbnQgbWFpbihpbnQgYXJnYywgY2hhcioqIGFyZ3YpCnsKCXByaW50ZigiJXNcbiIsIGFyZ3ZbMV0pOwoJcmV0dXJuIDA7Cn0K</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>buildCommand</oslc:name>\n\t\t\t<rdf:value>gcc -g TestEchoProgram.cpp -o my_echo</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>launchCommand</oslc:name>\n\t\t\t<rdf:value>./my_echo</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>"
								},
								"url": {
									"raw": "{{compilation_provider}}/services/resources/createAutomationRequest",
									"host": [
										"{{compilation_provider}}"
									],
									"path": [
										"services",
										"resources",
										"createAutomationRequest"
									]
								}
							},
							"response": []
						},
						{
							"name": "create AutomationRequest",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// setup global variables for future requests (GETs)",
											"// attempt to make this sequence of requests into a template that can then be change in this place to change the test",
											"",
											"pm.globals.set(\"AutomationPlanId\", \"dummy\");",
											"",
											"pm.globals.set(\"arguments\", \"test_arguments\");",
											"",
											"pm.globals.set(\"reqCreator\", \"https://pajda.fit.vutbr.cz/xvasic\");",
											"pm.globals.set(\"reqTitle\", \"Test title\");",
											"pm.globals.set(\"reqDescription\", \"Test description\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/xml"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>special title for search term query</dcterms:title>\n\t<dcterms:description>{{reqDescription}}</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{server_address}}/{{server_context}}/services/resources/automationPlans/{{AutomationPlanId}}\" />\n\t<dcterms:creator rdf:resource=\"{{reqCreator}}\"/>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>arguments</oslc:name>\n\t\t\t<rdf:value>{{arguments}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>SUT</oslc:name>\n\t\t\t<rdf:value>{{SUT}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>"
								},
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/resources/createAutomationRequest",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"resources",
										"createAutomationRequest"
									]
								}
							},
							"response": []
						},
						{
							"name": "create AutomationRequest Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/xml"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>special title for search term query</dcterms:title>\n\t<dcterms:description>{{reqDescription}}</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{server_address}}/{{server_context}}/services/resources/automationPlans/{{AutomationPlanId}}\" />\n\t<dcterms:creator rdf:resource=\"{{reqCreator}}\"/>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>arguments</oslc:name>\n\t\t\t<rdf:value>{{arguments}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>SUT</oslc:name>\n\t\t\t<rdf:value>{{SUT}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>"
								},
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/resources/createAutomationRequest",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"resources",
										"createAutomationRequest"
									]
								}
							},
							"response": []
						},
						{
							"name": "create AutomationRequest Copy 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/xml"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>special title for search term query</dcterms:title>\n\t<dcterms:description>{{reqDescription}}</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{server_address}}/{{server_context}}/services/resources/automationPlans/{{AutomationPlanId}}\" />\n\t<dcterms:creator rdf:resource=\"{{reqCreator}}\"/>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>arguments</oslc:name>\n\t\t\t<rdf:value>{{arguments}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>SUT</oslc:name>\n\t\t\t<rdf:value>{{SUT}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>"
								},
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/resources/createAutomationRequest",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"resources",
										"createAutomationRequest"
									]
								}
							},
							"response": []
						},
						{
							"name": "create AutomationRequest Copy 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/xml"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>special title for search term query</dcterms:title>\n\t<dcterms:description>{{reqDescription}}</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{server_address}}/{{server_context}}/services/resources/automationPlans/{{AutomationPlanId}}\" />\n\t<dcterms:creator rdf:resource=\"{{reqCreator}}\"/>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>arguments</oslc:name>\n\t\t\t<rdf:value>{{arguments}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>SUT</oslc:name>\n\t\t\t<rdf:value>{{SUT}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>"
								},
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/resources/createAutomationRequest",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"resources",
										"createAutomationRequest"
									]
								}
							},
							"response": []
						},
						{
							"name": "create AutomationRequest Copy 4",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/xml"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>special title for search term query</dcterms:title>\n\t<dcterms:description>{{reqDescription}}</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{server_address}}/{{server_context}}/services/resources/automationPlans/{{AutomationPlanId}}\" />\n\t<dcterms:creator rdf:resource=\"{{reqCreator}}\"/>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>arguments</oslc:name>\n\t\t\t<rdf:value>{{arguments}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>SUT</oslc:name>\n\t\t\t<rdf:value>{{SUT}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>"
								},
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/resources/createAutomationRequest",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"resources",
										"createAutomationRequest"
									]
								}
							},
							"response": []
						},
						{
							"name": "create AutomationRequest Copy 5",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/xml"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>special title for search term query</dcterms:title>\n\t<dcterms:description>{{reqDescription}}</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{server_address}}/{{server_context}}/services/resources/automationPlans/{{AutomationPlanId}}\" />\n\t<dcterms:creator rdf:resource=\"{{reqCreator}}\"/>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>arguments</oslc:name>\n\t\t\t<rdf:value>{{arguments}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>SUT</oslc:name>\n\t\t\t<rdf:value>{{SUT}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>"
								},
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/resources/createAutomationRequest",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"resources",
										"createAutomationRequest"
									]
								}
							},
							"response": []
						},
						{
							"name": "create AutomationRequest Copy 6",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/xml"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>special title for search term query</dcterms:title>\n\t<dcterms:description>{{reqDescription}}</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{server_address}}/{{server_context}}/services/resources/automationPlans/{{AutomationPlanId}}\" />\n\t<dcterms:creator rdf:resource=\"{{reqCreator}}\"/>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>arguments</oslc:name>\n\t\t\t<rdf:value>{{arguments}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>SUT</oslc:name>\n\t\t\t<rdf:value>{{SUT}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>"
								},
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/resources/createAutomationRequest",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"resources",
										"createAutomationRequest"
									]
								}
							},
							"response": []
						},
						{
							"name": "create AutomationRequest Copy 7",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/xml"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>special title for search term query</dcterms:title>\n\t<dcterms:description>{{reqDescription}}</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{server_address}}/{{server_context}}/services/resources/automationPlans/{{AutomationPlanId}}\" />\n\t<dcterms:creator rdf:resource=\"{{reqCreator}}\"/>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>arguments</oslc:name>\n\t\t\t<rdf:value>{{arguments}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>SUT</oslc:name>\n\t\t\t<rdf:value>{{SUT}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>"
								},
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/resources/createAutomationRequest",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"resources",
										"createAutomationRequest"
									]
								}
							},
							"response": []
						},
						{
							"name": "create AutomationRequest Copy 8",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/xml"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>special title for search term query</dcterms:title>\n\t<dcterms:description>{{reqDescription}}</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{server_address}}/{{server_context}}/services/resources/automationPlans/{{AutomationPlanId}}\" />\n\t<dcterms:creator rdf:resource=\"{{reqCreator}}\"/>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>arguments</oslc:name>\n\t\t\t<rdf:value>{{arguments}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>SUT</oslc:name>\n\t\t\t<rdf:value>{{SUT}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>"
								},
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/resources/createAutomationRequest",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"resources",
										"createAutomationRequest"
									]
								}
							},
							"response": []
						},
						{
							"name": "create AutomationRequest Copy 9",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/xml"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>special title for search term query</dcterms:title>\n\t<dcterms:description>{{reqDescription}}</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{server_address}}/{{server_context}}/services/resources/automationPlans/{{AutomationPlanId}}\" />\n\t<dcterms:creator rdf:resource=\"{{reqCreator}}\"/>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>arguments</oslc:name>\n\t\t\t<rdf:value>{{arguments}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>SUT</oslc:name>\n\t\t\t<rdf:value>{{SUT}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>"
								},
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/resources/createAutomationRequest",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"resources",
										"createAutomationRequest"
									]
								}
							},
							"response": []
						},
						{
							"name": "create AutomationRequest Copy 10",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/xml"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>special title for search term query</dcterms:title>\n\t<dcterms:description>{{reqDescription}}</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{server_address}}/{{server_context}}/services/resources/automationPlans/{{AutomationPlanId}}\" />\n\t<dcterms:creator rdf:resource=\"{{reqCreator}}\"/>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>arguments</oslc:name>\n\t\t\t<rdf:value>{{arguments}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>SUT</oslc:name>\n\t\t\t<rdf:value>{{SUT}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>"
								},
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/resources/createAutomationRequest",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"resources",
										"createAutomationRequest"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Query parameters",
					"item": [
						{
							"name": "limit",
							"item": [
								{
									"name": "query no limit",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var requestId = pm.globals.get('requestId');",
													"",
													"pm.test(\"Response code should be 200 (OK)\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Check the query result\", function () {",
													"    pm.expect(pm.response.text()).to.not.include(\">0</oslc:totalCount>\");",
													"    pm.expect(pm.response.text()).to.not.include(\">1</oslc:totalCount>\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/rdf+xml",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/resources/queryAutomationResult",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"resources",
												"queryAutomationResult"
											]
										}
									},
									"response": []
								},
								{
									"name": "query with limit",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var requestId = pm.globals.get('requestId');",
													"",
													"pm.test(\"Response code should be 200 (OK)\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Check the query result\", function () {",
													"    pm.expect(pm.response.text()).to.include(\">1</oslc:totalCount>\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/resources/queryAutomationResult?limit=1",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"resources",
												"queryAutomationResult"
											],
											"query": [
												{
													"key": "limit",
													"value": "1"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "page",
							"item": [
								{
									"name": "query no page",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var requestId = pm.globals.get('requestId');",
													"",
													"pm.test(\"Response code should be 200 (OK)\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Check the query result\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"<dcterms:identifier>dummy</dcterms:identifier>\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/resources/queryAutomationPlan",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"resources",
												"queryAutomationPlan"
											]
										}
									},
									"response": []
								},
								{
									"name": "query with page",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var requestId = pm.globals.get('requestId');",
													"",
													"pm.test(\"Response code should be 200 (OK)\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Check the query result\", function () {",
													"    pm.expect(pm.response.text()).to.not.include(\"Dummy Tool\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/resources/queryAutomationPlan?page=1",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"resources",
												"queryAutomationPlan"
											],
											"query": [
												{
													"key": "page",
													"value": "1"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "where",
							"item": [
								{
									"name": "query with where",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response code should be 200 (OK)\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Check the query result\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"<dcterms:identifier>dummy</dcterms:identifier>\");",
													"    pm.expect(pm.response.text()).to.include(\">1</oslc:totalCount>\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/resources/queryAutomationPlan?oslc.prefix=dcterms=<http://purl.org/dc/terms/>&oslc.where=dcterms:identifier=\"dummy\"",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"resources",
												"queryAutomationPlan"
											],
											"query": [
												{
													"key": "oslc.prefix",
													"value": "dcterms=<http://purl.org/dc/terms/>"
												},
												{
													"key": "oslc.where",
													"value": "dcterms:identifier=\"dummy\""
												}
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "query AutomationPlans",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response code should be 200 (OK)\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"The result should not be empty\", function () {",
									"    pm.expect(pm.response.text()).to.not.include(\">0</oslc:totalCount>\");",
									"});",
									"",
									"pm.test(\"The result should contain AutomationPlans resources\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"oslc_auto:AutomationPlan\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/rdf+xml"
							}
						],
						"url": {
							"raw": "{{server_address}}/{{server_context}}/services/resources/queryAutomationPlan",
							"host": [
								"{{server_address}}"
							],
							"path": [
								"{{server_context}}",
								"services",
								"resources",
								"queryAutomationPlan"
							],
							"query": [
								{
									"key": "oslc.prefix",
									"value": "dcterms=<http://purl.org/dc/terms/>",
									"disabled": true
								},
								{
									"key": "oslc.where",
									"value": "dcterms:identifier=\"0\"",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "query AutomationRequests",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var requestId = pm.globals.get('requestId');",
									"",
									"pm.test(\"Response code should be 200 (OK)\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"The result should not be empty\", function () {",
									"    pm.expect(pm.response.text()).to.not.include(\">0</oslc:totalCount>\");",
									"});",
									"",
									"pm.test(\"The result should contain AutomationRequest resources\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"oslc_auto:AutomationRequest\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/rdf+xml",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{server_address}}/{{server_context}}/services/resources/queryAutomationRequest",
							"host": [
								"{{server_address}}"
							],
							"path": [
								"{{server_context}}",
								"services",
								"resources",
								"queryAutomationRequest"
							]
						}
					},
					"response": []
				},
				{
					"name": "query AutomationResults",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var requestId = pm.globals.get('requestId');",
									"",
									"pm.test(\"Response code should be 200 (OK)\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"The result should not be empty\", function () {",
									"    pm.expect(pm.response.text()).to.not.include(\">0</oslc:totalCount>\");",
									"});",
									"",
									"pm.test(\"The result should contain AutomationResult resources\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"oslc_auto:AutomationResult\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/rdf+xml",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{server_address}}/{{server_context}}/services/resources/queryAutomationResult",
							"host": [
								"{{server_address}}"
							],
							"path": [
								"{{server_context}}",
								"services",
								"resources",
								"queryAutomationResult"
							]
						}
					},
					"response": []
				},
				{
					"name": "query Contributions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var requestId = pm.globals.get('requestId');",
									"",
									"pm.test(\"Response code should be 200 (OK)\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"The result should not be empty\", function () {",
									"    pm.expect(pm.response.text()).to.not.include(\">0</oslc:totalCount>\");",
									"});",
									"",
									"pm.test(\"The result should contain Contribution resources\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"oslc_auto:Contribution\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/rdf+xml"
							}
						],
						"url": {
							"raw": "{{server_address}}/{{server_context}}/services/resources/queryContribution",
							"host": [
								"{{server_address}}"
							],
							"path": [
								"{{server_context}}",
								"services",
								"resources",
								"queryContribution"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "basic",
		"basic": [
			{
				"key": "password",
				"value": "{{password}}",
				"type": "string"
			},
			{
				"key": "username",
				"value": "{{username}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "server_address",
			"value": "http://localhost:8080"
		},
		{
			"key": "server_context",
			"value": "analysis"
		},
		{
			"key": "compilation_provider",
			"value": "http://localhost:8081/compilation"
		},
		{
			"key": "username",
			"value": "user"
		},
		{
			"key": "password",
			"value": "user"
		},
		{
			"key": "automation_wait_time",
			"value": "30"
		},
		{
			"key": "internetAccess",
			"value": "true"
		}
	]
}