{
	"info": {
		"_postman_id": "f76ea05f-b7d7-4f85-bda7-a5ec25d3fb43",
		"name": "Analysis Tests - Tools",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "7000912"
	},
	"item": [
		{
			"name": "anaconda",
			"item": [
				{
					"name": "create SUT using the compilation provider",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// save the request ID as a global variable for later tests to use -- used as SUT ID",
									"const response = xml2Json(pm.response.text());",
									"var resrouceAbout = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"].$[\"rdf:about\"];",
									"var resourceAboutSplit = resrouceAbout.split(\"/\");",
									"var requestId = resourceAboutSplit[resourceAboutSplit.length-1];",
									"pm.globals.set('requestId', requestId);",
									"",
									"",
									"pm.test(\"Response code should be 201 (created)\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"var compilation_provider = pm.variables.get(\"compilation_provider\");",
									"var sutId = requestId;",
									"pm.globals.set(\"SUT\", compilation_provider + \"/services/resources/sUTs/\" + sutId);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/xml"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/rdf+xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>analysis test</dcterms:title>\n\t<dcterms:description>analysis test</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{compilation_provider}}/services/resources/automationPlans/0\" />\n\t\n\t<oslc_auto:inputParameter>\n        <oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>sourceFilePath</oslc:name>\n\t\t\t<rdf:value>./tests/resources/bank.zip</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n        <oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>unpackZip</oslc:name>\n\t\t\t<rdf:value>true</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>buildCommand</oslc:name>\n\t\t\t<rdf:value>make</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>launchCommand</oslc:name>\n\t\t\t<rdf:value>./bank</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>"
						},
						"url": {
							"raw": "{{compilation_provider}}/services/resources/createAutomationRequest",
							"host": [
								"{{compilation_provider}}"
							],
							"path": [
								"services",
								"resources",
								"createAutomationRequest"
							]
						}
					},
					"response": []
				},
				{
					"name": "wait for #complete (analysis tools/anaconda/create sut)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var timeoutSeconds = pm.collectionVariables.get('automation_wait_time');",
									"",
									"var waitCounter = pm.globals.get(\"waitCounter\");",
									"if(!waitCounter) {",
									"    waitCounter = 0;",
									"}",
									"",
									"if (pm.response.code != 200) { // wait for the resource to be created",
									"    if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
									"        setTimeout(function(){}, [1000]); // 1 second",
									"        waitCounter++;",
									"        postman.setNextRequest(pm.info.requestName);",
									"    } else { // timeout, reset counter",
									"        waitCounter = 0;",
									"    }",
									"} else { // wait for the automation to complete",
									"    const response = xml2Json(pm.response.text());",
									"    var state = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"][\"oslc_auto:state\"].$[\"rdf:resource\"];",
									"    if (state == \"http://open-services.net/ns/auto#inProgress\") {",
									"        if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
									"            setTimeout(function(){}, [1000]); // 1 second",
									"            waitCounter++;",
									"            postman.setNextRequest(pm.info.requestName);",
									"        } else { // timeout, reset counter",
									"            waitCounter = 0;",
									"        }",
									"    } else { // wait doen, reset counter",
									"            waitCounter = 0;",
									"    }",
									"}",
									"",
									"pm.globals.set(\"waitCounter\", waitCounter);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/rdf+xml"
							}
						],
						"url": {
							"raw": "{{compilation_provider}}/services/resources/automationRequests/{{requestId}}",
							"host": [
								"{{compilation_provider}}"
							],
							"path": [
								"services",
								"resources",
								"automationRequests",
								"{{requestId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "predefined AutomationPlan",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var analysis_provider = pm.variables.get(\"analysis_provider\");",
									"",
									"pm.test(\"Response code should be 200 (OK)\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response body should contain an AutomationPlan (id:anaconda)\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"oslc_auto:AutomationPlan rdf:about=\\\"\" + analysis_provider + \"/services/resources/automationPlans/anaconda\");",
									"});",
									"pm.test(\"AutomationPlan should contain a dcterms:title property\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"<dcterms:title\");",
									"});",
									"pm.test(\"AutomationPlan should contain a dcterms:created property\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"<dcterms:created\");",
									"});",
									"pm.test(\"AutomationPlan should contain a dcterms:modified property\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"<dcterms:modified\");",
									"});",
									"pm.test(\"AutomationPlan should contain a <dcterms:creator property\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"<dcterms:creator\");",
									"});",
									"pm.test(\"AutomationPlan should contain a analyser parameter definition\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"<oslc:name>analyser</oslc:name>\");",
									"});",
									"pm.test(\"AutomationPlan should contain a SUT parameter definition\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"<oslc:name>SUT</oslc:name>\");",
									"});",
									"pm.test(\"AutomationPlan should contain a executionParameters parameter definition\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"<oslc:name>executionParameters</oslc:name>\");",
									"});",
									"pm.test(\"AutomationPlan should contain a launchSUT parameter definition\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"<oslc:name>launchSUT</oslc:name>\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/rdf+xml"
							}
						],
						"url": {
							"raw": "{{analysis_provider}}/services/resources/automationPlans/anaconda",
							"host": [
								"{{analysis_provider}}"
							],
							"path": [
								"services",
								"resources",
								"automationPlans",
								"anaconda"
							]
						}
					},
					"response": []
				},
				{
					"name": "analyse",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response code should be 201 (created)\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"",
									"// save the request ID as a global variable for later tests to use",
									"const response = xml2Json(pm.response.text());",
									"var resrouceAbout = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"].$[\"rdf:about\"];",
									"var resourceAboutSplit = resrouceAbout.split(\"/\");",
									"var requestId = resourceAboutSplit[resourceAboutSplit.length-1];",
									"pm.globals.set('requestId', requestId);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/xml"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/rdf+xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>First prototype request</dcterms:title>\n\t<dcterms:description>Test</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{analysis_provider}}/services/resources/automationPlans/anaconda\" />\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>time</oslc:name>\n\t\t\t<rdf:value>true</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>run-type</oslc:name>\n\t\t\t<rdf:value>anaconda</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>config</oslc:name>\n\t\t\t<rdf:value>./anacondaConf</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>outputFilter</oslc:name>\n\t\t\t<rdf:value>AnacondaRaceDetection</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>confDir</oslc:name>\n\t\t\t<rdf:value>anacondaConf\</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>analyser</oslc:name>\n\t\t\t<rdf:value>fasttrack2</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>executionParameters</oslc:name>\n\t\t\t<rdf:value>\"Hello World!\"</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>SUT</oslc:name>\n\t\t\t<rdf:value>{{SUT}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>"
						},
						"url": {
							"raw": "{{analysis_provider}}/services/resources/createAutomationRequest",
							"host": [
								"{{analysis_provider}}"
							],
							"path": [
								"services",
								"resources",
								"createAutomationRequest"
							]
						}
					},
					"response": []
				},
				{
					"name": "wait for #complete (analysis tools/anaconda/analyse)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var timeoutSeconds = pm.collectionVariables.get('automation_wait_time');",
									"",
									"var waitCounter = pm.globals.get(\"waitCounter\");",
									"if(!waitCounter) {",
									"    waitCounter = 0;",
									"}",
									"",
									"if (pm.response.code != 200) { // wait for the resource to be created",
									"    if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
									"        setTimeout(function(){}, [1000]); // 1 second",
									"        waitCounter++;",
									"        postman.setNextRequest(pm.info.requestName);",
									"    } else { // timeout, reset counter",
									"        waitCounter = 0;",
									"    }",
									"} else { // wait for the automation to complete",
									"    const response = xml2Json(pm.response.text());",
									"    var state = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"][\"oslc_auto:state\"].$[\"rdf:resource\"];",
									"    if (state == \"http://open-services.net/ns/auto#inProgress\") {",
									"        if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
									"            setTimeout(function(){}, [1000]); // 1 second",
									"            waitCounter++;",
									"            postman.setNextRequest(pm.info.requestName);",
									"        } else { // timeout, reset counter",
									"            waitCounter = 0;",
									"        }",
									"    } else { // wait doen, reset counter",
									"            waitCounter = 0;",
									"    }",
									"}",
									"",
									"pm.globals.set(\"waitCounter\", waitCounter);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/rdf+xml"
							}
						],
						"url": {
							"raw": "{{analysis_provider}}/services/resources/automationRequests/{{requestId}}",
							"host": [
								"{{analysis_provider}}"
							],
							"path": [
								"services",
								"resources",
								"automationRequests",
								"{{requestId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "check result",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// get global variable to use in this test",
									"var requestId = pm.globals.get('requestId');",
									"var analysis_provider = pm.variables.get(\"analysis_provider\");",
									"var AutomationPlanId = pm.variables.get(\"AutomationPlanId\");",
									"var analyser = pm.variables.get(\"analyser\");",
									"var executionParameters= pm.variables.get(\"executionParameters\");",
									"var SUT = pm.variables.get(\"SUT\");",
									"",
									"",
									"pm.test(\"Response code should be 200 (OK)\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"AutomationResult state should be #complete\", function () {",
									"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#new\\\"/>\");",
									"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#inProgress\\\"/>\");",
									"    pm.expect(pm.response.text()).to.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#complete\\\"/>\");",
									"});",
									"pm.test(\"AutomationResult verdict should be #passed\", function () {",
									"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:verdict rdf:resource=\\\"http://open-services.net/ns/auto#unavailable\\\"/>\");",
									"    pm.expect(pm.response.text()).to.include(\"oslc_auto:verdict rdf:resource=\\\"http://open-services.net/ns/auto#passed\\\"/>\");",
									"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#error\\\"/>\");",
									"});",
									"",
									"pm.test(\"AutomationResult statusMessage should have the expected value\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Analysis completed successfully\");",
									"});",
									"pm.test(\"the expected string should be executed\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"tools/run.sh\");",
									"    pm.expect(pm.response.text()).to.include(\" --config ./anacondaConf \");",
									"    pm.expect(pm.response.text()).to.include(\" --run-type anaconda \");",
									"    pm.expect(pm.response.text()).to.include(\" --time \");",
									"    pm.expect(pm.response.text()).to.include(\" fasttrack2 ./bank\");",
									"});",
									"pm.test(\"returnCode should be 0\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"<rdf:value>0</rdf:value>\");",
									"});",
									"pm.test(\"AutomationResult analysis stdout should have the expected value\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"ANaConDA \");",
									"    pm.expect(pm.response.text()).to.include(\"Bank week started.\");",
									"    pm.expect(pm.response.text()).to.include(\"race detected on memory address\");",
									"});",
									"pm.test(\"should contain a data race detected contribution with value true\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"<rdf:value>true</rdf:value>\");",
									"    pm.expect(pm.response.text()).to.include(\"<dcterms:title rdf:parseType=\\\"Literal\\\">DataRaceDetected</dcterms:title>\");",
									"    pm.expect(pm.response.text()).to.include(\"user\");",
									"    pm.expect(pm.response.text()).to.include(\"system\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/rdf+xml"
							}
						],
						"url": {
							"raw": "{{analysis_provider}}/services/resources/automationResults/{{requestId}}",
							"host": [
								"{{analysis_provider}}"
							],
							"path": [
								"services",
								"resources",
								"automationResults",
								"{{requestId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "valgrind",
			"item": [
				{
					"name": "create SUT using the compilation provider",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// save the request ID as a global variable for later tests to use -- used as SUT ID",
									"const response = xml2Json(pm.response.text());",
									"var resrouceAbout = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"].$[\"rdf:about\"];",
									"var resourceAboutSplit = resrouceAbout.split(\"/\");",
									"var requestId = resourceAboutSplit[resourceAboutSplit.length-1];",
									"pm.globals.set('requestId', requestId);",
									"",
									"pm.test(\"Response code should be 201 (created)\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"var compilation_provider = pm.variables.get(\"compilation_provider\");",
									"var sutId = requestId;",
									"pm.globals.set(\"SUT\", compilation_provider + \"/services/resources/sUTs/\" + sutId);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/xml"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/rdf+xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>analysis test</dcterms:title>\n\t<dcterms:description>analysis test</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{compilation_provider}}/services/resources/automationPlans/0\" />\n\t\n\t<oslc_auto:inputParameter>\n        <oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>sourceBase64</oslc:name>\n\t\t\t<rdf:value>TestEchoProgram.cpp\nI2luY2x1ZGUgPHN0ZGlvLmg+CgppbnQgbWFpbihpbnQgYXJnYywgY2hhcioqIGFyZ3YpCnsKCXByaW50ZigiJXNcbiIsIGFyZ3ZbMV0pOwoJcmV0dXJuIDA7Cn0K</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>buildCommand</oslc:name>\n\t\t\t<rdf:value>gcc -g TestEchoProgram.cpp -o my_echo</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>launchCommand</oslc:name>\n\t\t\t<rdf:value>./my_echo</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>"
						},
						"url": {
							"raw": "{{compilation_provider}}/services/resources/createAutomationRequest",
							"host": [
								"{{compilation_provider}}"
							],
							"path": [
								"services",
								"resources",
								"createAutomationRequest"
							]
						}
					},
					"response": []
				},
				{
					"name": "wait for #complete (analysis tools/valgrind/create sut)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var timeoutSeconds = pm.collectionVariables.get('automation_wait_time');",
									"",
									"var waitCounter = pm.globals.get(\"waitCounter\");",
									"if(!waitCounter) {",
									"    waitCounter = 0;",
									"}",
									"",
									"if (pm.response.code != 200) { // wait for the resource to be created",
									"    if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
									"        setTimeout(function(){}, [1000]); // 1 second",
									"        waitCounter++;",
									"        postman.setNextRequest(pm.info.requestName);",
									"    } else { // timeout, reset counter",
									"        waitCounter = 0;",
									"    }",
									"} else { // wait for the automation to complete",
									"    const response = xml2Json(pm.response.text());",
									"    var state = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"][\"oslc_auto:state\"].$[\"rdf:resource\"];",
									"    if (state == \"http://open-services.net/ns/auto#inProgress\") {",
									"        if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
									"            setTimeout(function(){}, [1000]); // 1 second",
									"            waitCounter++;",
									"            postman.setNextRequest(pm.info.requestName);",
									"        } else { // timeout, reset counter",
									"            waitCounter = 0;",
									"        }",
									"    } else { // wait doen, reset counter",
									"            waitCounter = 0;",
									"    }",
									"}",
									"",
									"pm.globals.set(\"waitCounter\", waitCounter);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/rdf+xml"
							}
						],
						"url": {
							"raw": "{{compilation_provider}}/services/resources/automationRequests/{{requestId}}",
							"host": [
								"{{compilation_provider}}"
							],
							"path": [
								"services",
								"resources",
								"automationRequests",
								"{{requestId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "predefined AutomationPlan",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var analysis_provider = pm.variables.get(\"analysis_provider\");",
									"",
									"pm.test(\"Response code should be 200 (OK)\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response body should contain an AutomationPlan (id:valgrind)\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"oslc_auto:AutomationPlan rdf:about=\\\"\" + analysis_provider + \"/services/resources/automationPlans/valgrind\");",
									"});",
									"pm.test(\"AutomationPlan should contain a dcterms:title property\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"<dcterms:title\");",
									"});",
									"pm.test(\"AutomationPlan should contain a dcterms:created property\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"<dcterms:created\");",
									"});",
									"pm.test(\"AutomationPlan should contain a dcterms:modified property\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"<dcterms:modified\");",
									"});",
									"pm.test(\"AutomationPlan should contain a <dcterms:creator property\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"<dcterms:creator\");",
									"});",
									"pm.test(\"AutomationPlan should contain a tool parameter definition\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"<oslc:name>tool</oslc:name>\");",
									"});",
									"pm.test(\"AutomationPlan should contain a SUT parameter definition\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"<oslc:name>SUT</oslc:name>\");",
									"});",
									"pm.test(\"AutomationPlan should contain all the expected parameter definitions\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"<oslc:name>help</oslc:name>\");",
									"    pm.expect(pm.response.text()).to.include(\"<oslc:name>quiet</oslc:name>\");",
									"    pm.expect(pm.response.text()).to.include(\"<oslc:name>verbose</oslc:name>\");",
									"    pm.expect(pm.response.text()).to.include(\"<oslc:name>trace-children</oslc:name>\");",
									"    pm.expect(pm.response.text()).to.include(\"<oslc:name>verbose</oslc:name>\");",
									"    pm.expect(pm.response.text()).to.include(\"<oslc:name>child-silent-after-fork</oslc:name>\");",
									"    pm.expect(pm.response.text()).to.include(\"<oslc:name>vgdb</oslc:name>\");",
									"    pm.expect(pm.response.text()).to.include(\"<oslc:name>vgdb-error</oslc:name>\");",
									"    pm.expect(pm.response.text()).to.include(\"<oslc:name>time-stamp</oslc:name>\");",
									"    pm.expect(pm.response.text()).to.include(\"<oslc:name>log-fd</oslc:name>\");",
									"    // and more ....",
									"});",
									"pm.test(\"AutomationPlan should contain a launchSUT parameter definition\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"<oslc:name>launchSUT</oslc:name>\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/rdf+xml"
							}
						],
						"url": {
							"raw": "{{analysis_provider}}/services/resources/automationPlans/valgrind",
							"host": [
								"{{analysis_provider}}"
							],
							"path": [
								"services",
								"resources",
								"automationPlans",
								"valgrind"
							]
						}
					},
					"response": []
				},
				{
					"name": "analyse memcheck",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response code should be 201 (created)\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"",
									"// save the request ID as a global variable for later tests to use",
									"const response = xml2Json(pm.response.text());",
									"var resrouceAbout = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"].$[\"rdf:about\"];",
									"var resourceAboutSplit = resrouceAbout.split(\"/\");",
									"var requestId = resourceAboutSplit[resourceAboutSplit.length-1];",
									"pm.globals.set('requestId', requestId);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/xml"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/rdf+xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>First prototype request</dcterms:title>\n\t<dcterms:description>Test</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{analysis_provider}}/services/resources/automationPlans/valgrind\" />\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>executionParameters</oslc:name>\n\t\t\t<rdf:value>HelloWorld!</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>SUT</oslc:name>\n\t\t\t<rdf:value>{{SUT}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>"
						},
						"url": {
							"raw": "{{analysis_provider}}/services/resources/createAutomationRequest",
							"host": [
								"{{analysis_provider}}"
							],
							"path": [
								"services",
								"resources",
								"createAutomationRequest"
							]
						}
					},
					"response": []
				},
				{
					"name": "wait for #complete (analysis tools/valgrind/memcheck)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var timeoutSeconds = pm.collectionVariables.get('automation_wait_time');",
									"",
									"var waitCounter = pm.globals.get(\"waitCounter\");",
									"if(!waitCounter) {",
									"    waitCounter = 0;",
									"}",
									"",
									"if (pm.response.code != 200) { // wait for the resource to be created",
									"    if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
									"        setTimeout(function(){}, [1000]); // 1 second",
									"        waitCounter++;",
									"        postman.setNextRequest(pm.info.requestName);",
									"    } else { // timeout, reset counter",
									"        waitCounter = 0;",
									"    }",
									"} else { // wait for the automation to complete",
									"    const response = xml2Json(pm.response.text());",
									"    var state = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"][\"oslc_auto:state\"].$[\"rdf:resource\"];",
									"    if (state == \"http://open-services.net/ns/auto#inProgress\") {",
									"        if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
									"            setTimeout(function(){}, [1000]); // 1 second",
									"            waitCounter++;",
									"            postman.setNextRequest(pm.info.requestName);",
									"        } else { // timeout, reset counter",
									"            waitCounter = 0;",
									"        }",
									"    } else { // wait doen, reset counter",
									"            waitCounter = 0;",
									"    }",
									"}",
									"",
									"pm.globals.set(\"waitCounter\", waitCounter);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/rdf+xml"
							}
						],
						"url": {
							"raw": "{{analysis_provider}}/services/resources/automationRequests/{{requestId}}",
							"host": [
								"{{analysis_provider}}"
							],
							"path": [
								"services",
								"resources",
								"automationRequests",
								"{{requestId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "check result",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// get global variable to use in this test",
									"var requestId = pm.globals.get('requestId');",
									"var analysis_provider = pm.variables.get(\"analysis_provider\");",
									"var AutomationPlanId = pm.variables.get(\"AutomationPlanId\");",
									"var analyser = pm.variables.get(\"analyser\");",
									"var executionParameters= pm.variables.get(\"executionParameters\");",
									"var SUT = pm.variables.get(\"SUT\");",
									"",
									"",
									"pm.test(\"Response code should be 200 (OK)\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"AutomationResult desiredState should be #complete\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"oslc_auto:desiredState rdf:resource=\\\"http://open-services.net/ns/auto#complete\\\"/>\");",
									"});",
									"",
									"pm.test(\"AutomationResult state should be #complete\", function () {",
									"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#new\\\"/>\");",
									"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#inProgress\\\"/>\");",
									"    pm.expect(pm.response.text()).to.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#complete\\\"/>\");",
									"});",
									"pm.test(\"AutomationResult verdict should be #passed\", function () {",
									"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:verdict rdf:resource=\\\"http://open-services.net/ns/auto#unavailable\\\"/>\");",
									"    pm.expect(pm.response.text()).to.include(\"oslc_auto:verdict rdf:resource=\\\"http://open-services.net/ns/auto#passed\\\"/>\");",
									"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#error\\\"/>\");",
									"});",
									"",
									"pm.test(\"AutomationResult statusMessage should have the expected value\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Analysis completed successfully\");",
									"});",
									"pm.test(\"returnCode should be 0\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"<rdf:value>0</rdf:value>\");",
									"});",
									"pm.test(\"AutomationResult analysis stdout should have the expected value\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"HelloWorld!\\n\");",
									"});",
									"pm.test(\"AutomationResult analysis stderr should have the expected value\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Memcheck, a memory error detector\\n\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/rdf+xml"
							}
						],
						"url": {
							"raw": "{{analysis_provider}}/services/resources/automationResults/{{requestId}}",
							"host": [
								"{{analysis_provider}}"
							],
							"path": [
								"services",
								"resources",
								"automationResults",
								"{{requestId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "analyse helgrind",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response code should be 201 (created)\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"",
									"// save the request ID as a global variable for later tests to use",
									"const response = xml2Json(pm.response.text());",
									"var resrouceAbout = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"].$[\"rdf:about\"];",
									"var resourceAboutSplit = resrouceAbout.split(\"/\");",
									"var requestId = resourceAboutSplit[resourceAboutSplit.length-1];",
									"pm.globals.set('requestId', requestId);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/xml"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/rdf+xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>First prototype request</dcterms:title>\n\t<dcterms:description>Test</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{analysis_provider}}/services/resources/automationPlans/valgrind\" />\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>tool</oslc:name>\n\t\t\t<rdf:value>helgrind</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>executionParameters</oslc:name>\n\t\t\t<rdf:value>HelloWorld!</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>SUT</oslc:name>\n\t\t\t<rdf:value>{{SUT}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>"
						},
						"url": {
							"raw": "{{analysis_provider}}/services/resources/createAutomationRequest",
							"host": [
								"{{analysis_provider}}"
							],
							"path": [
								"services",
								"resources",
								"createAutomationRequest"
							]
						}
					},
					"response": []
				},
				{
					"name": "wait for #complete (analysis tools/valgrind/helgrind)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var timeoutSeconds = pm.collectionVariables.get('automation_wait_time');",
									"",
									"var waitCounter = pm.globals.get(\"waitCounter\");",
									"if(!waitCounter) {",
									"    waitCounter = 0;",
									"}",
									"",
									"if (pm.response.code != 200) { // wait for the resource to be created",
									"    if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
									"        setTimeout(function(){}, [1000]); // 1 second",
									"        waitCounter++;",
									"        postman.setNextRequest(pm.info.requestName);",
									"    } else { // timeout, reset counter",
									"        waitCounter = 0;",
									"    }",
									"} else { // wait for the automation to complete",
									"    const response = xml2Json(pm.response.text());",
									"    var state = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"][\"oslc_auto:state\"].$[\"rdf:resource\"];",
									"    if (state == \"http://open-services.net/ns/auto#inProgress\") {",
									"        if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
									"            setTimeout(function(){}, [1000]); // 1 second",
									"            waitCounter++;",
									"            postman.setNextRequest(pm.info.requestName);",
									"        } else { // timeout, reset counter",
									"            waitCounter = 0;",
									"        }",
									"    } else { // wait doen, reset counter",
									"            waitCounter = 0;",
									"    }",
									"}",
									"",
									"pm.globals.set(\"waitCounter\", waitCounter);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/rdf+xml"
							}
						],
						"url": {
							"raw": "{{analysis_provider}}/services/resources/automationRequests/{{requestId}}",
							"host": [
								"{{analysis_provider}}"
							],
							"path": [
								"services",
								"resources",
								"automationRequests",
								"{{requestId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "check result",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// get global variable to use in this test",
									"var requestId = pm.globals.get('requestId');",
									"var AutomationPlanId = pm.variables.get(\"AutomationPlanId\");",
									"var analyser = pm.variables.get(\"analyser\");",
									"var executionParameters= pm.variables.get(\"executionParameters\");",
									"var SUT = pm.variables.get(\"SUT\");",
									"",
									"",
									"pm.test(\"Response code should be 200 (OK)\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"AutomationResult state should be #complete\", function () {",
									"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#new\\\"/>\");",
									"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#inProgress\\\"/>\");",
									"    pm.expect(pm.response.text()).to.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#complete\\\"/>\");",
									"});",
									"pm.test(\"AutomationResult verdict should be #passed\", function () {",
									"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:verdict rdf:resource=\\\"http://open-services.net/ns/auto#unavailable\\\"/>\");",
									"    pm.expect(pm.response.text()).to.include(\"oslc_auto:verdict rdf:resource=\\\"http://open-services.net/ns/auto#passed\\\"/>\");",
									"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#error\\\"/>\");",
									"});",
									"",
									"pm.test(\"AutomationResult statusMessage should have the expected value\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Analysis completed successfully\");",
									"    pm.expect(pm.response.text()).to.include(\" --tool=helgrind ./my_echo HelloWorld!\");",
									"});",
									"pm.test(\"returnCode should be 0\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"<rdf:value>0</rdf:value>\");",
									"});",
									"pm.test(\"AutomationResult analysis stdout should have the expected value\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"HelloWorld!\\n\");",
									"});",
									"pm.test(\"AutomationResult analysis stderr should have the expected value\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Helgrind, a thread error detector\\n\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/rdf+xml"
							}
						],
						"url": {
							"raw": "{{analysis_provider}}/services/resources/automationResults/{{requestId}}",
							"host": [
								"{{analysis_provider}}"
							],
							"path": [
								"services",
								"resources",
								"automationResults",
								"{{requestId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "grep",
			"item": [
				{
					"name": "create SUT using the compilation provider",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// save the request ID as a global variable for later tests to use -- used as SUT ID",
									"const response = xml2Json(pm.response.text());",
									"var resrouceAbout = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"].$[\"rdf:about\"];",
									"var resourceAboutSplit = resrouceAbout.split(\"/\");",
									"var requestId = resourceAboutSplit[resourceAboutSplit.length-1];",
									"pm.globals.set('requestId', requestId);",
									"",
									"pm.test(\"Response code should be 201 (created)\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"var compilation_provider = pm.variables.get(\"compilation_provider\");",
									"var sutId = requestId;",
									"pm.globals.set(\"SUT\", compilation_provider + \"/services/resources/sUTs/\" + sutId);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/xml"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/rdf+xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>analysis test</dcterms:title>\n\t<dcterms:description>analysis test</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{compilation_provider}}/services/resources/automationPlans/0\" />\n\t\n\t<oslc_auto:inputParameter>\n        <oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>sourceBase64</oslc:name>\n\t\t\t<rdf:value>TestEchoProgram.cpp\nI2luY2x1ZGUgPHN0ZGlvLmg+CgppbnQgbWFpbihpbnQgYXJnYywgY2hhcioqIGFyZ3YpCnsKCXByaW50ZigiJXNcbiIsIGFyZ3ZbMV0pOwoJcmV0dXJuIDA7Cn0K</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>buildCommand</oslc:name>\n\t\t\t<rdf:value>gcc -g TestEchoProgram.cpp -o my_echo</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>launchCommand</oslc:name>\n\t\t\t<rdf:value>./my_echo</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>"
						},
						"url": {
							"raw": "{{compilation_provider}}/services/resources/createAutomationRequest",
							"host": [
								"{{compilation_provider}}"
							],
							"path": [
								"services",
								"resources",
								"createAutomationRequest"
							]
						}
					},
					"response": []
				},
				{
					"name": "wait for #complete (analysis tools/grep/create sut)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var timeoutSeconds = pm.collectionVariables.get('automation_wait_time');",
									"",
									"var waitCounter = pm.globals.get(\"waitCounter\");",
									"if(!waitCounter) {",
									"    waitCounter = 0;",
									"}",
									"",
									"if (pm.response.code != 200) { // wait for the resource to be created",
									"    if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
									"        setTimeout(function(){}, [1000]); // 1 second",
									"        waitCounter++;",
									"        postman.setNextRequest(pm.info.requestName);",
									"    } else { // timeout, reset counter",
									"        waitCounter = 0;",
									"    }",
									"} else { // wait for the automation to complete",
									"    const response = xml2Json(pm.response.text());",
									"    var state = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"][\"oslc_auto:state\"].$[\"rdf:resource\"];",
									"    if (state == \"http://open-services.net/ns/auto#inProgress\") {",
									"        if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
									"            setTimeout(function(){}, [1000]); // 1 second",
									"            waitCounter++;",
									"            postman.setNextRequest(pm.info.requestName);",
									"        } else { // timeout, reset counter",
									"            waitCounter = 0;",
									"        }",
									"    } else { // wait doen, reset counter",
									"            waitCounter = 0;",
									"    }",
									"}",
									"",
									"pm.globals.set(\"waitCounter\", waitCounter);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/rdf+xml"
							}
						],
						"url": {
							"raw": "{{compilation_provider}}/services/resources/automationRequests/{{requestId}}",
							"host": [
								"{{compilation_provider}}"
							],
							"path": [
								"services",
								"resources",
								"automationRequests",
								"{{requestId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "predefined AutomationPlan",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var analysis_provider = pm.variables.get(\"analysis_provider\");",
									"",
									"",
									"pm.test(\"Response code should be 200 (OK)\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response body should contain an AutomationPlan (id:grep)\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"oslc_auto:AutomationPlan rdf:about=\\\"\" + analysis_provider + \"/services/resources/automationPlans/grep\");",
									"});",
									"pm.test(\"AutomationPlan should contain a dcterms:title property\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"<dcterms:title\");",
									"});",
									"pm.test(\"AutomationPlan should contain a dcterms:created property\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"<dcterms:created\");",
									"});",
									"pm.test(\"AutomationPlan should contain a dcterms:modified property\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"<dcterms:modified\");",
									"});",
									"pm.test(\"AutomationPlan should contain a <dcterms:creator property\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"<dcterms:creator\");",
									"});",
									"pm.test(\"AutomationPlan should contain an options parameter definition\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"<oslc:name>options</oslc:name>\");",
									"});",
									"pm.test(\"AutomationPlan should contain a SUT parameter definition\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"<oslc:name>SUT</oslc:name>\");",
									"});",
									"pm.test(\"AutomationPlan should contain a pattern parameter definition\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"<oslc:name>pattern</oslc:name>\");",
									"});",
									"pm.test(\"AutomationPlan should contain a file parameter definition\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"<oslc:name>file</oslc:name>\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/rdf+xml"
							}
						],
						"url": {
							"raw": "{{analysis_provider}}/services/resources/automationPlans/grep",
							"host": [
								"{{analysis_provider}}"
							],
							"path": [
								"services",
								"resources",
								"automationPlans",
								"grep"
							]
						}
					},
					"response": []
				},
				{
					"name": "analyse",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response code should be 201 (created)\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"",
									"// save the request ID as a global variable for later tests to use",
									"const response = xml2Json(pm.response.text());",
									"var resrouceAbout = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"].$[\"rdf:about\"];",
									"var resourceAboutSplit = resrouceAbout.split(\"/\");",
									"var requestId = resourceAboutSplit[resourceAboutSplit.length-1];",
									"pm.globals.set('requestId', requestId);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/xml"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/rdf+xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>First prototype request</dcterms:title>\n\t<dcterms:description>Test</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{analysis_provider}}/services/resources/automationPlans/grep\" />\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>pattern</oslc:name>\n\t\t\t<rdf:value>i</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>file</oslc:name>\n\t\t\t<rdf:value>TestEchoProgram.cpp</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>SUT</oslc:name>\n\t\t\t<rdf:value>{{SUT}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>"
						},
						"url": {
							"raw": "{{analysis_provider}}/services/resources/createAutomationRequest",
							"host": [
								"{{analysis_provider}}"
							],
							"path": [
								"services",
								"resources",
								"createAutomationRequest"
							]
						}
					},
					"response": []
				},
				{
					"name": "wait for #complete (analysis tools/grep/analyse)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var timeoutSeconds = pm.collectionVariables.get('automation_wait_time');",
									"",
									"var waitCounter = pm.globals.get(\"waitCounter\");",
									"if(!waitCounter) {",
									"    waitCounter = 0;",
									"}",
									"",
									"if (pm.response.code != 200) { // wait for the resource to be created",
									"    if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
									"        setTimeout(function(){}, [1000]); // 1 second",
									"        waitCounter++;",
									"        postman.setNextRequest(pm.info.requestName);",
									"    } else { // timeout, reset counter",
									"        waitCounter = 0;",
									"    }",
									"} else { // wait for the automation to complete",
									"    const response = xml2Json(pm.response.text());",
									"    var state = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"][\"oslc_auto:state\"].$[\"rdf:resource\"];",
									"    if (state == \"http://open-services.net/ns/auto#inProgress\") {",
									"        if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
									"            setTimeout(function(){}, [1000]); // 1 second",
									"            waitCounter++;",
									"            postman.setNextRequest(pm.info.requestName);",
									"        } else { // timeout, reset counter",
									"            waitCounter = 0;",
									"        }",
									"    } else { // wait doen, reset counter",
									"            waitCounter = 0;",
									"    }",
									"}",
									"",
									"pm.globals.set(\"waitCounter\", waitCounter);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/rdf+xml"
							}
						],
						"url": {
							"raw": "{{analysis_provider}}/services/resources/automationRequests/{{requestId}}",
							"host": [
								"{{analysis_provider}}"
							],
							"path": [
								"services",
								"resources",
								"automationRequests",
								"{{requestId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "check result",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// get global variable to use in this test",
									"var requestId = pm.globals.get('requestId');",
									"var analysis_provider = pm.variables.get(\"analysis_provider\");",
									"var AutomationPlanId = pm.variables.get(\"AutomationPlanId\");",
									"var analyser = pm.variables.get(\"analyser\");",
									"var executionParameters= pm.variables.get(\"executionParameters\");",
									"var SUT = pm.variables.get(\"SUT\");",
									"",
									"",
									"pm.test(\"Response code should be 200 (OK)\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"AutomationResult state should be #complete\", function () {",
									"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#new\\\"/>\");",
									"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#inProgress\\\"/>\");",
									"    pm.expect(pm.response.text()).to.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#complete\\\"/>\");",
									"});",
									"pm.test(\"AutomationResult verdict should be #passed\", function () {",
									"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:verdict rdf:resource=\\\"http://open-services.net/ns/auto#unavailable\\\"/>\");",
									"    pm.expect(pm.response.text()).to.include(\"oslc_auto:verdict rdf:resource=\\\"http://open-services.net/ns/auto#passed\\\"/>\");",
									"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#error\\\"/>\");",
									"});",
									"",
									"pm.test(\"AutomationResult statusMessage should have the expected value\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Analysis completed successfully\");",
									"});",
									"pm.test(\"returnCode should be 0\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"<rdf:value>0</rdf:value>\");",
									"});",
									"pm.test(\"AutomationResult analysis stdout should have the expected value\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"int main(int argc, char** argv)\\n\");",
									"});",
									"pm.test(\"AutomationResult analysis stderr be empty (~)\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"<rdf:value></rdf:value>\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/rdf+xml"
							}
						],
						"url": {
							"raw": "{{analysis_provider}}/services/resources/automationResults/{{requestId}}",
							"host": [
								"{{analysis_provider}}"
							],
							"path": [
								"services",
								"resources",
								"automationResults",
								"{{requestId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "infer 1.0.0",
			"item": [
				{
					"name": "create SUT using the compilation provider",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// save the request ID as a global variable for later tests to use -- used as SUT ID",
									"const response = xml2Json(pm.response.text());",
									"var resrouceAbout = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"].$[\"rdf:about\"];",
									"var resourceAboutSplit = resrouceAbout.split(\"/\");",
									"var requestId = resourceAboutSplit[resourceAboutSplit.length-1];",
									"pm.globals.set('requestId', requestId);",
									"",
									"pm.test(\"Response code should be 201 (created)\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"var compilation_provider = pm.variables.get(\"compilation_provider\");",
									"var sutId = requestId;",
									"pm.globals.set(\"SUT\", compilation_provider + \"/services/resources/sUTs/\" + sutId);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/xml"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/rdf+xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>analysis test</dcterms:title>\n\t<dcterms:description>analysis test</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{compilation_provider}}/services/resources/automationPlans/0\" />\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>sourceFilePath</oslc:name>\n\t\t\t<rdf:value>./tests/resources/InferExample</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>buildCommand</oslc:name>\n\t\t\t<rdf:value>make</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>noCompilation</oslc:name>\n\t\t\t<rdf:value>true</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n    \n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>"
						},
						"url": {
							"raw": "{{compilation_provider}}/services/resources/createAutomationRequest",
							"host": [
								"{{compilation_provider}}"
							],
							"path": [
								"services",
								"resources",
								"createAutomationRequest"
							]
						}
					},
					"response": []
				},
				{
					"name": "wait for #complete (analysis tools/infer/create sut)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var timeoutSeconds = pm.collectionVariables.get('automation_wait_time');",
									"",
									"var waitCounter = pm.globals.get(\"waitCounter\");",
									"if(!waitCounter) {",
									"    waitCounter = 0;",
									"}",
									"",
									"if (pm.response.code != 200) { // wait for the resource to be created",
									"    if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
									"        setTimeout(function(){}, [1000]); // 1 second",
									"        waitCounter++;",
									"        postman.setNextRequest(pm.info.requestName);",
									"    } else { // timeout, reset counter",
									"        waitCounter = 0;",
									"    }",
									"} else { // wait for the automation to complete",
									"    const response = xml2Json(pm.response.text());",
									"    var state = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"][\"oslc_auto:state\"].$[\"rdf:resource\"];",
									"    if (state == \"http://open-services.net/ns/auto#inProgress\") {",
									"        if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
									"            setTimeout(function(){}, [1000]); // 1 second",
									"            waitCounter++;",
									"            postman.setNextRequest(pm.info.requestName);",
									"        } else { // timeout, reset counter",
									"            waitCounter = 0;",
									"        }",
									"    } else { // wait doen, reset counter",
									"            waitCounter = 0;",
									"    }",
									"}",
									"",
									"pm.globals.set(\"waitCounter\", waitCounter);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/rdf+xml"
							}
						],
						"url": {
							"raw": "{{compilation_provider}}/services/resources/automationRequests/{{requestId}}",
							"host": [
								"{{compilation_provider}}"
							],
							"path": [
								"services",
								"resources",
								"automationRequests",
								"{{requestId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "predefined AutomationPlan",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var analysis_provider = pm.variables.get(\"analysis_provider\");",
									"",
									"pm.test(\"Response code should be 200 (OK)\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response body should contain an AutomationPlan (id:infer)\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"oslc_auto:AutomationPlan rdf:about=\\\"\" + analysis_provider + \"/services/resources/automationPlans/infer\");",
									"});",
									"pm.test(\"AutomationPlan should contain a dcterms:title property\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"<dcterms:title\");",
									"});",
									"pm.test(\"AutomationPlan should contain a dcterms:created property\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"<dcterms:created\");",
									"});",
									"pm.test(\"AutomationPlan should contain a dcterms:modified property\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"<dcterms:modified\");",
									"});",
									"pm.test(\"AutomationPlan should contain a <dcterms:creator property\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"<dcterms:creator\");",
									"});",
									"pm.test(\"AutomationPlan should contain a SUT parameter definition\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"<oslc:name>SUT</oslc:name>\");",
									"});",
									"pm.test(\"AutomationPlan should contain expected parameter definitions\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"<oslc:name>options</oslc:name>\");",
									"    pm.expect(pm.response.text()).to.include(\"<oslc:name>SUTbuildCommand</oslc:name>\");",
									"    pm.expect(pm.response.text()).to.include(\"<oslc:name>sub-command</oslc:name>\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/rdf+xml"
							}
						],
						"url": {
							"raw": "{{analysis_provider}}/services/resources/automationPlans/infer",
							"host": [
								"{{analysis_provider}}"
							],
							"path": [
								"services",
								"resources",
								"automationPlans",
								"infer"
							]
						}
					},
					"response": []
				},
				{
					"name": "analyse",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response code should be 201 (created)\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"// save the request ID as a global variable for later tests to use",
									"const response = xml2Json(pm.response.text());",
									"var resrouceAbout = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"].$[\"rdf:about\"];",
									"var resourceAboutSplit = resrouceAbout.split(\"/\");",
									"var requestId = resourceAboutSplit[resourceAboutSplit.length-1];",
									"pm.globals.set('requestId', requestId);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/xml"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/rdf+xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>First prototype request</dcterms:title>\n\t<dcterms:description>Test</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{analysis_provider}}/services/resources/automationPlans/infer\" />\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>sub-command</oslc:name>\n\t\t\t<rdf:value>run</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>options</oslc:name>\n\t\t\t<rdf:value>--reactive</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>SUTbuildCommand</oslc:name>\n\t\t\t<rdf:value>true</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>zipOutputs</oslc:name>\n\t\t\t<rdf:value>True</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>outputFileRegex</oslc:name>\n\t\t\t<rdf:value>.*infer-out.*</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>SUT</oslc:name>\n\t\t\t<rdf:value>{{SUT}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>"
						},
						"url": {
							"raw": "{{analysis_provider}}/services/resources/createAutomationRequest",
							"host": [
								"{{analysis_provider}}"
							],
							"path": [
								"services",
								"resources",
								"createAutomationRequest"
							]
						}
					},
					"response": []
				},
				{
					"name": "wait for #complete (analysis tools/infer/analyse)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var timeoutSeconds = pm.collectionVariables.get('automation_wait_time');",
									"",
									"var waitCounter = pm.globals.get(\"waitCounter\");",
									"if(!waitCounter) {",
									"    waitCounter = 0;",
									"}",
									"",
									"if (pm.response.code != 200) { // wait for the resource to be created",
									"    if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
									"        setTimeout(function(){}, [1000]); // 1 second",
									"        waitCounter++;",
									"        postman.setNextRequest(pm.info.requestName);",
									"    } else { // timeout, reset counter",
									"        waitCounter = 0;",
									"    }",
									"} else { // wait for the automation to complete",
									"    const response = xml2Json(pm.response.text());",
									"    var state = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"][\"oslc_auto:state\"].$[\"rdf:resource\"];",
									"    if (state == \"http://open-services.net/ns/auto#inProgress\") {",
									"        if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
									"            setTimeout(function(){}, [1000]); // 1 second",
									"            waitCounter++;",
									"            postman.setNextRequest(pm.info.requestName);",
									"        } else { // timeout, reset counter",
									"            waitCounter = 0;",
									"        }",
									"    } else { // wait doen, reset counter",
									"            waitCounter = 0;",
									"    }",
									"}",
									"",
									"pm.globals.set(\"waitCounter\", waitCounter);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/rdf+xml"
							}
						],
						"url": {
							"raw": "{{analysis_provider}}/services/resources/automationRequests/{{requestId}}",
							"host": [
								"{{analysis_provider}}"
							],
							"path": [
								"services",
								"resources",
								"automationRequests",
								"{{requestId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "check result",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// get global variable to use in this test",
									"var requestId = pm.globals.get('requestId');",
									"var analysis_provider = pm.variables.get(\"analysis_provider\");",
									"var AutomationPlanId = pm.variables.get(\"AutomationPlanId\");",
									"var analyser = pm.variables.get(\"analyser\");",
									"var executionParameters= pm.variables.get(\"executionParameters\");",
									"var SUT = pm.variables.get(\"SUT\");",
									"",
									"",
									"pm.test(\"Response code should be 200 (OK)\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"AutomationResult state should be #complete\", function () {",
									"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#new\\\"/>\");",
									"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#inProgress\\\"/>\");",
									"    pm.expect(pm.response.text()).to.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#complete\\\"/>\");",
									"});",
									"pm.test(\"AutomationResult verdict should be #passed\", function () {",
									"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:verdict rdf:resource=\\\"http://open-services.net/ns/auto#unavailable\\\"/>\");",
									"    pm.expect(pm.response.text()).to.include(\"oslc_auto:verdict rdf:resource=\\\"http://open-services.net/ns/auto#passed\\\"/>\");",
									"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#error\\\"/>\");",
									"});",
									"",
									"pm.test(\"AutomationResult statusMessage should have the expected value\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Analysis completed successfully\");",
									"});",
									"pm.test(\"returnCode should be 0\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"<rdf:value>0</rdf:value>\");",
									"});",
									"pm.test(\"AutomationResult analysis stdout should have the expected value\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"RESOURCE_LEAK\");",
									"    pm.expect(pm.response.text()).to.include(\"NULL_DEREFERENCE\");",
									"});",
									"pm.test(\"AutomationResult analysis stderr should have the expected value\", function () {",
									"    pm.expect(pm.response.text()).to.include(",
									"        \"Capturing in make/cc mode...\\n\"",
									"        +\"Found 3 (out of 3) source files to analyze in\"",
									"        );",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/rdf+xml"
							}
						],
						"url": {
							"raw": "{{analysis_provider}}/services/resources/automationResults/{{requestId}}",
							"host": [
								"{{analysis_provider}}"
							],
							"path": [
								"services",
								"resources",
								"automationResults",
								"{{requestId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "perun",
			"item": [
				{
					"name": "create SUT using the compilation provider",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// save the request ID as a global variable for later tests to use -- used as SUT ID",
									"const response = xml2Json(pm.response.text());",
									"var resrouceAbout = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"].$[\"rdf:about\"];",
									"var resourceAboutSplit = resrouceAbout.split(\"/\");",
									"var requestId = resourceAboutSplit[resourceAboutSplit.length-1];",
									"pm.globals.set('requestId', requestId);",
									"",
									"pm.test(\"Response code should be 201 (created)\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"var compilation_provider = pm.variables.get(\"compilation_provider\");",
									"var sutId = requestId;",
									"pm.globals.set(\"SUT\", compilation_provider + \"/services/resources/sUTs/\" + sutId);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/xml"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/rdf+xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>analysis test</dcterms:title>\n\t<dcterms:description>analysis test</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{compilation_provider}}/services/resources/automationPlans/0\" />\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>sourceFilePath</oslc:name>\n\t\t\t<rdf:value>./tests/resources/test-master.zip</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>buildCommand</oslc:name>\n\t\t\t<rdf:value>gcc -g TestEchoProgram.cpp -o my_echo</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n        <oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>unpackZip</oslc:name>\n\t\t\t<rdf:value>true</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n    \n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>launchCommand</oslc:name>\n\t\t\t<rdf:value>./my_echo</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>"
						},
						"url": {
							"raw": "{{compilation_provider}}/services/resources/createAutomationRequest",
							"host": [
								"{{compilation_provider}}"
							],
							"path": [
								"services",
								"resources",
								"createAutomationRequest"
							]
						}
					},
					"response": []
				},
				{
					"name": "wait for #complete (analysis tools/perun/create sut)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var timeoutSeconds = pm.collectionVariables.get('automation_wait_time');",
									"",
									"var waitCounter = pm.globals.get(\"waitCounter\");",
									"if(!waitCounter) {",
									"    waitCounter = 0;",
									"}",
									"",
									"if (pm.response.code != 200) { // wait for the resource to be created",
									"    if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
									"        setTimeout(function(){}, [1000]); // 1 second",
									"        waitCounter++;",
									"        postman.setNextRequest(pm.info.requestName);",
									"    } else { // timeout, reset counter",
									"        waitCounter = 0;",
									"    }",
									"} else { // wait for the automation to complete",
									"    const response = xml2Json(pm.response.text());",
									"    var state = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"][\"oslc_auto:state\"].$[\"rdf:resource\"];",
									"    if (state == \"http://open-services.net/ns/auto#inProgress\") {",
									"        if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
									"            setTimeout(function(){}, [1000]); // 1 second",
									"            waitCounter++;",
									"            postman.setNextRequest(pm.info.requestName);",
									"        } else { // timeout, reset counter",
									"            waitCounter = 0;",
									"        }",
									"    } else { // wait doen, reset counter",
									"            waitCounter = 0;",
									"    }",
									"}",
									"",
									"pm.globals.set(\"waitCounter\", waitCounter);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/rdf+xml"
							}
						],
						"url": {
							"raw": "{{compilation_provider}}/services/resources/automationRequests/{{requestId}}",
							"host": [
								"{{compilation_provider}}"
							],
							"path": [
								"services",
								"resources",
								"automationRequests",
								"{{requestId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "predefined AutomationPlan",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var analysis_provider = pm.variables.get(\"analysis_provider\");",
									"",
									"pm.test(\"Response code should be 200 (OK)\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response body should contain an AutomationPlan (id:perun)\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"oslc_auto:AutomationPlan rdf:about=\\\"\" + analysis_provider + \"/services/resources/automationPlans/perun\");",
									"});",
									"pm.test(\"AutomationPlan should contain a dcterms:title property\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"<dcterms:title\");",
									"});",
									"pm.test(\"AutomationPlan should contain a dcterms:created property\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"<dcterms:created\");",
									"});",
									"pm.test(\"AutomationPlan should contain a dcterms:modified property\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"<dcterms:modified\");",
									"});",
									"pm.test(\"AutomationPlan should contain a <dcterms:creator property\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"<dcterms:creator\");",
									"});",
									"pm.test(\"AutomationPlan should contain a command parameter definition\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"<oslc:name>command</oslc:name>\");",
									"});",
									"pm.test(\"AutomationPlan should contain a SUT parameter definition\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"<oslc:name>SUT</oslc:name>\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/rdf+xml"
							}
						],
						"url": {
							"raw": "{{analysis_provider}}/services/resources/automationPlans/perun",
							"host": [
								"{{analysis_provider}}"
							],
							"path": [
								"services",
								"resources",
								"automationPlans",
								"perun"
							]
						}
					},
					"response": []
				},
				{
					"name": "init",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response code should be 201 (created)\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"",
									"// save the request ID as a global variable for later tests to use",
									"const response = xml2Json(pm.response.text());",
									"var resrouceAbout = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"].$[\"rdf:about\"];",
									"var resourceAboutSplit = resrouceAbout.split(\"/\");",
									"var requestId = resourceAboutSplit[resourceAboutSplit.length-1];",
									"pm.globals.set('requestId', requestId);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>First prototype request</dcterms:title>\n\t<dcterms:description>Test</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{analysis_provider}}/services/resources/automationPlans/perun\" />\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>command</oslc:name>\n\t\t\t<rdf:value>init</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>SUT</oslc:name>\n\t\t\t<rdf:value>{{SUT}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>outputFileRegex</oslc:name>\n\t\t\t<rdf:value>.*\\.yml</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>"
						},
						"url": {
							"raw": "{{analysis_provider}}/services/resources/createAutomationRequest",
							"host": [
								"{{analysis_provider}}"
							],
							"path": [
								"services",
								"resources",
								"createAutomationRequest"
							]
						}
					},
					"response": []
				},
				{
					"name": "wait for #complete (analysis tools/perun/init)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var timeoutSeconds = pm.collectionVariables.get('automation_wait_time');",
									"",
									"var waitCounter = pm.globals.get(\"waitCounter\");",
									"if(!waitCounter) {",
									"    waitCounter = 0;",
									"}",
									"",
									"if (pm.response.code != 200) { // wait for the resource to be created",
									"    if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
									"        setTimeout(function(){}, [1000]); // 1 second",
									"        waitCounter++;",
									"        postman.setNextRequest(pm.info.requestName);",
									"    } else { // timeout, reset counter",
									"        waitCounter = 0;",
									"    }",
									"} else { // wait for the automation to complete",
									"    const response = xml2Json(pm.response.text());",
									"    var state = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"][\"oslc_auto:state\"].$[\"rdf:resource\"];",
									"    if (state == \"http://open-services.net/ns/auto#inProgress\") {",
									"        if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
									"            setTimeout(function(){}, [1000]); // 1 second",
									"            waitCounter++;",
									"            postman.setNextRequest(pm.info.requestName);",
									"        } else { // timeout, reset counter",
									"            waitCounter = 0;",
									"        }",
									"    } else { // wait doen, reset counter",
									"            waitCounter = 0;",
									"    }",
									"}",
									"",
									"pm.globals.set(\"waitCounter\", waitCounter);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/rdf+xml"
							}
						],
						"url": {
							"raw": "{{analysis_provider}}/services/resources/automationRequests/{{requestId}}",
							"host": [
								"{{analysis_provider}}"
							],
							"path": [
								"services",
								"resources",
								"automationRequests",
								"{{requestId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "check result",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// get global variable to use in this test",
									"var requestId = pm.globals.get('requestId');",
									"var AutomationPlanId = pm.variables.get(\"AutomationPlanId\");",
									"var analyser = pm.variables.get(\"analyser\");",
									"var executionParameters= pm.variables.get(\"executionParameters\");",
									"var SUT = pm.variables.get(\"SUT\");",
									"",
									"",
									"pm.test(\"Response code should be 200 (OK)\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"AutomationResult state should be #complete\", function () {",
									"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#new\\\"/>\");",
									"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#inProgress\\\"/>\");",
									"    pm.expect(pm.response.text()).to.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#complete\\\"/>\");",
									"});",
									"pm.test(\"AutomationResult verdict should be #passed\", function () {",
									"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:verdict rdf:resource=\\\"http://open-services.net/ns/auto#unavailable\\\"/>\");",
									"    pm.expect(pm.response.text()).to.include(\"oslc_auto:verdict rdf:resource=\\\"http://open-services.net/ns/auto#passed\\\"/>\");",
									"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#error\\\"/>\");",
									"});",
									"",
									"pm.test(\"AutomationResult statusMessage should have the expected value\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Analysis completed successfully\");",
									"});",
									"pm.test(\"returnCode should be 0\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"<rdf:value>0</rdf:value>\");",
									"});",
									"pm.test(\"AutomationResult analysis stdout should have the expected value\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"In order to automatically run jobs configure the matrix at:\\n\\n    .perun/local.yml\");",
									"});",
									"pm.test(\"AutomationResult analysis stderr be empty (~)\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"<rdf:value></rdf:value>\");",
									"});",
									"pm.test(\"AutomationResult should contain contributions for new files\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"<dcterms:title rdf:parseType=\\\"Literal\\\">local.yml</dcterms:title>\");",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/rdf+xml"
							}
						],
						"url": {
							"raw": "{{analysis_provider}}/services/resources/automationResults/{{requestId}}",
							"host": [
								"{{analysis_provider}}"
							],
							"path": [
								"services",
								"resources",
								"automationResults",
								"{{requestId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "collect",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response code should be 201 (created)\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"",
									"// save the request ID as a global variable for later tests to use",
									"const response = xml2Json(pm.response.text());",
									"var resrouceAbout = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"].$[\"rdf:about\"];",
									"var resourceAboutSplit = resrouceAbout.split(\"/\");",
									"var requestId = resourceAboutSplit[resourceAboutSplit.length-1];",
									"pm.globals.set('requestId', requestId);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>First prototype request</dcterms:title>\n\t<dcterms:description>Test</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{analysis_provider}}/services/resources/automationPlans/perun\" />\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>command</oslc:name>\n\t\t\t<rdf:value>collect -c ./my_echo -w \"text\" time -w 0 -r 1</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>SUT</oslc:name>\n\t\t\t<rdf:value>{{SUT}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>outputFileRegex</oslc:name>\n\t\t\t<rdf:value>.*\\.perf</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>"
						},
						"url": {
							"raw": "{{analysis_provider}}/services/resources/createAutomationRequest",
							"host": [
								"{{analysis_provider}}"
							],
							"path": [
								"services",
								"resources",
								"createAutomationRequest"
							]
						}
					},
					"response": []
				},
				{
					"name": "wait for #complete (analysis tools/perun/collect)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var timeoutSeconds = pm.collectionVariables.get('automation_wait_time');",
									"",
									"var waitCounter = pm.globals.get(\"waitCounter\");",
									"if(!waitCounter) {",
									"    waitCounter = 0;",
									"}",
									"",
									"if (pm.response.code != 200) { // wait for the resource to be created",
									"    if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
									"        setTimeout(function(){}, [1000]); // 1 second",
									"        waitCounter++;",
									"        postman.setNextRequest(pm.info.requestName);",
									"    } else { // timeout, reset counter",
									"        waitCounter = 0;",
									"    }",
									"} else { // wait for the automation to complete",
									"    const response = xml2Json(pm.response.text());",
									"    var state = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"][\"oslc_auto:state\"].$[\"rdf:resource\"];",
									"    if (state == \"http://open-services.net/ns/auto#inProgress\") {",
									"        if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
									"            setTimeout(function(){}, [1000]); // 1 second",
									"            waitCounter++;",
									"            postman.setNextRequest(pm.info.requestName);",
									"        } else { // timeout, reset counter",
									"            waitCounter = 0;",
									"        }",
									"    } else { // wait doen, reset counter",
									"            waitCounter = 0;",
									"    }",
									"}",
									"",
									"pm.globals.set(\"waitCounter\", waitCounter);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/rdf+xml"
							}
						],
						"url": {
							"raw": "{{analysis_provider}}/services/resources/automationRequests/{{requestId}}",
							"host": [
								"{{analysis_provider}}"
							],
							"path": [
								"services",
								"resources",
								"automationRequests",
								"{{requestId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "check result",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// get global variable to use in this test",
									"var requestId = pm.globals.get('requestId');",
									"var AutomationPlanId = pm.variables.get(\"AutomationPlanId\");",
									"var analyser = pm.variables.get(\"analyser\");",
									"var executionParameters = pm.variables.get(\"executionParameters\");",
									"var SUT = pm.variables.get(\"SUT\");",
									"",
									"",
									"pm.test(\"Response code should be 200 (OK)\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"AutomationResult state should be #complete\", function () {",
									"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#new\\\"/>\");",
									"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#inProgress\\\"/>\");",
									"    pm.expect(pm.response.text()).to.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#complete\\\"/>\");",
									"});",
									"pm.test(\"AutomationResult verdict should be #passed\", function () {",
									"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:verdict rdf:resource=\\\"http://open-services.net/ns/auto#unavailable\\\"/>\");",
									"    pm.expect(pm.response.text()).to.include(\"oslc_auto:verdict rdf:resource=\\\"http://open-services.net/ns/auto#passed\\\"/>\");",
									"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#error\\\"/>\");",
									"});",
									"pm.test(\"AutomationResult statusMessage should have the expected value\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Analysis completed successfully\");",
									"});",
									"pm.test(\"returnCode should be 0\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"<rdf:value>0</rdf:value>\");",
									"});",
									"pm.test(\"AutomationResult analysis stdout should have the expected value\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Analysis completed successfully\")",
									"    pm.expect(pm.response.text()).to.include(\"[!] Overall Profiling [DONE] in \");",
									"    pm.expect(pm.response.text()).to.include(\"[!] Prerun [DONE] in \");",
									"    pm.expect(pm.response.text()).to.include(\"[!] Batch Job Run [DONE] in \");",
									"});",
									"pm.test(\"AutomationResult analysis stderr be empty (~)\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"<rdf:value></rdf:value>\");",
									"});",
									"pm.test(\"AutomationResult should contain a perf profile contribution\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"<dcterms:title rdf:parseType=\\\"Literal\\\">time-my_echo-\");",
									"    pm.expect(pm.response.text()).to.include(\".perf</dcterms:title>\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/rdf+xml",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{analysis_provider}}/services/resources/automationResults/{{requestId}}?Accept=application/rdf+xml",
							"host": [
								"{{analysis_provider}}"
							],
							"path": [
								"services",
								"resources",
								"automationResults",
								"{{requestId}}"
							],
							"query": [
								{
									"key": "Accept",
									"value": "application/rdf+xml"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "theta",
			"item": [
				{
					"name": "xcfa",
					"item": [
						{
							"name": "create SUT using the compilation provider",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// save the request ID as a global variable for later tests to use -- used as SUT ID",
											"const response = xml2Json(pm.response.text());",
											"var resrouceAbout = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"].$[\"rdf:about\"];",
											"var resourceAboutSplit = resrouceAbout.split(\"/\");",
											"var requestId = resourceAboutSplit[resourceAboutSplit.length-1];",
											"pm.globals.set('requestId', requestId);",
											"",
											"",
											"pm.test(\"Response code should be 201 (created)\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"var compilation_provider = pm.variables.get(\"compilation_provider\");",
											"var sutId = requestId;",
											"pm.globals.set(\"SUT\", compilation_provider + \"/services/resources/sUTs/\" + sutId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/xml"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>analysis test</dcterms:title>\n\t<dcterms:description>analysis test</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{compilation_provider}}/services/resources/automationPlans/0\" />\n\t\n\t<oslc_auto:inputParameter>\n        <oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>sourceFilePath</oslc:name>\n\t\t\t<rdf:value>./tests/resources/theta-00assignment.c</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>buildCommand</oslc:name>\n\t\t\t<rdf:value>gcc -E theta-00assignment.c | sed '/^#/d' > fileToGiveToTheta.c</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>"
								},
								"url": {
									"raw": "{{compilation_provider}}/services/resources/createAutomationRequest",
									"host": [
										"{{compilation_provider}}"
									],
									"path": [
										"services",
										"resources",
										"createAutomationRequest"
									]
								}
							},
							"response": []
						},
						{
							"name": "wait for #complete (analysis tools/theta xcfa/create sut)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var timeoutSeconds = pm.collectionVariables.get('automation_wait_time');",
											"",
											"var waitCounter = pm.globals.get(\"waitCounter\");",
											"if(!waitCounter) {",
											"    waitCounter = 0;",
											"}",
											"",
											"if (pm.response.code != 200) { // wait for the resource to be created",
											"    if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
											"        setTimeout(function(){}, [1000]); // 1 second",
											"        waitCounter++;",
											"        postman.setNextRequest(pm.info.requestName);",
											"    } else { // timeout, reset counter",
											"        waitCounter = 0;",
											"    }",
											"} else { // wait for the automation to complete",
											"    const response = xml2Json(pm.response.text());",
											"    var state = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"][\"oslc_auto:state\"].$[\"rdf:resource\"];",
											"    if (state == \"http://open-services.net/ns/auto#inProgress\") {",
											"        if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
											"            setTimeout(function(){}, [1000]); // 1 second",
											"            waitCounter++;",
											"            postman.setNextRequest(pm.info.requestName);",
											"        } else { // timeout, reset counter",
											"            waitCounter = 0;",
											"        }",
											"    } else { // wait doen, reset counter",
											"            waitCounter = 0;",
											"    }",
											"}",
											"",
											"pm.globals.set(\"waitCounter\", waitCounter);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"url": {
									"raw": "{{compilation_provider}}/services/resources/automationRequests/{{requestId}}",
									"host": [
										"{{compilation_provider}}"
									],
									"path": [
										"services",
										"resources",
										"automationRequests",
										"{{requestId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "predefined AutomationPlan",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var analysis_provider = pm.variables.get(\"analysis_provider\");",
											"",
											"pm.test(\"Response code should be 200 (OK)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Response body should contain an AutomationPlan (id:xsts)\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:AutomationPlan rdf:about=\\\"\" + analysis_provider + \"/services/resources/automationPlans/theta-xcfa-cli\");",
											"});",
											"pm.test(\"AutomationPlan should contain a dcterms:title property\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:title\");",
											"});",
											"pm.test(\"AutomationPlan should contain a dcterms:created property\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:created\");",
											"});",
											"pm.test(\"AutomationPlan should contain a dcterms:modified property\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:modified\");",
											"});",
											"pm.test(\"AutomationPlan should contain a <dcterms:creator property\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:creator\");",
											"});",
											"pm.test(\"AutomationPlan should contain a input parameter definition\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<oslc:name>input</oslc:name>\");",
											"});",
											"pm.test(\"AutomationPlan should contain a SUT parameter definition\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<oslc:name>SUT</oslc:name>\");",
											"});",
											"pm.test(\"AutomationPlan should contain a other-arguments parameter definition\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<oslc:name>other-arguments</oslc:name>\");",
											"});",
											"pm.test(\"AutomationPlan should contain a portfolio parameter definition\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<oslc:name>portfolio</oslc:name>\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"url": {
									"raw": "{{analysis_provider}}/services/resources/automationPlans/theta-xcfa-cli",
									"host": [
										"{{analysis_provider}}"
									],
									"path": [
										"services",
										"resources",
										"automationPlans",
										"theta-xcfa-cli"
									]
								}
							},
							"response": []
						},
						{
							"name": "analyse",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response code should be 201 (created)\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"",
											"// save the request ID as a global variable for later tests to use",
											"const response = xml2Json(pm.response.text());",
											"var resrouceAbout = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"].$[\"rdf:about\"];",
											"var resourceAboutSplit = resrouceAbout.split(\"/\");",
											"var requestId = resourceAboutSplit[resourceAboutSplit.length-1];",
											"pm.globals.set('requestId', requestId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/xml"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>First prototype request</dcterms:title>\n\t<dcterms:description>Test</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{analysis_provider}}/services/resources/automationPlans/theta-xcfa-cli\" />\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>input</oslc:name>\n\t\t\t<rdf:value>fileToGiveToTheta.c</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>SUT</oslc:name>\n\t\t\t<rdf:value>{{SUT}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>"
								},
								"url": {
									"raw": "{{analysis_provider}}/services/resources/createAutomationRequest",
									"host": [
										"{{analysis_provider}}"
									],
									"path": [
										"services",
										"resources",
										"createAutomationRequest"
									]
								}
							},
							"response": []
						},
						{
							"name": "wait for #complete (analysis tools/theta xcfa/analyse)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var timeoutSeconds = pm.collectionVariables.get('automation_wait_time');",
											"",
											"var waitCounter = pm.globals.get(\"waitCounter\");",
											"if(!waitCounter) {",
											"    waitCounter = 0;",
											"}",
											"",
											"if (pm.response.code != 200) { // wait for the resource to be created",
											"    if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
											"        setTimeout(function(){}, [1000]); // 1 second",
											"        waitCounter++;",
											"        postman.setNextRequest(pm.info.requestName);",
											"    } else { // timeout, reset counter",
											"        waitCounter = 0;",
											"    }",
											"} else { // wait for the automation to complete",
											"    const response = xml2Json(pm.response.text());",
											"    var state = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"][\"oslc_auto:state\"].$[\"rdf:resource\"];",
											"    if (state == \"http://open-services.net/ns/auto#inProgress\") {",
											"        if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
											"            setTimeout(function(){}, [1000]); // 1 second",
											"            waitCounter++;",
											"            postman.setNextRequest(pm.info.requestName);",
											"        } else { // timeout, reset counter",
											"            waitCounter = 0;",
											"        }",
											"    } else { // wait doen, reset counter",
											"            waitCounter = 0;",
											"    }",
											"}",
											"",
											"pm.globals.set(\"waitCounter\", waitCounter);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"url": {
									"raw": "{{analysis_provider}}/services/resources/automationRequests/{{requestId}}",
									"host": [
										"{{analysis_provider}}"
									],
									"path": [
										"services",
										"resources",
										"automationRequests",
										"{{requestId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "check result",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// get global variable to use in this test",
											"var requestId = pm.globals.get('requestId');",
											"var AutomationPlanId = pm.variables.get(\"AutomationPlanId\");",
											"var analyser = pm.variables.get(\"analyser\");",
											"var executionParameters= pm.variables.get(\"executionParameters\");",
											"var SUT = pm.variables.get(\"SUT\");",
											"",
											"",
											"pm.test(\"Response code should be 200 (OK)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"AutomationResult state should be #complete\", function () {",
											"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#new\\\"/>\");",
											"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#inProgress\\\"/>\");",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#complete\\\"/>\");",
											"});",
											"pm.test(\"AutomationResult verdict should be #passed\", function () {",
											"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:verdict rdf:resource=\\\"http://open-services.net/ns/auto#unavailable\\\"/>\");",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:verdict rdf:resource=\\\"http://open-services.net/ns/auto#passed\\\"/>\");",
											"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#error\\\"/>\");",
											"});",
											"",
											"pm.test(\"AutomationResult statusMessage should have the expected value\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Analysis completed successfully\");",
											"});",
											"pm.test(\"the expected string should be executed\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Executing analysis:\");",
											"    pm.expect(pm.response.text()).to.include(\"java -jar \");",
											"    pm.expect(pm.response.text()).to.include(\"theta-xcfa-cli.jar\");",
											"    pm.expect(pm.response.text()).to.include(\"--portfolio COMPLEX\");",
											"    pm.expect(pm.response.text()).to.include(\" --stacktrace\");",
											"    pm.expect(pm.response.text()).to.include(\"--input fileToGiveToTheta.c\");",
											"});",
											"pm.test(\"returnCode should be 0\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<rdf:value>0</rdf:value>\");",
											"});",
											"pm.test(\"AutomationResult analysis stdout should have the expected value\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Executing complex portfolio\");",
											"    pm.expect(pm.response.text()).to.include(\"Checking abstraction\");",
											"    pm.expect(pm.response.text()).to.include(\"Refining abstraction\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"url": {
									"raw": "{{analysis_provider}}/services/resources/automationResults/{{requestId}}",
									"host": [
										"{{analysis_provider}}"
									],
									"path": [
										"services",
										"resources",
										"automationResults",
										"{{requestId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "xsts",
					"item": [
						{
							"name": "create SUT using the compilation provider",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// save the request ID as a global variable for later tests to use -- used as SUT ID",
											"const response = xml2Json(pm.response.text());",
											"var resrouceAbout = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"].$[\"rdf:about\"];",
											"var resourceAboutSplit = resrouceAbout.split(\"/\");",
											"var requestId = resourceAboutSplit[resourceAboutSplit.length-1];",
											"pm.globals.set('requestId', requestId);",
											"",
											"",
											"pm.test(\"Response code should be 201 (created)\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"var compilation_provider = pm.variables.get(\"compilation_provider\");",
											"var sutId = requestId;",
											"pm.globals.set(\"SUT\", compilation_provider + \"/services/resources/sUTs/\" + sutId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/xml"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>analysis test</dcterms:title>\n\t<dcterms:description>analysis test</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{compilation_provider}}/services/resources/automationPlans/0\" />\n\t\n\t<oslc_auto:inputParameter>\n        <oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>sourceFilePath</oslc:name>\n\t\t\t<rdf:value>./tests/resources/theta-xsts.zip</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n        <oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>unpackZip</oslc:name>\n\t\t\t<rdf:value>true</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n\t<oslc_auto:inputParameter>\n        <oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>noCompilation</oslc:name>\n\t\t\t<rdf:value>true</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>"
								},
								"url": {
									"raw": "{{compilation_provider}}/services/resources/createAutomationRequest",
									"host": [
										"{{compilation_provider}}"
									],
									"path": [
										"services",
										"resources",
										"createAutomationRequest"
									]
								}
							},
							"response": []
						},
						{
							"name": "wait for #complete (analysis tools/theta xsts/create sut)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var timeoutSeconds = pm.collectionVariables.get('automation_wait_time');",
											"",
											"var waitCounter = pm.globals.get(\"waitCounter\");",
											"if(!waitCounter) {",
											"    waitCounter = 0;",
											"}",
											"",
											"if (pm.response.code != 200) { // wait for the resource to be created",
											"    if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
											"        setTimeout(function(){}, [1000]); // 1 second",
											"        waitCounter++;",
											"        postman.setNextRequest(pm.info.requestName);",
											"    } else { // timeout, reset counter",
											"        waitCounter = 0;",
											"    }",
											"} else { // wait for the automation to complete",
											"    const response = xml2Json(pm.response.text());",
											"    var state = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"][\"oslc_auto:state\"].$[\"rdf:resource\"];",
											"    if (state == \"http://open-services.net/ns/auto#inProgress\") {",
											"        if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
											"            setTimeout(function(){}, [1000]); // 1 second",
											"            waitCounter++;",
											"            postman.setNextRequest(pm.info.requestName);",
											"        } else { // timeout, reset counter",
											"            waitCounter = 0;",
											"        }",
											"    } else { // wait doen, reset counter",
											"            waitCounter = 0;",
											"    }",
											"}",
											"",
											"pm.globals.set(\"waitCounter\", waitCounter);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"url": {
									"raw": "{{compilation_provider}}/services/resources/automationRequests/{{requestId}}",
									"host": [
										"{{compilation_provider}}"
									],
									"path": [
										"services",
										"resources",
										"automationRequests",
										"{{requestId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "predefined AutomationPlan",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var analysis_provider = pm.variables.get(\"analysis_provider\");",
											"",
											"pm.test(\"Response code should be 200 (OK)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Response body should contain an AutomationPlan (id:xsts)\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:AutomationPlan rdf:about=\\\"\" + analysis_provider + \"/services/resources/automationPlans/theta-xsts-cli\");",
											"});",
											"pm.test(\"AutomationPlan should contain a dcterms:title property\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:title\");",
											"});",
											"pm.test(\"AutomationPlan should contain a dcterms:created property\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:created\");",
											"});",
											"pm.test(\"AutomationPlan should contain a dcterms:modified property\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:modified\");",
											"});",
											"pm.test(\"AutomationPlan should contain a <dcterms:creator property\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:creator\");",
											"});",
											"pm.test(\"AutomationPlan should contain a model parameter definition\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<oslc:name>model</oslc:name>\");",
											"});",
											"pm.test(\"AutomationPlan should contain a SUT parameter definition\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<oslc:name>SUT</oslc:name>\");",
											"});",
											"pm.test(\"AutomationPlan should contain a other-arguments parameter definition\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<oslc:name>other-arguments</oslc:name>\");",
											"});",
											"pm.test(\"AutomationPlan should contain a property parameter definition\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<oslc:name>property</oslc:name>\");",
											"});",
											"pm.test(\"AutomationPlan should contain a cex parameter definition\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<oslc:name>cex</oslc:name>\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"url": {
									"raw": "{{analysis_provider}}/services/resources/automationPlans/theta-xsts-cli",
									"host": [
										"{{analysis_provider}}"
									],
									"path": [
										"services",
										"resources",
										"automationPlans",
										"theta-xsts-cli"
									]
								}
							},
							"response": []
						},
						{
							"name": "analyse",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response code should be 201 (created)\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"",
											"// save the request ID as a global variable for later tests to use",
											"const response = xml2Json(pm.response.text());",
											"var resrouceAbout = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"].$[\"rdf:about\"];",
											"var resourceAboutSplit = resrouceAbout.split(\"/\");",
											"var requestId = resourceAboutSplit[resourceAboutSplit.length-1];",
											"pm.globals.set('requestId', requestId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/xml"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>First prototype request</dcterms:title>\n\t<dcterms:description>Test</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{analysis_provider}}/services/resources/automationPlans/theta-xsts-cli\" />\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>model</oslc:name>\n\t\t\t<rdf:value>*.xsts</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>property</oslc:name>\n\t\t\t<rdf:value>*.prop</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>cex</oslc:name>\n\t\t\t<rdf:value>output.cex</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>outputFileRegex</oslc:name>\n\t\t\t<rdf:value>.*[.]cex</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>outputFilter</oslc:name>\n\t\t\t<rdf:value>addAllFileValues</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>SUT</oslc:name>\n\t\t\t<rdf:value>{{SUT}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>"
								},
								"url": {
									"raw": "{{analysis_provider}}/services/resources/createAutomationRequest",
									"host": [
										"{{analysis_provider}}"
									],
									"path": [
										"services",
										"resources",
										"createAutomationRequest"
									]
								}
							},
							"response": []
						},
						{
							"name": "wait for #complete (analysis tools/theta xsts/analyse)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var timeoutSeconds = pm.collectionVariables.get('automation_wait_time');",
											"",
											"var waitCounter = pm.globals.get(\"waitCounter\");",
											"if(!waitCounter) {",
											"    waitCounter = 0;",
											"}",
											"",
											"if (pm.response.code != 200) { // wait for the resource to be created",
											"    if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
											"        setTimeout(function(){}, [1000]); // 1 second",
											"        waitCounter++;",
											"        postman.setNextRequest(pm.info.requestName);",
											"    } else { // timeout, reset counter",
											"        waitCounter = 0;",
											"    }",
											"} else { // wait for the automation to complete",
											"    const response = xml2Json(pm.response.text());",
											"    var state = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"][\"oslc_auto:state\"].$[\"rdf:resource\"];",
											"    if (state == \"http://open-services.net/ns/auto#inProgress\") {",
											"        if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
											"            setTimeout(function(){}, [1000]); // 1 second",
											"            waitCounter++;",
											"            postman.setNextRequest(pm.info.requestName);",
											"        } else { // timeout, reset counter",
											"            waitCounter = 0;",
											"        }",
											"    } else { // wait doen, reset counter",
											"            waitCounter = 0;",
											"    }",
											"}",
											"",
											"pm.globals.set(\"waitCounter\", waitCounter);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"url": {
									"raw": "{{analysis_provider}}/services/resources/automationRequests/{{requestId}}",
									"host": [
										"{{analysis_provider}}"
									],
									"path": [
										"services",
										"resources",
										"automationRequests",
										"{{requestId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "check result",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// get global variable to use in this test",
											"var requestId = pm.globals.get('requestId');",
											"var AutomationPlanId = pm.variables.get(\"AutomationPlanId\");",
											"var analyser = pm.variables.get(\"analyser\");",
											"var executionParameters= pm.variables.get(\"executionParameters\");",
											"var SUT = pm.variables.get(\"SUT\");",
											"",
											"",
											"pm.test(\"Response code should be 200 (OK)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"AutomationResult state should be #complete\", function () {",
											"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#new\\\"/>\");",
											"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#inProgress\\\"/>\");",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#complete\\\"/>\");",
											"});",
											"pm.test(\"AutomationResult verdict should be #passed\", function () {",
											"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:verdict rdf:resource=\\\"http://open-services.net/ns/auto#unavailable\\\"/>\");",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:verdict rdf:resource=\\\"http://open-services.net/ns/auto#passed\\\"/>\");",
											"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#error\\\"/>\");",
											"});",
											"",
											"pm.test(\"AutomationResult statusMessage should have the expected value\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Analysis completed successfully\");",
											"});",
											"pm.test(\"the expected string should be executed\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Executing analysis:\");",
											"    pm.expect(pm.response.text()).to.include(\"java -jar \");",
											"    pm.expect(pm.response.text()).to.include(\"theta-xsts-cli.jar\");",
											"    pm.expect(pm.response.text()).to.include(\" --cex output.cex\");",
											"    pm.expect(pm.response.text()).to.include(\" --model *.xsts\");",
											"    pm.expect(pm.response.text()).to.include(\" --property *.prop\");",
											"});",
											"pm.test(\"returnCode should be 0\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<rdf:value>0</rdf:value>\");",
											"});",
											"pm.test(\"AutomationResult analysis stdout should have the expected value\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Checking abstraction\");",
											"    pm.expect(pm.response.text()).to.include(\"Refining abstraction\");",
											"    pm.expect(pm.response.text()).to.include(\"SafetyResult Unsafe\");",
											"});",
											"pm.test(\"should contain a output.cex file contribution and its contents\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"output.cex</fit:filePath>\");",
											"    pm.expect(pm.response.text()).to.include(\"(XstsState pre_init last_env\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"url": {
									"raw": "{{analysis_provider}}/services/resources/automationResults/{{requestId}}",
									"host": [
										"{{analysis_provider}}"
									],
									"path": [
										"services",
										"resources",
										"automationResults",
										"{{requestId}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "frama-c",
			"item": [
				{
					"name": "create SUT using the compilation provider",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// save the request ID as a global variable for later tests to use -- used as SUT ID",
									"const response = xml2Json(pm.response.text());",
									"var resrouceAbout = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"].$[\"rdf:about\"];",
									"var resourceAboutSplit = resrouceAbout.split(\"/\");",
									"var requestId = resourceAboutSplit[resourceAboutSplit.length-1];",
									"pm.globals.set('requestId', requestId);",
									"",
									"",
									"pm.test(\"Response code should be 201 (created)\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"var compilation_provider = pm.variables.get(\"compilation_provider\");",
									"var sutId = requestId;",
									"pm.globals.set(\"SUT\", compilation_provider + \"/services/resources/sUTs/\" + sutId);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/xml"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/rdf+xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>Theta test request</dcterms:title>\n\t<dcterms:description>Testing Theta theta-xcfa-cli through Unite</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{compilation_provider}}/services/resources/automationPlans/0\" />\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>sourceUrl</oslc:name>\n\t\t\t<rdf:value>http://www.stud.fit.vutbr.cz/~xvasic25/frama-c-example.zip</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>unpackZip</oslc:name>\n\t\t\t<rdf:value>true</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>noCompilation</oslc:name>\n\t\t\t<rdf:value>true</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>"
						},
						"url": {
							"raw": "{{compilation_provider}}/services/resources/createAutomationRequest",
							"host": [
								"{{compilation_provider}}"
							],
							"path": [
								"services",
								"resources",
								"createAutomationRequest"
							]
						}
					},
					"response": []
				},
				{
					"name": "wait for #complete (analysis tests tools/framac/create sut)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var timeoutSeconds = pm.collectionVariables.get('automation_wait_time');",
									"",
									"var waitCounter = pm.globals.get(\"waitCounter\");",
									"if(!waitCounter) {",
									"    waitCounter = 0;",
									"}",
									"",
									"if (pm.response.code != 200) { // wait for the resource to be created",
									"    if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
									"        setTimeout(function(){}, [1000]); // 1 second",
									"        waitCounter++;",
									"        postman.setNextRequest(pm.info.requestName);",
									"    } else { // timeout, reset counter",
									"        waitCounter = 0;",
									"    }",
									"} else { // wait for the automation to complete",
									"    const response = xml2Json(pm.response.text());",
									"    var state = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"][\"oslc_auto:state\"].$[\"rdf:resource\"];",
									"    if (state == \"http://open-services.net/ns/auto#inProgress\") {",
									"        if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
									"            setTimeout(function(){}, [1000]); // 1 second",
									"            waitCounter++;",
									"            postman.setNextRequest(pm.info.requestName);",
									"        } else { // timeout, reset counter",
									"            waitCounter = 0;",
									"        }",
									"    } else { // wait doen, reset counter",
									"            waitCounter = 0;",
									"    }",
									"}",
									"",
									"pm.globals.set(\"waitCounter\", waitCounter);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/rdf+xml"
							}
						],
						"url": {
							"raw": "{{compilation_provider}}/services/resources/automationRequests/{{requestId}}",
							"host": [
								"{{compilation_provider}}"
							],
							"path": [
								"services",
								"resources",
								"automationRequests",
								"{{requestId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "get SUT creation result",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"desiredState should be #complete\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"oslc_auto:desiredState rdf:resource=\\\"http://open-services.net/ns/auto#complete\\\"/>\");",
									"});",
									"pm.test(\"verdict should be #passed\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"oslc_auto:verdict rdf:resource=\\\"http://open-services.net/ns/auto#passed\\\"/>\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/rdf+xml"
							}
						],
						"url": {
							"raw": "{{compilation_provider}}/services/resources/automationResults/{{requestId}}",
							"host": [
								"{{compilation_provider}}"
							],
							"path": [
								"services",
								"resources",
								"automationResults",
								"{{requestId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "see the automation plan",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var serverAddr = pm.variables.get(\"server_address\");",
									"var server_context = pm.variables.get(\"server_context\");",
									"",
									"pm.test(\"Response code should be 200 (OK)\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/rdf+xml"
							}
						],
						"url": {
							"raw": "{{analysis_provider}}/services/resources/automationPlans/frama-c",
							"host": [
								"{{analysis_provider}}"
							],
							"path": [
								"services",
								"resources",
								"automationPlans",
								"frama-c"
							]
						}
					},
					"response": []
				},
				{
					"name": "execute analysis using the tool",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response code should be 201 (created)\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"",
									"// save the request ID as a global variable for later tests to use",
									"const response = xml2Json(pm.response.text());",
									"var resrouceAbout = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"].$[\"rdf:about\"];",
									"var resourceAboutSplit = resrouceAbout.split(\"/\");",
									"var requestId = resourceAboutSplit[resourceAboutSplit.length-1];",
									"pm.globals.set('requestId', requestId);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/xml"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/rdf+xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>Theta test request</dcterms:title>\n\t<dcterms:description>Testing Theta theta-xcfa-cli through Unite</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{analysis_provider}}/services/resources/automationPlans/frama-c\" />\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>options</oslc:name>\n\t\t\t<rdf:value>-eva</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>files</oslc:name>\n\t\t\t<rdf:value>*.c</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>SUT</oslc:name>\n\t\t\t<rdf:value>{{SUT}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>"
						},
						"url": {
							"raw": "{{analysis_provider}}/services/resources/createAutomationRequest",
							"host": [
								"{{analysis_provider}}"
							],
							"path": [
								"services",
								"resources",
								"createAutomationRequest"
							]
						}
					},
					"response": []
				},
				{
					"name": "wait for #complete (analysis tests tools/framac/analyse)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var timeoutSeconds = pm.collectionVariables.get('automation_wait_time');",
									"",
									"var waitCounter = pm.globals.get(\"waitCounter\");",
									"if(!waitCounter) {",
									"    waitCounter = 0;",
									"}",
									"",
									"if (pm.response.code != 200) { // wait for the resource to be created",
									"    if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
									"        setTimeout(function(){}, [1000]); // 1 second",
									"        waitCounter++;",
									"        postman.setNextRequest(pm.info.requestName);",
									"    } else { // timeout, reset counter",
									"        waitCounter = 0;",
									"    }",
									"} else { // wait for the automation to complete",
									"    const response = xml2Json(pm.response.text());",
									"    var state = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"][\"oslc_auto:state\"].$[\"rdf:resource\"];",
									"    if (state == \"http://open-services.net/ns/auto#inProgress\") {",
									"        if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
									"            setTimeout(function(){}, [1000]); // 1 second",
									"            waitCounter++;",
									"            postman.setNextRequest(pm.info.requestName);",
									"        } else { // timeout, reset counter",
									"            waitCounter = 0;",
									"        }",
									"    } else { // wait doen, reset counter",
									"            waitCounter = 0;",
									"    }",
									"}",
									"",
									"pm.globals.set(\"waitCounter\", waitCounter);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/rdf+xml"
							}
						],
						"url": {
							"raw": "{{analysis_provider}}/services/resources/automationRequests/{{requestId}}",
							"host": [
								"{{analysis_provider}}"
							],
							"path": [
								"services",
								"resources",
								"automationRequests",
								"{{requestId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "get analysis result",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// get global variable to use in this test",
									"var requestId = pm.globals.get('requestId');",
									"var AutomationPlanId = pm.variables.get(\"AutomationPlanId\");",
									"var analyser = pm.variables.get(\"analyser\");",
									"var executionParameters= pm.variables.get(\"executionParameters\");",
									"var SUT = pm.variables.get(\"SUT\");",
									"",
									"",
									"pm.test(\"desiredState should be #complete\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"oslc_auto:desiredState rdf:resource=\\\"http://open-services.net/ns/auto#complete\\\"/>\");",
									"});",
									"pm.test(\"verdict should be #passed\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"oslc_auto:verdict rdf:resource=\\\"http://open-services.net/ns/auto#passed\\\"/>\");",
									"});",
									"",
									"",
									"",
									"pm.test(\"AutomationResult statusMessage should have the expected value\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Analysis completed successfully\");",
									"});",
									"pm.test(\"returnCode should be 0\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"<rdf:value>0</rdf:value>\");",
									"});",
									"pm.test(\"AutomationResult analysis stdout should have the expected value\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"7 alarms generated by the analysis:\");",
									"    pm.expect(pm.response.text()).to.include(\"3 invalid memory accesses\");",
									"    pm.expect(pm.response.text()).to.include(\"4 nan or infinite floating-point values\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/rdf+xml"
							}
						],
						"url": {
							"raw": "{{analysis_provider}}/services/resources/automationResults/{{requestId}}",
							"host": [
								"{{analysis_provider}}"
							],
							"path": [
								"services",
								"resources",
								"automationResults",
								"{{requestId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "symbiotic",
			"item": [
				{
					"name": "create SUT using the compilation provider",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// save the request ID as a global variable for later tests to use -- used as SUT ID",
									"const response = xml2Json(pm.response.text());",
									"var resrouceAbout = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"].$[\"rdf:about\"];",
									"var resourceAboutSplit = resrouceAbout.split(\"/\");",
									"var requestId = resourceAboutSplit[resourceAboutSplit.length-1];",
									"pm.globals.set('requestId', requestId);",
									"",
									"",
									"pm.test(\"Response code should be 201 (created)\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"var compilation_provider = pm.variables.get(\"compilation_provider\");",
									"var sutId = requestId;",
									"pm.globals.set(\"SUT\", compilation_provider + \"/services/resources/sUTs/\" + sutId);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/xml"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/rdf+xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>Theta test request</dcterms:title>\n\t<dcterms:description>Testing Theta theta-xcfa-cli through Unite</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{compilation_provider}}/services/resources/automationPlans/0\" />\n\t\n\t<oslc_auto:inputParameter>\n        <oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>sourceBase64</oslc:name>\n\t\t\t<rdf:value>test1.c\nI2luY2x1ZGUgPGFzc2VydC5oPgojZGVmaW5lIE4gMTAKCmV4dGVybiBpbnQgX19WRVJJRklFUl9ub25kZXRfaW50KHZvaWQpOwoKaW50IG1haW4oICkgewogIGludCBhW05dOwogIGZvciAoaW50IGkgPSAwOyBpIDwgTjsgKytpKSB7CgkgIGFbaV0gPSBfX1ZFUklGSUVSX25vbmRldF9pbnQoKTsKICB9CgogIGludCBzd2FwcGVkID0gMTsKICB3aGlsZSAoc3dhcHBlZCkgewogICAgc3dhcHBlZCA9IDA7CiAgICBmb3IgKGludCBpID0gMTsgaSA8IE47ICsraSkgewogICAgICBpZiAoIGFbaSAtIDFdIDwgYVtpXSApIHsKICAgICAgICBpbnQgdCA9IGFbaV07CiAgICAgICAgYVtpXSA9IGFbaSAtIDFdOwogICAgICAgIGFbaS0xXSA9IHQ7CiAgICAgICAgc3dhcHBlZCA9IDE7CiAgICAgIH0KICAgIH0KICB9CgogIGZvciAoaW50IHggPSAwIDsgeCA8IE4gOyB4KysgKSB7CiAgICBmb3IgKGludCB5ID0geCsxIDsgeSA8IE4gOyB5KysgKSB7CiAgICAgIGFzc2VydChhW3hdIDw9IGFbeV0pOwogICAgfQogIH0KICByZXR1cm4gMDsKfQ==</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>noCompilation</oslc:name>\n\t\t\t<rdf:value>true</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>"
						},
						"url": {
							"raw": "{{compilation_provider}}/services/resources/createAutomationRequest",
							"host": [
								"{{compilation_provider}}"
							],
							"path": [
								"services",
								"resources",
								"createAutomationRequest"
							]
						}
					},
					"response": []
				},
				{
					"name": "wait for #complete (analysis tests tools/symbiotic/create sut)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var timeoutSeconds = pm.collectionVariables.get('automation_wait_time');",
									"",
									"var waitCounter = pm.globals.get(\"waitCounter\");",
									"if(!waitCounter) {",
									"    waitCounter = 0;",
									"}",
									"",
									"if (pm.response.code != 200) { // wait for the resource to be created",
									"    if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
									"        setTimeout(function(){}, [1000]); // 1 second",
									"        waitCounter++;",
									"        postman.setNextRequest(pm.info.requestName);",
									"    } else { // timeout, reset counter",
									"        waitCounter = 0;",
									"    }",
									"} else { // wait for the automation to complete",
									"    const response = xml2Json(pm.response.text());",
									"    var state = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"][\"oslc_auto:state\"].$[\"rdf:resource\"];",
									"    if (state == \"http://open-services.net/ns/auto#inProgress\") {",
									"        if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
									"            setTimeout(function(){}, [1000]); // 1 second",
									"            waitCounter++;",
									"            postman.setNextRequest(pm.info.requestName);",
									"        } else { // timeout, reset counter",
									"            waitCounter = 0;",
									"        }",
									"    } else { // wait doen, reset counter",
									"            waitCounter = 0;",
									"    }",
									"}",
									"",
									"pm.globals.set(\"waitCounter\", waitCounter);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/rdf+xml"
							}
						],
						"url": {
							"raw": "{{compilation_provider}}/services/resources/automationRequests/{{requestId}}",
							"host": [
								"{{compilation_provider}}"
							],
							"path": [
								"services",
								"resources",
								"automationRequests",
								"{{requestId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "get SUT creation result",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"desiredState should be #complete\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"oslc_auto:desiredState rdf:resource=\\\"http://open-services.net/ns/auto#complete\\\"/>\");",
									"});",
									"pm.test(\"verdict should be #passed\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"oslc_auto:verdict rdf:resource=\\\"http://open-services.net/ns/auto#passed\\\"/>\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/rdf+xml"
							}
						],
						"url": {
							"raw": "{{compilation_provider}}/services/resources/automationResults/{{requestId}}",
							"host": [
								"{{compilation_provider}}"
							],
							"path": [
								"services",
								"resources",
								"automationResults",
								"{{requestId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "see the automation plan",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var serverAddr = pm.variables.get(\"server_address\");",
									"var server_context = pm.variables.get(\"server_context\");",
									"",
									"pm.test(\"Response code should be 200 (OK)\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/rdf+xml"
							}
						],
						"url": {
							"raw": "{{analysis_provider}}/services/resources/automationPlans/symbiotic",
							"host": [
								"{{analysis_provider}}"
							],
							"path": [
								"services",
								"resources",
								"automationPlans",
								"symbiotic"
							]
						}
					},
					"response": []
				},
				{
					"name": "execute analysis using the tool",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response code should be 201 (created)\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"",
									"// save the request ID as a global variable for later tests to use",
									"const response = xml2Json(pm.response.text());",
									"var resrouceAbout = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"].$[\"rdf:about\"];",
									"var resourceAboutSplit = resrouceAbout.split(\"/\");",
									"var requestId = resourceAboutSplit[resourceAboutSplit.length-1];",
									"pm.globals.set('requestId', requestId);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/xml"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/rdf+xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>test request</dcterms:title>\n\t<dcterms:description>Testing a tool through Unite</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{analysis_provider}}/services/resources/automationPlans/symbiotic\" />\n\t\n    <!-- this is a default parameter\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>exit-on-error</oslc:name>\n\t\t\t<rdf:value>true</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n    -->\n    \n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>symb-timeout</oslc:name>\n\t\t\t<rdf:value>60</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>verifier</oslc:name>\n\t\t\t<rdf:value>klee</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n    <!-- not neccessary if empty \n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>arguments</oslc:name>\n\t\t\t<rdf:value></rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n    -->\n\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>files</oslc:name>\n\t\t\t<rdf:value>*.c</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>SUT</oslc:name>\n\t\t\t<rdf:value>{{SUT}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>"
						},
						"url": {
							"raw": "{{analysis_provider}}/services/resources/createAutomationRequest",
							"host": [
								"{{analysis_provider}}"
							],
							"path": [
								"services",
								"resources",
								"createAutomationRequest"
							]
						}
					},
					"response": []
				},
				{
					"name": "wait for #complete (analysis tests tools/symbiotic/analyse)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var timeoutSeconds = pm.collectionVariables.get('automation_wait_time');",
									"",
									"var waitCounter = pm.globals.get(\"waitCounter\");",
									"if(!waitCounter) {",
									"    waitCounter = 0;",
									"}",
									"",
									"if (pm.response.code != 200) { // wait for the resource to be created",
									"    if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
									"        setTimeout(function(){}, [1000]); // 1 second",
									"        waitCounter++;",
									"        postman.setNextRequest(pm.info.requestName);",
									"    } else { // timeout, reset counter",
									"        waitCounter = 0;",
									"    }",
									"} else { // wait for the automation to complete",
									"    const response = xml2Json(pm.response.text());",
									"    var state = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"][\"oslc_auto:state\"].$[\"rdf:resource\"];",
									"    if (state == \"http://open-services.net/ns/auto#inProgress\") {",
									"        if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
									"            setTimeout(function(){}, [1000]); // 1 second",
									"            waitCounter++;",
									"            postman.setNextRequest(pm.info.requestName);",
									"        } else { // timeout, reset counter",
									"            waitCounter = 0;",
									"        }",
									"    } else { // wait doen, reset counter",
									"            waitCounter = 0;",
									"    }",
									"}",
									"",
									"pm.globals.set(\"waitCounter\", waitCounter);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/rdf+xml"
							}
						],
						"url": {
							"raw": "{{analysis_provider}}/services/resources/automationRequests/{{requestId}}",
							"host": [
								"{{analysis_provider}}"
							],
							"path": [
								"services",
								"resources",
								"automationRequests",
								"{{requestId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "get analysis result",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// get global variable to use in this test",
									"var requestId = pm.globals.get('requestId');",
									"var AutomationPlanId = pm.variables.get(\"AutomationPlanId\");",
									"var analyser = pm.variables.get(\"analyser\");",
									"var executionParameters= pm.variables.get(\"executionParameters\");",
									"var SUT = pm.variables.get(\"SUT\");",
									"",
									"",
									"pm.test(\"desiredState should be #complete\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"oslc_auto:desiredState rdf:resource=\\\"http://open-services.net/ns/auto#complete\\\"/>\");",
									"});",
									"pm.test(\"verdict should be #passed\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"oslc_auto:verdict rdf:resource=\\\"http://open-services.net/ns/auto#passed\\\"/>\");",
									"});",
									"",
									"",
									"",
									"pm.test(\"AutomationResult statusMessage should have the expected value\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Analysis completed successfully\");",
									"});",
									"pm.test(\"returnCode should be 0\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"<rdf:value>0</rdf:value>\");",
									"});",
									"pm.test(\"AutomationResult analysis stdout should have the expected value\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"INFO: Starting verification\");",
									"    pm.expect(pm.response.text()).to.include(\"Error: ASSERTION FAIL: a[x]\");",
									"    pm.expect(pm.response.text()).to.include(\"test1.c:27\");",
									"    pm.expect(pm.response.text()).to.include(\"RESULT: false(unreach-call)\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/rdf+xml"
							}
						],
						"url": {
							"raw": "{{analysis_provider}}/services/resources/automationResults/{{requestId}}?enableInProgressOutputs=true",
							"host": [
								"{{analysis_provider}}"
							],
							"path": [
								"services",
								"resources",
								"automationResults",
								"{{requestId}}"
							],
							"query": [
								{
									"key": "enableInProgressOutputs",
									"value": "true"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "cbmc",
			"item": [
				{
					"name": "create SUT using the compilation provider",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// save the request ID as a global variable for later tests to use -- used as SUT ID",
									"const response = xml2Json(pm.response.text());",
									"var resrouceAbout = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"].$[\"rdf:about\"];",
									"var resourceAboutSplit = resrouceAbout.split(\"/\");",
									"var requestId = resourceAboutSplit[resourceAboutSplit.length-1];",
									"pm.globals.set('requestId', requestId);",
									"",
									"",
									"pm.test(\"Response code should be 201 (created)\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"var compilation_provider = pm.variables.get(\"compilation_provider\");",
									"var sutId = requestId;",
									"pm.globals.set(\"SUT\", compilation_provider + \"/services/resources/sUTs/\" + sutId);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/xml"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/rdf+xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>Theta test request</dcterms:title>\n\t<dcterms:description>Testing Theta theta-xcfa-cli through Unite</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{compilation_provider}}/services/resources/automationPlans/0\" />\n\t\n\t<oslc_auto:inputParameter>\n        <oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>sourceBase64</oslc:name>\n\t\t\t<rdf:value>TestEchoProgram.cpp\nI2luY2x1ZGUgPHN0ZGlvLmg+CgppbnQgbWFpbihpbnQgYXJnYywgY2hhcioqIGFyZ3YpCnsKCXByaW50ZigiJXNcbiIsIGFyZ3ZbMV0pOwoJcmV0dXJuIDA7Cn0K</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>noCompilation</oslc:name>\n\t\t\t<rdf:value>true</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>"
						},
						"url": {
							"raw": "{{compilation_provider}}/services/resources/createAutomationRequest",
							"host": [
								"{{compilation_provider}}"
							],
							"path": [
								"services",
								"resources",
								"createAutomationRequest"
							]
						}
					},
					"response": []
				},
				{
					"name": "wait for #complete (analysis tests tools/cbmc/create sut)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var timeoutSeconds = pm.collectionVariables.get('automation_wait_time');",
									"",
									"var waitCounter = pm.globals.get(\"waitCounter\");",
									"if(!waitCounter) {",
									"    waitCounter = 0;",
									"}",
									"",
									"if (pm.response.code != 200) { // wait for the resource to be created",
									"    if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
									"        setTimeout(function(){}, [1000]); // 1 second",
									"        waitCounter++;",
									"        postman.setNextRequest(pm.info.requestName);",
									"    } else { // timeout, reset counter",
									"        waitCounter = 0;",
									"    }",
									"} else { // wait for the automation to complete",
									"    const response = xml2Json(pm.response.text());",
									"    var state = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"][\"oslc_auto:state\"].$[\"rdf:resource\"];",
									"    if (state == \"http://open-services.net/ns/auto#inProgress\") {",
									"        if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
									"            setTimeout(function(){}, [1000]); // 1 second",
									"            waitCounter++;",
									"            postman.setNextRequest(pm.info.requestName);",
									"        } else { // timeout, reset counter",
									"            waitCounter = 0;",
									"        }",
									"    } else { // wait doen, reset counter",
									"            waitCounter = 0;",
									"    }",
									"}",
									"",
									"pm.globals.set(\"waitCounter\", waitCounter);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/rdf+xml"
							}
						],
						"url": {
							"raw": "{{compilation_provider}}/services/resources/automationRequests/{{requestId}}",
							"host": [
								"{{compilation_provider}}"
							],
							"path": [
								"services",
								"resources",
								"automationRequests",
								"{{requestId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "get SUT creation result",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"desiredState should be #complete\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"oslc_auto:desiredState rdf:resource=\\\"http://open-services.net/ns/auto#complete\\\"/>\");",
									"});",
									"pm.test(\"verdict should be #passed\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"oslc_auto:verdict rdf:resource=\\\"http://open-services.net/ns/auto#passed\\\"/>\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/rdf+xml"
							}
						],
						"url": {
							"raw": "{{compilation_provider}}/services/resources/automationResults/{{requestId}}",
							"host": [
								"{{compilation_provider}}"
							],
							"path": [
								"services",
								"resources",
								"automationResults",
								"{{requestId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "see the automation plan",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var serverAddr = pm.variables.get(\"server_address\");",
									"var server_context = pm.variables.get(\"server_context\");",
									"",
									"pm.test(\"Response code should be 200 (OK)\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/rdf+xml"
							}
						],
						"url": {
							"raw": "{{analysis_provider}}/services/resources/automationPlans/cbmc",
							"host": [
								"{{analysis_provider}}"
							],
							"path": [
								"services",
								"resources",
								"automationPlans",
								"cbmc"
							]
						}
					},
					"response": []
				},
				{
					"name": "execute analysis using the tool",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response code should be 201 (created)\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"",
									"// save the request ID as a global variable for later tests to use",
									"const response = xml2Json(pm.response.text());",
									"var resrouceAbout = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"].$[\"rdf:about\"];",
									"var resourceAboutSplit = resrouceAbout.split(\"/\");",
									"var requestId = resourceAboutSplit[resourceAboutSplit.length-1];",
									"pm.globals.set('requestId', requestId);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/xml"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/rdf+xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>test request</dcterms:title>\n\t<dcterms:description>Testing a tool through Unite</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{analysis_provider}}/services/resources/automationPlans/cbmc\" />\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>arguments</oslc:name>\n\t\t\t<rdf:value></rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>files</oslc:name>\n\t\t\t<rdf:value>*.cpp</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>SUT</oslc:name>\n\t\t\t<rdf:value>{{SUT}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>"
						},
						"url": {
							"raw": "{{analysis_provider}}/services/resources/createAutomationRequest",
							"host": [
								"{{analysis_provider}}"
							],
							"path": [
								"services",
								"resources",
								"createAutomationRequest"
							]
						}
					},
					"response": []
				},
				{
					"name": "wait for #complete (analysis tests tools/cbmc/analyse)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var timeoutSeconds = pm.collectionVariables.get('automation_wait_time');",
									"",
									"var waitCounter = pm.globals.get(\"waitCounter\");",
									"if(!waitCounter) {",
									"    waitCounter = 0;",
									"}",
									"",
									"if (pm.response.code != 200) { // wait for the resource to be created",
									"    if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
									"        setTimeout(function(){}, [1000]); // 1 second",
									"        waitCounter++;",
									"        postman.setNextRequest(pm.info.requestName);",
									"    } else { // timeout, reset counter",
									"        waitCounter = 0;",
									"    }",
									"} else { // wait for the automation to complete",
									"    const response = xml2Json(pm.response.text());",
									"    var state = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"][\"oslc_auto:state\"].$[\"rdf:resource\"];",
									"    if (state == \"http://open-services.net/ns/auto#inProgress\") {",
									"        if (waitCounter < timeoutSeconds) { // timout running, wait, incerement counter",
									"            setTimeout(function(){}, [1000]); // 1 second",
									"            waitCounter++;",
									"            postman.setNextRequest(pm.info.requestName);",
									"        } else { // timeout, reset counter",
									"            waitCounter = 0;",
									"        }",
									"    } else { // wait doen, reset counter",
									"            waitCounter = 0;",
									"    }",
									"}",
									"",
									"pm.globals.set(\"waitCounter\", waitCounter);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/rdf+xml"
							}
						],
						"url": {
							"raw": "{{analysis_provider}}/services/resources/automationRequests/{{requestId}}",
							"host": [
								"{{analysis_provider}}"
							],
							"path": [
								"services",
								"resources",
								"automationRequests",
								"{{requestId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "get analysis result",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// get global variable to use in this test",
									"var requestId = pm.globals.get('requestId');",
									"var AutomationPlanId = pm.variables.get(\"AutomationPlanId\");",
									"var analyser = pm.variables.get(\"analyser\");",
									"var executionParameters= pm.variables.get(\"executionParameters\");",
									"var SUT = pm.variables.get(\"SUT\");",
									"",
									"",
									"pm.test(\"desiredState should be #complete\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"oslc_auto:desiredState rdf:resource=\\\"http://open-services.net/ns/auto#complete\\\"/>\");",
									"});",
									"pm.test(\"verdict should be #passed\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"oslc_auto:verdict rdf:resource=\\\"http://open-services.net/ns/auto#passed\\\"/>\");",
									"});",
									"",
									"",
									"",
									"pm.test(\"AutomationResult statusMessage should have the expected value\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Analysis completed successfully\");",
									"});",
									"pm.test(\"returnCode should be 0\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"<rdf:value>0</rdf:value>\");",
									"});",
									"pm.test(\"AutomationResult analysis stdout should have the expected value\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Starting Bounded Model Checking\");",
									"    pm.expect(pm.response.text()).to.include(\"VERIFICATION SUCCESSFUL\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/rdf+xml"
							}
						],
						"url": {
							"raw": "{{analysis_provider}}/services/resources/automationResults/{{requestId}}",
							"host": [
								"{{analysis_provider}}"
							],
							"path": [
								"services",
								"resources",
								"automationResults",
								"{{requestId}}"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "basic",
		"basic": [
			{
				"key": "password",
				"value": "{{password}}",
				"type": "string"
			},
			{
				"key": "username",
				"value": "{{username}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "analysis_provider",
			"value": "http://localhost:8080/analysis",
			"type": "string"
		},
		{
			"key": "compilation_provider",
			"value": "http://localhost:8081/compilation"
		},
		{
			"key": "username",
			"value": "user"
		},
		{
			"key": "password",
			"value": "user"
		},
		{
			"key": "automation_wait_time",
			"value": "30"
		}
	]
}