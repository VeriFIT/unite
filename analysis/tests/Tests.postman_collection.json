{
	"info": {
		"_postman_id": "7f891330-33f5-433e-9008-056b03138ed9",
		"name": "Analysis Tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Core Funcionality",
			"item": [
				{
					"name": "basic use case",
					"item": [
						{
							"name": "create SUT using the compilation provider",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "28eb1cf1-a957-444a-b541-0affedf688d7",
										"exec": [
											"// save the request ID as a global variable for later tests to use -- used as SUT ID",
											"const response = xml2Json(pm.response.text());",
											"var resrouceAbout = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"].$[\"rdf:about\"];",
											"var resourceAboutSplit = resrouceAbout.split(\"/\");",
											"var requestId = resourceAboutSplit[resourceAboutSplit.length-1];",
											"pm.globals.set('sutId', requestId);",
											"",
											"pm.test(\"Response code should be 201 (created)\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "53694edb-628d-4044-b35a-1fec5eecd915",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/xml"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>analysis test</dcterms:title>\n\t<dcterms:description>analysis test</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{compilation_provider}}/services/serviceProviders/A0/resources/automationPlans/0\" />\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>sourceGit</oslc:name>\n\t\t\t<rdf:value>https://github.com/od42/test.git</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>buildCommand</oslc:name>\n\t\t\t<rdf:value>gcc -g TestEchoProgram.cpp -o my_echo</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>launchCommand</oslc:name>\n\t\t\t<rdf:value>./my_echo</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>"
								},
								"url": {
									"raw": "{{compilation_provider}}/services/serviceProviders/A0/resources/createAutoRequest",
									"host": [
										"{{compilation_provider}}"
									],
									"path": [
										"services",
										"serviceProviders",
										"A0",
										"resources",
										"createAutoRequest"
									]
								}
							},
							"response": []
						},
						{
							"name": "predefined AutomationPlan dummy",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "061d61ed-5a4f-4d37-a861-10e856448e8b",
										"exec": [
											"var serverAddr = pm.variables.get(\"server_address\");",
											"var server_context = pm.variables.get(\"server_context\");",
											"",
											"pm.test(\"Response code should be 200 (OK)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Response body should contain an AutomationPlan (id:dummy)\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:AutomationPlan rdf:about=\\\"\" + serverAddr + \"/\" + server_context + \"/services/serviceProviders/A0/resources/automationPlans/dummy\");",
											"});",
											"pm.test(\"AutomationPlan should contain a dcterms:title property\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:title\");",
											"});",
											"pm.test(\"AutomationPlan should contain a dcterms:created property\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:created\");",
											"});",
											"pm.test(\"AutomationPlan should contain a dcterms:modified property\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:modified\");",
											"});",
											"pm.test(\"AutomationPlan should contain a <dcterms:creator property\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:creator\");",
											"});",
											"pm.test(\"AutomationPlan should contain a arguments parameter definition\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<oslc:name>arguments</oslc:name>\");",
											"});",
											"pm.test(\"AutomationPlan should contain a launchSUT parameter definition\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<oslc:name>launchSUT</oslc:name>\");",
											"});",
											"pm.test(\"AutomationPlan should contain a SUT parameter definition\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<oslc:name>SUT</oslc:name>\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "36a188ea-5f2f-4520-9d4e-058368bf02f3",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/serviceProviders/A0/resources/automationPlans/dummy",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"serviceProviders",
										"A0",
										"resources",
										"automationPlans",
										"dummy"
									]
								}
							},
							"response": []
						},
						{
							"name": "create AutomationRequest",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "28eb1cf1-a957-444a-b541-0affedf688d7",
										"exec": [
											"pm.test(\"Response code should be 201 (created)\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"",
											"// save the request ID as a global variable for later tests to use",
											"const response = xml2Json(pm.response.text());",
											"var resrouceAbout = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"].$[\"rdf:about\"];",
											"var resourceAboutSplit = resrouceAbout.split(\"/\");",
											"var requestId = resourceAboutSplit[resourceAboutSplit.length-1];",
											"pm.globals.set('requestId', requestId);",
											"",
											"// get global variable to use in this test",
											"var serverAddr = pm.variables.get(\"server_address\");",
											"var server_context = pm.variables.get(\"server_context\");",
											"var AutoPlanId = pm.globals.get(\"AutoPlanId\");",
											"var test_arguments = pm.globals.get(\"arguments\");",
											"var SUT = pm.globals.get(\"SUT\");",
											"var reqTitle = pm.globals.get(\"reqTitle\");",
											"var reqDescription = pm.globals.get(\"reqDescription\");",
											"var reqCreator = pm.globals.get(\"reqCreator\");",
											"",
											"",
											"",
											"",
											"pm.test(\"Response body should contain an AutomationRequest\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:AutomationRequest rdf:about=\\\"\" + serverAddr + \"/\" + server_context + \"/services/serviceProviders/A0/resources/automationRequests/\" + requestId);",
											"});",
											"pm.test(\"AutomationRequest state should be #inProgress\", function () {",
											"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#new\\\"/>\");",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#inProgress\\\"/>\");",
											"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#complete\\\"/>\");",
											"});",
											"pm.test(\"AutomationRequest desiredState should be #complete\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:desiredState rdf:resource=\\\"http://open-services.net/ns/auto#complete\\\"/>\");",
											"});",
											"pm.test(\"AutomationRequest should contain a executesAutomationPlan property\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:executesAutomationPlan rdf:resource=\\\"\" + serverAddr + \"/\" + server_context + \"/services/serviceProviders/A0/resources/automationPlans/\");",
											"});",
											"pm.test(\"AutomationRequest executesAutomationPlan should match the AutomationPlan with ID \" + AutoPlanId, function () {",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:executesAutomationPlan rdf:resource=\\\"\" + serverAddr + \"/\" + server_context + \"/services/serviceProviders/A0/resources/automationPlans/\" + AutoPlanId);",
											"});",
											"pm.test(\"AutomationRequest should contain the expected dcterms:title property\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:title rdf:parseType=\\\"Literal\\\">\" + reqTitle + \"</dcterms:title>\");",
											"});",
											"pm.test(\"AutomationRequest should contain the expected dcterms:identifier property\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:identifier>\" + requestId + \"</dcterms:identifier>\");",
											"});",
											"pm.test(\"AutomationRequest contain the expected dcterms:creator property\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:creator rdf:resource=\\\"\" + reqCreator + \"\\\"/>\");",
											"});",
											"pm.test(\"AutomationRequest contain the expected dcterms:description property\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:description rdf:parseType=\\\"Literal\\\">\" + reqDescription + \"</dcterms:description>\");",
											"});",
											"pm.test(\"AutomationRequest should contain a dcterms:created  property\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:created\");",
											"});",
											"pm.test(\"AutomationRequest should contain a dcterms:modified  property\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:modified\");",
											"});",
											"pm.test(\"AutomationRequest should contain a arguments input parameter\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<oslc:name>arguments</oslc:name>\");",
											"});",
											"pm.test(\"AutomationRequest should contain the expected arguments input value\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<rdf:value rdf:parseType=\\\"Literal\\\">\" + test_arguments + \"</rdf:value>\");",
											"});",
											"pm.test(\"AutomationRequest should contain a SUT input parameter\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<oslc:name>SUT</oslc:name>\");",
											"});",
											"pm.test(\"AutomationRequest should contain the expected SUT input value\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<rdf:value rdf:parseType=\\\"Literal\\\">\" + SUT + \"</rdf:value>\");",
											"});",
											"pm.test(\"AutomationRequest should contain a producedAutomationResult refference property\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:producedAutomationResult\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "53694edb-628d-4044-b35a-1fec5eecd915",
										"exec": [
											"// wait for the compilation to finish",
											"var result_wait_time = pm.variables.get('result_wait_time');",
											"setTimeout(function(){}, [result_wait_time]);",
											"",
											"// setup global variables for future requests (GETs)",
											"// attempt to make this sequence of requests into a template that can then be change in this place to change the test",
											"",
											"pm.globals.set(\"AutoPlanId\", \"dummy\");",
											"",
											"pm.globals.set(\"arguments\", \"test_arguments\");",
											"",
											"var compilation_provider = pm.variables.get(\"compilation_provider\");",
											"var sutId = pm.globals.get(\"sutId\");",
											"pm.globals.set(\"SUT\", compilation_provider + \"/services/serviceProviders/A0/resources/sUTs/\" + sutId);",
											"",
											"pm.globals.set(\"reqCreator\", \"https://pajda.fit.vutbr.cz/xvasic\");",
											"pm.globals.set(\"reqTitle\", \"Test title\");",
											"pm.globals.set(\"reqDescription\", \"Test description\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/xml"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>{{reqTitle}}</dcterms:title>\n\t<dcterms:description>{{reqDescription}}</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{server_address}}/{{server_context}}/services/serviceProviders/A0/resources/automationPlans/{{AutoPlanId}}\" />\n\t<dcterms:creator rdf:resource=\"{{reqCreator}}\"/>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>arguments</oslc:name>\n\t\t\t<rdf:value>{{arguments}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>SUT</oslc:name>\n\t\t\t<rdf:value>{{SUT}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/serviceProviders/A0/resources/createAutoRequest",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"serviceProviders",
										"A0",
										"resources",
										"createAutoRequest"
									]
								}
							},
							"response": []
						},
						{
							"name": "get AutoRequest - inProgress",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "061d61ed-5a4f-4d37-a861-10e856448e8b",
										"exec": [
											"// get global variable to use in this test",
											"var requestId = pm.globals.get('requestId');",
											"var serverAddr = pm.variables.get(\"server_address\");",
											"var server_context = pm.variables.get(\"server_context\");",
											"var AutoPlanId = pm.variables.get(\"AutoPlanId\");",
											"var test_arguments = pm.variables.get(\"arguments\");",
											"var SUT = pm.variables.get(\"SUT\");",
											"var reqTitle = pm.variables.get(\"reqTitle\");",
											"var reqDescription = pm.variables.get(\"reqDescription\");",
											"var reqCreator = pm.variables.get(\"reqCreator\");",
											"",
											"",
											"",
											"pm.test(\"Response code should be 200 (OK)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Response body should contain an AutomationRequest\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:AutomationRequest rdf:about=\\\"\" + serverAddr + \"/\" + server_context + \"/services/serviceProviders/A0/resources/automationRequests/\");",
											"});",
											"pm.test(\"AutomationRequest should have the expected ID: \" + requestId, function () {",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:AutomationRequest rdf:about=\\\"\" + serverAddr + \"/\" + server_context + \"/services/serviceProviders/A0/resources/automationRequests/\" + requestId);",
											"});",
											"pm.test(\"AutomationRequest desiredState should be #complete\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:desiredState rdf:resource=\\\"http://open-services.net/ns/auto#complete\\\"/>\");",
											"});",
											"pm.test(\"AutomationRequest should contain a executesAutomationPlan property\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:executesAutomationPlan rdf:resource=\\\"\" + serverAddr + \"/\" + server_context + \"/services/serviceProviders/A0/resources/automationPlans/\");",
											"});",
											"pm.test(\"AutomationRequest executesAutomationPlan should match the AutomationPlan with ID \" + AutoPlanId, function () {",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:executesAutomationPlan rdf:resource=\\\"\" + serverAddr + \"/\" + server_context + \"/services/serviceProviders/A0/resources/automationPlans/\" + AutoPlanId);",
											"});",
											"pm.test(\"AutomationRequest should contain the expected dcterms:title property\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:title rdf:parseType=\\\"Literal\\\">\" + reqTitle + \"</dcterms:title>\");",
											"});",
											"pm.test(\"AutomationRequest should contain the expected dcterms:identifier property\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:identifier>\" + requestId + \"</dcterms:identifier>\");",
											"});",
											"pm.test(\"AutomationRequest contain the expected dcterms:creator property\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:creator rdf:resource=\\\"\" + reqCreator + \"\\\"/>\");",
											"});",
											"pm.test(\"AutomationRequest contain the expected dcterms:description property\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:description rdf:parseType=\\\"Literal\\\">\" + reqDescription + \"</dcterms:description>\");",
											"});",
											"pm.test(\"AutomationRequest should contain a dcterms:created  property\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:created\");",
											"});",
											"pm.test(\"AutomationRequest should contain a dcterms:modified  property\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:modified\");",
											"});",
											"pm.test(\"AutomationRequest should contain a arguments input parameter\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<oslc:name>arguments</oslc:name>\");",
											"});",
											"pm.test(\"AutomationRequest should contain the expected arguments input value\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<rdf:value rdf:parseType=\\\"Literal\\\">\" + test_arguments + \"</rdf:value>\");",
											"});",
											"pm.test(\"AutomationRequest should contain a SUT input parameter\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<oslc:name>SUT</oslc:name>\");",
											"});",
											"pm.test(\"AutomationRequest should contain the expected SUT input value\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<rdf:value rdf:parseType=\\\"Literal\\\">\" + SUT + \"</rdf:value>\");",
											"});",
											"",
											"",
											"// these are the only two differences compared to the last test request",
											"pm.test(\"AutomationRequest state should be #inProgress\", function () {",
											"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#new\\\"/>\");",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#inProgress\\\"/>\");",
											"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#complete\\\"/>\");",
											"});",
											"pm.test(\"AutomationRequest should contain a producedAutomationResult refference property with the expected ID (same as the request)\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:producedAutomationResult rdf:resource=\\\"\" + serverAddr + \"/\" + server_context + \"/services/serviceProviders/A0/resources/automationResults/\" + requestId);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "987a0d2e-cb4c-4628-8234-aedbd9b95554",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/serviceProviders/A0/resources/automationRequests/{{requestId}}",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"serviceProviders",
										"A0",
										"resources",
										"automationRequests",
										"{{requestId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get AutomatinResult - inProgress",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2ac8143a-00b8-4352-9f49-a6cfaba6f982",
										"exec": [
											"// get global variable to use in this test",
											"var requestId = pm.globals.get('requestId');",
											"var serverAddr = pm.variables.get(\"server_address\");",
											"var server_context = pm.variables.get(\"server_context\");",
											"var AutoPlanId = pm.variables.get(\"AutoPlanId\");",
											"var test_arguments = pm.variables.get(\"arguments\");",
											"var SUT = pm.variables.get(\"SUT\");",
											"var reqTitle = pm.variables.get(\"reqTitle\");",
											"var reqDescription = pm.variables.get(\"reqDescription\");",
											"var reqCreator = pm.variables.get(\"reqCreator\");",
											"",
											"",
											"pm.test(\"Response code should be 200 (OK)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Response body should contain an AutomationResult\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:AutomationResult rdf:about=\\\"\" + serverAddr + \"/\" + server_context + \"/services/serviceProviders/A0/resources/automationResults/\");",
											"});",
											"pm.test(\"AutomationResult should have the expected ID: \" + requestId, function () {",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:AutomationResult rdf:about=\\\"\" + serverAddr + \"/\" + server_context + \"/services/serviceProviders/A0/resources/automationResults/\" + requestId);",
											"});",
											"pm.test(\"AutomationResult desiredState should be #complete\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:desiredState rdf:resource=\\\"http://open-services.net/ns/auto#complete\\\"/>\");",
											"});",
											"pm.test(\"AutomationResult should contain a producedByAutomationRequest property\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:producedByAutomationRequest rdf:resource=\\\"\" + serverAddr + \"/\" + server_context + \"/services/serviceProviders/A0/resources/automationRequests/\");",
											"});",
											"pm.test(\"AutomationResult producedByAutomationRequest should match the AutomationRequest with ID \" + requestId, function () {",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:producedByAutomationRequest rdf:resource=\\\"\" + serverAddr + \"/\" + server_context + \"/services/serviceProviders/A0/resources/automationRequests/\" + requestId);",
											"});",
											"pm.test(\"AutomationResult should contain the expected dcterms:title property\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:title rdf:parseType=\\\"Literal\\\">Result - \" + reqTitle + \"</dcterms:title>\");",
											"});",
											"pm.test(\"AutomationResult should contain the expected dcterms:identifier property\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:identifier>\" + requestId + \"</dcterms:identifier>\");",
											"});",
											"pm.test(\"AutomationResult contain the expected dcterms:creator property\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:creator rdf:resource=\\\"\" + reqCreator + \"\\\"/>\");",
											"});",
											"pm.test(\"AutomationResult should contain a dcterms:created  property\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:created\");",
											"});",
											"pm.test(\"AutomationResult should contain a dcterms:modified  property\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:modified\");",
											"});",
											"pm.test(\"AutomationRequest should contain the expected arguments input value\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<rdf:value rdf:parseType=\\\"Literal\\\">\" + test_arguments + \"</rdf:value>\");",
											"});",
											"pm.test(\"AutomationRequest should contain a launchSUT output parameter definition\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<oslc:name>launchSUT</oslc:name>\");",
											"});",
											"pm.test(\"AutomationRequest should contain a SUT input parameter\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<oslc:name>SUT</oslc:name>\");",
											"});",
											"pm.test(\"AutomationRequest should contain the expected SUT input value\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<rdf:value rdf:parseType=\\\"Literal\\\">\" + SUT + \"</rdf:value>\");",
											"});",
											"",
											"pm.test(\"AutomationResult state should be #inProgress\", function () {",
											"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#new\\\"/>\");",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#inProgress\\\"/>\");",
											"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#complete\\\"/>\");",
											"});",
											"pm.test(\"AutomationResult verdict should be #unavailable\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:verdict rdf:resource=\\\"http://open-services.net/ns/auto#unavailable\\\"/>\");",
											"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:verdict rdf:resource=\\\"http://open-services.net/ns/auto#passed\\\"/>\");",
											"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#error\\\"/>\");",
											"});",
											"pm.test(\"AutomationResult should not contain any contributions\", function () {",
											"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:contribution\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "0e22f9d0-a6e8-43bc-8f87-b0861919c0de",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/serviceProviders/A0/resources/automationResults/{{requestId}}",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"serviceProviders",
										"A0",
										"resources",
										"automationResults",
										"{{requestId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get AutoRequest - complete",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "061d61ed-5a4f-4d37-a861-10e856448e8b",
										"exec": [
											"// get global variable to use in this test",
											"var requestId = pm.globals.get('requestId');",
											"var serverAddr = pm.variables.get(\"server_address\");",
											"var server_context = pm.variables.get(\"server_context\");",
											"var AutoPlanId = pm.variables.get(\"AutoPlanId\");",
											"var test_arguments = pm.variables.get(\"arguments\");",
											"var SUT = pm.variables.get(\"SUT\");",
											"var reqTitle = pm.variables.get(\"reqTitle\");",
											"var reqDescription = pm.variables.get(\"reqDescription\");",
											"var reqCreator = pm.variables.get(\"reqCreator\");",
											"",
											"",
											"",
											"pm.test(\"Response code should be 200 (OK)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Response body should contain an AutomationRequest\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:AutomationRequest rdf:about=\\\"\" + serverAddr + \"/\" + server_context + \"/services/serviceProviders/A0/resources/automationRequests/\");",
											"});",
											"pm.test(\"AutomationRequest should have the expected ID: \" + requestId, function () {",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:AutomationRequest rdf:about=\\\"\" + serverAddr + \"/\" + server_context + \"/services/serviceProviders/A0/resources/automationRequests/\" + requestId);",
											"});",
											"pm.test(\"AutomationRequest desiredState should be #complete\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:desiredState rdf:resource=\\\"http://open-services.net/ns/auto#complete\\\"/>\");",
											"});",
											"pm.test(\"AutomationRequest should contain a executesAutomationPlan property\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:executesAutomationPlan rdf:resource=\\\"\" + serverAddr + \"/\" + server_context + \"/services/serviceProviders/A0/resources/automationPlans/\");",
											"});",
											"pm.test(\"AutomationRequest executesAutomationPlan should match the AutomationPlan with ID \" + AutoPlanId, function () {",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:executesAutomationPlan rdf:resource=\\\"\" + serverAddr + \"/\" + server_context + \"/services/serviceProviders/A0/resources/automationPlans/\" + AutoPlanId);",
											"});",
											"pm.test(\"AutomationRequest should contain the expected dcterms:title property\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:title rdf:parseType=\\\"Literal\\\">\" + reqTitle + \"</dcterms:title>\");",
											"});",
											"pm.test(\"AutomationRequest should contain the expected dcterms:identifier property\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:identifier>\" + requestId + \"</dcterms:identifier>\");",
											"});",
											"pm.test(\"AutomationRequest contain the expected dcterms:creator property\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:creator rdf:resource=\\\"\" + reqCreator + \"\\\"/>\");",
											"});",
											"pm.test(\"AutomationRequest contain the expected dcterms:description property\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:description rdf:parseType=\\\"Literal\\\">\" + reqDescription + \"</dcterms:description>\");",
											"});",
											"pm.test(\"AutomationRequest should contain a dcterms:created  property\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:created\");",
											"});",
											"pm.test(\"AutomationRequest should contain a dcterms:modified  property\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:modified\");",
											"});",
											"pm.test(\"AutomationRequest should contain a arguments input parameter\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<oslc:name>arguments</oslc:name>\");",
											"});",
											"pm.test(\"AutomationRequest should contain the expected arguments input value\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<rdf:value rdf:parseType=\\\"Literal\\\">\" + test_arguments + \"</rdf:value>\");",
											"});",
											"pm.test(\"AutomationRequest should contain a SUT input parameter\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<oslc:name>SUT</oslc:name>\");",
											"});",
											"pm.test(\"AutomationRequest should contain the expected SUT input value\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<rdf:value rdf:parseType=\\\"Literal\\\">\" + SUT + \"</rdf:value>\");",
											"});",
											"",
											"",
											"// this is the only difference compared to the last test request",
											"pm.test(\"AutomationRequest state should be #inProgress\", function () {",
											"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#new\\\"/>\");",
											"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#inProgress\\\"/>\");",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#complete\\\"/>\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "8baa5ba6-8bc9-44f8-950a-dbad0a093e21",
										"exec": [
											"// wait for the request execution to finish",
											" var result_wait_time = pm.variables.get('result_wait_time');",
											" setTimeout(function(){}, [5000]);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/serviceProviders/A0/resources/automationRequests/{{requestId}}",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"serviceProviders",
										"A0",
										"resources",
										"automationRequests",
										"{{requestId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get AutomatinResult - complete",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2ac8143a-00b8-4352-9f49-a6cfaba6f982",
										"exec": [
											"// get global variable to use in this test",
											"var requestId = pm.globals.get('requestId');",
											"var serverAddr = pm.variables.get(\"server_address\");",
											"var server_context = pm.variables.get(\"server_context\");",
											"var AutoPlanId = pm.variables.get(\"AutoPlanId\");",
											"var test_arguments = pm.variables.get(\"arguments\");",
											"var SUT = pm.variables.get(\"SUT\");",
											"var reqTitle = pm.variables.get(\"reqTitle\");",
											"var reqDescription = pm.variables.get(\"reqDescription\");",
											"var reqCreator = pm.variables.get(\"reqCreator\");",
											"",
											"",
											"pm.test(\"Response code should be 200 (OK)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Response body should contain an AutomationResult\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:AutomationResult rdf:about=\\\"\" + serverAddr + \"/\" + server_context + \"/services/serviceProviders/A0/resources/automationResults/\");",
											"});",
											"pm.test(\"AutomationResult should have the expected ID: \" + requestId, function () {",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:AutomationResult rdf:about=\\\"\" + serverAddr + \"/\" + server_context + \"/services/serviceProviders/A0/resources/automationResults/\" + requestId);",
											"});",
											"pm.test(\"AutomationResult desiredState should be #complete\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:desiredState rdf:resource=\\\"http://open-services.net/ns/auto#complete\\\"/>\");",
											"});",
											"pm.test(\"AutomationResult should contain a producedByAutomationRequest property\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:producedByAutomationRequest rdf:resource=\\\"\" + serverAddr + \"/\" + server_context + \"/services/serviceProviders/A0/resources/automationRequests/\");",
											"});",
											"pm.test(\"AutomationResult producedByAutomationRequest should match the AutomationRequest with ID \" + requestId, function () {",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:producedByAutomationRequest rdf:resource=\\\"\" + serverAddr + \"/\" + server_context + \"/services/serviceProviders/A0/resources/automationRequests/\" + requestId);",
											"});",
											"pm.test(\"AutomationResult should contain the expected dcterms:title property\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:title rdf:parseType=\\\"Literal\\\">Result - \" + reqTitle + \"</dcterms:title>\");",
											"});",
											"pm.test(\"AutomationResult should contain the expected dcterms:identifier property\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:identifier>\" + requestId + \"</dcterms:identifier>\");",
											"});",
											"pm.test(\"AutomationResult contain the expected dcterms:creator property\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:creator rdf:resource=\\\"\" + reqCreator + \"\\\"/>\");",
											"});",
											"pm.test(\"AutomationResult should contain a dcterms:created  property\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:created\");",
											"});",
											"pm.test(\"AutomationResult should contain a dcterms:modified  property\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:modified\");",
											"});",
											"pm.test(\"AutomationRequest should contain the expected arguments input value\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<rdf:value rdf:parseType=\\\"Literal\\\">\" + test_arguments + \"</rdf:value>\");",
											"});",
											"pm.test(\"AutomationRequest should contain a launchSUT input parameter definition\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<oslc:name>launchSUT</oslc:name>\");",
											"});",
											"pm.test(\"AutomationRequest should contain a SUT output parameter\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<oslc:name>SUT</oslc:name>\");",
											"});",
											"pm.test(\"AutomationRequest should contain the expected SUT input value\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<rdf:value rdf:parseType=\\\"Literal\\\">\" + SUT + \"</rdf:value>\");",
											"});",
											"",
											"",
											"pm.test(\"AutomationResult state should be #complete\", function () {",
											"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#new\\\"/>\");",
											"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#inProgress\\\"/>\");",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#complete\\\"/>\");",
											"});",
											"pm.test(\"AutomationResult verdict should be #passed\", function () {",
											"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:verdict rdf:resource=\\\"http://open-services.net/ns/auto#unavailable\\\"/>\");",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:verdict rdf:resource=\\\"http://open-services.net/ns/auto#passed\\\"/>\");",
											"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#error\\\"/>\");",
											"});",
											"pm.test(\"AutomationResult should contain contributions\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:contribution\");",
											"});",
											"pm.test(\"AutomationResult should contain analysis stdout\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:title rdf:parseType=\\\"Literal\\\">Analysis stdout</dcterms:title>\");",
											"});",
											"pm.test(\"AutomationResult analysis stdout should have the expected value\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<rdf:value rdf:parseType=\\\"Literal\\\"># Executing: \");",
											"    pm.expect(pm.response.text()).to.include(\"# Analysis completed successfully\\nDummy tool!\");",
											"});",
											"pm.test(\"AutomationResult should contain analysis stderr\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:title rdf:parseType=\\\"Literal\\\">Analysis stderr</dcterms:title>\");",
											"});",
											"pm.test(\"AutomationResult analysis stderr be empty (~)\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<rdf:value rdf:parseType=\\\"Literal\\\"></rdf:value>\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "0e22f9d0-a6e8-43bc-8f87-b0861919c0de",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/serviceProviders/A0/resources/automationResults/{{requestId}}",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"serviceProviders",
										"A0",
										"resources",
										"automationResults",
										"{{requestId}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Common Input Parameters",
					"item": [
						{
							"name": "pre init",
							"item": [
								{
									"name": "create SUT using the compilation provider",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "42ac2c07-0fd7-46a9-a40d-2aa837e0d6d6",
												"exec": [
													"// save the request ID as a global variable for later tests to use -- used as SUT ID",
													"const response = xml2Json(pm.response.text());",
													"var resrouceAbout = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"].$[\"rdf:about\"];",
													"var resourceAboutSplit = resrouceAbout.split(\"/\");",
													"var requestId = resourceAboutSplit[resourceAboutSplit.length-1];",
													"pm.globals.set('sutId', requestId);",
													"",
													"pm.test(\"Response code should be 201 (created)\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"// wait for the request execution to finish",
													"var result_wait_time = pm.variables.get('result_wait_time');",
													"setTimeout(function(){}, [result_wait_time]);",
													"",
													"",
													"var compilation_provider = pm.variables.get(\"compilation_provider\");",
													"var sutId = pm.globals.get(\"sutId\");",
													"pm.globals.set(\"SUT\", compilation_provider + \"/services/serviceProviders/A0/resources/sUTs/\" + sutId);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "9a6efdd9-7607-403c-91ff-b3b664eeb91b",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/xml"
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>analysis test</dcterms:title>\n\t<dcterms:description>analysis test</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{compilation_provider}}/services/serviceProviders/A0/resources/automationPlans/0\" />\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>sourceGit</oslc:name>\n\t\t\t<rdf:value>https://github.com/od42/test.git</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>buildCommand</oslc:name>\n\t\t\t<rdf:value>gcc -g TestEchoProgram.cpp -o my_echo</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>launchCommand</oslc:name>\n\t\t\t<rdf:value>./my_echo</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>"
										},
										"url": {
											"raw": "{{compilation_provider}}/services/serviceProviders/A0/resources/createAutoRequest",
											"host": [
												"{{compilation_provider}}"
											],
											"path": [
												"services",
												"serviceProviders",
												"A0",
												"resources",
												"createAutoRequest"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "timeout",
							"item": [
								{
									"name": "timeout long enough",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "72f16f76-69f9-4dee-873b-87bfaf49d3d4",
												"exec": [
													"pm.test(\"Response code should be 201 (created)\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"",
													"// save the request ID as a global variable for later tests to use",
													"const response = xml2Json(pm.response.text());",
													"var resrouceAbout = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"].$[\"rdf:about\"];",
													"var resourceAboutSplit = resrouceAbout.split(\"/\");",
													"var requestId = resourceAboutSplit[resourceAboutSplit.length-1];",
													"pm.globals.set('requestId', requestId);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>{{reqTitle}}</dcterms:title>\n\t<dcterms:description>{{reqDescription}}</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{server_address}}/{{server_context}}/services/serviceProviders/A0/resources/automationPlans/dummy\" />\n\t<dcterms:creator rdf:resource=\"{{reqCreator}}\"/>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>arguments</oslc:name>\n\t\t\t<rdf:value>asdfasdf</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>timeout</oslc:name>\n\t\t\t<rdf:value>10</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>SUT</oslc:name>\n\t\t\t<rdf:value>{{SUT}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>",
											"options": {
												"raw": {
													"language": "xml"
												}
											}
										},
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/serviceProviders/A0/resources/createAutoRequest",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"serviceProviders",
												"A0",
												"resources",
												"createAutoRequest"
											]
										}
									},
									"response": []
								},
								{
									"name": "get result",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c3a870a4-26b7-4483-9c28-c25c48b2bce8",
												"exec": [
													"// get global variable to use in this test",
													"var requestId = pm.globals.get('requestId');",
													"var serverAddr = pm.variables.get(\"server_address\");",
													"var server_context = pm.variables.get(\"server_context\");",
													"var AutoPlanId = pm.variables.get(\"AutoPlanId\");",
													"var test_arguments = pm.variables.get(\"arguments\");",
													"var SUT = pm.variables.get(\"SUT\");",
													"var reqTitle = pm.variables.get(\"reqTitle\");",
													"var reqDescription = pm.variables.get(\"reqDescription\");",
													"var reqCreator = pm.variables.get(\"reqCreator\");",
													"",
													"",
													"pm.test(\"Response code should be 200 (OK)\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"AutomationResult state should be #complete\", function () {",
													"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#new\\\"/>\");",
													"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#inProgress\\\"/>\");",
													"    pm.expect(pm.response.text()).to.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#complete\\\"/>\");",
													"});",
													"pm.test(\"AutomationResult verdict should be #passed\", function () {",
													"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:verdict rdf:resource=\\\"http://open-services.net/ns/auto#unavailable\\\"/>\");",
													"    pm.expect(pm.response.text()).to.include(\"oslc_auto:verdict rdf:resource=\\\"http://open-services.net/ns/auto#passed\\\"/>\");",
													"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#error\\\"/>\");",
													"});",
													"pm.test(\"AutomationResult analysis stdout should have the expected value (no timeout)\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"<rdf:value rdf:parseType=\\\"Literal\\\"># Executing: \");",
													"    pm.expect(pm.response.text()).to.include(\"# Analysis completed successfully\\nDummy tool!\");",
													"});",
													"pm.test(\"AutomationResult analysis stderr be empty (~)\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"<rdf:value rdf:parseType=\\\"Literal\\\"></rdf:value>\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e335f5e8-90e0-466f-bb3c-2346fc1ee06f",
												"exec": [
													"// wait for the request execution to finish",
													" var result_wait_time = pm.variables.get('result_wait_time');",
													" setTimeout(function(){}, [6000]);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/serviceProviders/A0/resources/automationResults/{{requestId}}",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"serviceProviders",
												"A0",
												"resources",
												"automationResults",
												"{{requestId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "timeout too short",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "38fc7861-2515-4236-923b-db98b66f8210",
												"exec": [
													"pm.test(\"Response code should be 201 (created)\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"",
													"// save the request ID as a global variable for later tests to use",
													"const response = xml2Json(pm.response.text());",
													"var resrouceAbout = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"].$[\"rdf:about\"];",
													"var resourceAboutSplit = resrouceAbout.split(\"/\");",
													"var requestId = resourceAboutSplit[resourceAboutSplit.length-1];",
													"pm.globals.set('requestId', requestId);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>{{reqTitle}}</dcterms:title>\n\t<dcterms:description>{{reqDescription}}</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{server_address}}/{{server_context}}/services/serviceProviders/A0/resources/automationPlans/dummy\" />\n\t<dcterms:creator rdf:resource=\"{{reqCreator}}\"/>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>arguments</oslc:name>\n\t\t\t<rdf:value>asdfasdf</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>timeout</oslc:name>\n\t\t\t<rdf:value>2</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>SUT</oslc:name>\n\t\t\t<rdf:value>{{SUT}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>",
											"options": {
												"raw": {
													"language": "xml"
												}
											}
										},
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/serviceProviders/A0/resources/createAutoRequest",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"serviceProviders",
												"A0",
												"resources",
												"createAutoRequest"
											]
										}
									},
									"response": []
								},
								{
									"name": "get result timeouted",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0b28ff64-1507-4df0-8e13-280edfb92f10",
												"exec": [
													"// get global variable to use in this test",
													"var requestId = pm.globals.get('requestId');",
													"var serverAddr = pm.variables.get(\"server_address\");",
													"var server_context = pm.variables.get(\"server_context\");",
													"var AutoPlanId = pm.variables.get(\"AutoPlanId\");",
													"var test_arguments = pm.variables.get(\"arguments\");",
													"var SUT = pm.variables.get(\"SUT\");",
													"var reqTitle = pm.variables.get(\"reqTitle\");",
													"var reqDescription = pm.variables.get(\"reqDescription\");",
													"var reqCreator = pm.variables.get(\"reqCreator\");",
													"",
													"",
													"pm.test(\"Response code should be 200 (OK)\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"AutomationResult state should be #complete\", function () {",
													"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#new\\\"/>\");",
													"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#inProgress\\\"/>\");",
													"    pm.expect(pm.response.text()).to.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#complete\\\"/>\");",
													"});",
													"pm.test(\"AutomationResult verdict should be #failed\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"oslc_auto:verdict rdf:resource=\\\"http://open-services.net/ns/auto#failed\\\"/>\");",
													"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:verdict rdf:resource=\\\"http://open-services.net/ns/auto#unavailable\\\"/>\");",
													"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:verdict rdf:resource=\\\"http://open-services.net/ns/auto#passed\\\"/>\");",
													"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#error\\\"/>\");",
													"});",
													"pm.test(\"AutomationResult analysis stdout should have the expected value (timeout)\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"<rdf:value rdf:parseType=\\\"Literal\\\"># Executing: \");",
													"    pm.expect(pm.response.text()).to.include(\"# Analysis aborted \");",
													"    pm.expect(pm.response.text()).to.include(\"timeout (2 seconds)\\nDummy tool!\");",
													"});",
													"pm.test(\"AutomationResult analysis stderr be empty (~)\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"<rdf:value rdf:parseType=\\\"Literal\\\"></rdf:value>\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "9ec783c0-fcd5-4117-89bc-86d9445e71fd",
												"exec": [
													"// wait for the request execution to finish",
													" var result_wait_time = pm.variables.get('result_wait_time');",
													" setTimeout(function(){}, [5000]);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/serviceProviders/A0/resources/automationResults/{{requestId}}",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"serviceProviders",
												"A0",
												"resources",
												"automationResults",
												"{{requestId}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "outputFileRegex",
							"item": [
								{
									"name": "outputFileRegex no matches",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c4bb5c7a-d3d0-48f0-9a32-1aa86912e6ac",
												"exec": [
													"pm.test(\"Response code should be 201 (created)\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"",
													"// save the request ID as a global variable for later tests to use",
													"const response = xml2Json(pm.response.text());",
													"var resrouceAbout = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"].$[\"rdf:about\"];",
													"var resourceAboutSplit = resrouceAbout.split(\"/\");",
													"var requestId = resourceAboutSplit[resourceAboutSplit.length-1];",
													"pm.globals.set('requestId', requestId);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>{{reqTitle}}</dcterms:title>\n\t<dcterms:description>{{reqDescription}}</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{server_address}}/{{server_context}}/services/serviceProviders/A0/resources/automationPlans/dummy\" />\n\t<dcterms:creator rdf:resource=\"{{reqCreator}}\"/>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>arguments</oslc:name>\n\t\t\t<rdf:value>asdfasdf</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>outputFileRegex</oslc:name>\n\t\t\t<rdf:value>.^</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>SUT</oslc:name>\n\t\t\t<rdf:value>{{SUT}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>",
											"options": {
												"raw": {
													"language": "xml"
												}
											}
										},
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/serviceProviders/A0/resources/createAutoRequest",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"serviceProviders",
												"A0",
												"resources",
												"createAutoRequest"
											]
										}
									},
									"response": []
								},
								{
									"name": "get result",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "44013a2a-d034-43ea-bb98-bbec764b5f40",
												"exec": [
													"// get global variable to use in this test",
													"var requestId = pm.globals.get('requestId');",
													"var serverAddr = pm.variables.get(\"server_address\");",
													"var server_context = pm.variables.get(\"server_context\");",
													"var AutoPlanId = pm.variables.get(\"AutoPlanId\");",
													"var test_arguments = pm.variables.get(\"arguments\");",
													"var SUT = pm.variables.get(\"SUT\");",
													"var reqTitle = pm.variables.get(\"reqTitle\");",
													"var reqDescription = pm.variables.get(\"reqDescription\");",
													"var reqCreator = pm.variables.get(\"reqCreator\");",
													"",
													"",
													"pm.test(\"Response code should be 200 (OK)\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"AutomationResult state should be #complete\", function () {",
													"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#new\\\"/>\");",
													"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#inProgress\\\"/>\");",
													"    pm.expect(pm.response.text()).to.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#complete\\\"/>\");",
													"});",
													"pm.test(\"AutomationResult verdict should be #passed\", function () {",
													"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:verdict rdf:resource=\\\"http://open-services.net/ns/auto#unavailable\\\"/>\");",
													"    pm.expect(pm.response.text()).to.include(\"oslc_auto:verdict rdf:resource=\\\"http://open-services.net/ns/auto#passed\\\"/>\");",
													"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#error\\\"/>\");",
													"});",
													"pm.test(\"AutomationResult analysis stdout should have the expected value\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"<rdf:value rdf:parseType=\\\"Literal\\\"># Executing: \");",
													"    pm.expect(pm.response.text()).to.include(\"# Analysis completed successfully\\nDummy tool!\");",
													"});",
													"pm.test(\"AutomationResult analysis stderr be empty (~)\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"<rdf:value rdf:parseType=\\\"Literal\\\"></rdf:value>\");",
													"});",
													"",
													"pm.test(\"AutomationResult does not contain any regex match file contributions\", function () {",
													"    pm.expect(pm.response.text()).to.not.include(\"This file was modified or created during execution\");",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "6923a718-4e31-4d68-a36b-c9d398842368",
												"exec": [
													"// wait for the request execution to finish",
													" var result_wait_time = pm.variables.get('result_wait_time');",
													" setTimeout(function(){}, [6000]);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/serviceProviders/A0/resources/automationResults/{{requestId}}",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"serviceProviders",
												"A0",
												"resources",
												"automationResults",
												"{{requestId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "outputFileRegex match all",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3b048588-4cd6-4c09-950b-b47c29da42ea",
												"exec": [
													"pm.test(\"Response code should be 201 (created)\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"",
													"// save the request ID as a global variable for later tests to use",
													"const response = xml2Json(pm.response.text());",
													"var resrouceAbout = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"].$[\"rdf:about\"];",
													"var resourceAboutSplit = resrouceAbout.split(\"/\");",
													"var requestId = resourceAboutSplit[resourceAboutSplit.length-1];",
													"pm.globals.set('requestId', requestId);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>{{reqTitle}}</dcterms:title>\n\t<dcterms:description>{{reqDescription}}</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{server_address}}/{{server_context}}/services/serviceProviders/A0/resources/automationPlans/dummy\" />\n\t<dcterms:creator rdf:resource=\"{{reqCreator}}\"/>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>arguments</oslc:name>\n\t\t\t<rdf:value>asdfasdf</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>outputFileRegex</oslc:name>\n\t\t\t<rdf:value>.*</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>SUT</oslc:name>\n\t\t\t<rdf:value>{{SUT}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>",
											"options": {
												"raw": {
													"language": "xml"
												}
											}
										},
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/serviceProviders/A0/resources/createAutoRequest",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"serviceProviders",
												"A0",
												"resources",
												"createAutoRequest"
											]
										}
									},
									"response": []
								},
								{
									"name": "get result",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "43e3407f-9eaf-4b4a-8901-0280eef43249",
												"exec": [
													"// get global variable to use in this test",
													"var requestId = pm.globals.get('requestId');",
													"var serverAddr = pm.variables.get(\"server_address\");",
													"var server_context = pm.variables.get(\"server_context\");",
													"var AutoPlanId = pm.variables.get(\"AutoPlanId\");",
													"var test_arguments = pm.variables.get(\"arguments\");",
													"var SUT = pm.variables.get(\"SUT\");",
													"var reqTitle = pm.variables.get(\"reqTitle\");",
													"var reqDescription = pm.variables.get(\"reqDescription\");",
													"var reqCreator = pm.variables.get(\"reqCreator\");",
													"",
													"",
													"pm.test(\"Response code should be 200 (OK)\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"AutomationResult state should be #complete\", function () {",
													"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#new\\\"/>\");",
													"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#inProgress\\\"/>\");",
													"    pm.expect(pm.response.text()).to.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#complete\\\"/>\");",
													"});",
													"pm.test(\"AutomationResult verdict should be #passed\", function () {",
													"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:verdict rdf:resource=\\\"http://open-services.net/ns/auto#unavailable\\\"/>\");",
													"    pm.expect(pm.response.text()).to.include(\"oslc_auto:verdict rdf:resource=\\\"http://open-services.net/ns/auto#passed\\\"/>\");",
													"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#error\\\"/>\");",
													"});",
													"pm.test(\"AutomationResult analysis stdout should have the expected value\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"<rdf:value rdf:parseType=\\\"Literal\\\"># Executing: \");",
													"    pm.expect(pm.response.text()).to.include(\"# Analysis completed successfully\\nDummy tool!\");",
													"});",
													"pm.test(\"AutomationResult analysis stderr be empty (~)\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"<rdf:value rdf:parseType=\\\"Literal\\\"></rdf:value>\");",
													"});",
													"",
													"pm.test(\"AutomationResult contains regex match file contributions\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"This file was modified or created during execution\");",
													"    pm.expect(pm.response.text()).to.include(\"<dcterms:title rdf:parseType=\\\"Literal\\\">file2</dcterms:title>\");",
													"    pm.expect(pm.response.text()).to.include(\"<dcterms:title rdf:parseType=\\\"Literal\\\">file1</dcterms:title>\");",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "638fdefd-230e-48ec-830b-ddf8371aa08b",
												"exec": [
													"// wait for the request execution to finish",
													" var result_wait_time = pm.variables.get('result_wait_time');",
													" setTimeout(function(){}, [6000]);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/serviceProviders/A0/resources/automationResults/{{requestId}}",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"serviceProviders",
												"A0",
												"resources",
												"automationResults",
												"{{requestId}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "zipOutputs",
							"item": [
								{
									"name": "zipOutputs",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "640fe9d2-4294-4f75-bd11-a45fdc14356d",
												"exec": [
													"pm.test(\"Response code should be 201 (created)\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"",
													"// save the request ID as a global variable for later tests to use",
													"const response = xml2Json(pm.response.text());",
													"var resrouceAbout = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"].$[\"rdf:about\"];",
													"var resourceAboutSplit = resrouceAbout.split(\"/\");",
													"var requestId = resourceAboutSplit[resourceAboutSplit.length-1];",
													"pm.globals.set('requestId', requestId);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>{{reqTitle}}</dcterms:title>\n\t<dcterms:description>{{reqDescription}}</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{server_address}}/{{server_context}}/services/serviceProviders/A0/resources/automationPlans/dummy\" />\n\t<dcterms:creator rdf:resource=\"{{reqCreator}}\"/>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>arguments</oslc:name>\n\t\t\t<rdf:value>asdfasdf</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>outputFileRegex</oslc:name>\n\t\t\t<rdf:value>.*</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>zipOutputs</oslc:name>\n\t\t\t<rdf:value>true</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>SUT</oslc:name>\n\t\t\t<rdf:value>{{SUT}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>",
											"options": {
												"raw": {
													"language": "xml"
												}
											}
										},
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/serviceProviders/A0/resources/createAutoRequest",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"serviceProviders",
												"A0",
												"resources",
												"createAutoRequest"
											]
										}
									},
									"response": []
								},
								{
									"name": "get result",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7a24511b-672f-4dec-bd43-aaf83153991d",
												"exec": [
													"// get global variable to use in this test",
													"var requestId = pm.globals.get('requestId');",
													"var serverAddr = pm.variables.get(\"server_address\");",
													"var server_context = pm.variables.get(\"server_context\");",
													"var AutoPlanId = pm.variables.get(\"AutoPlanId\");",
													"var test_arguments = pm.variables.get(\"arguments\");",
													"var SUT = pm.variables.get(\"SUT\");",
													"var reqTitle = pm.variables.get(\"reqTitle\");",
													"var reqDescription = pm.variables.get(\"reqDescription\");",
													"var reqCreator = pm.variables.get(\"reqCreator\");",
													"",
													"",
													"pm.test(\"Response code should be 200 (OK)\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"AutomationResult state should be #complete\", function () {",
													"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#new\\\"/>\");",
													"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#inProgress\\\"/>\");",
													"    pm.expect(pm.response.text()).to.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#complete\\\"/>\");",
													"});",
													"pm.test(\"AutomationResult verdict should be #passed\", function () {",
													"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:verdict rdf:resource=\\\"http://open-services.net/ns/auto#unavailable\\\"/>\");",
													"    pm.expect(pm.response.text()).to.include(\"oslc_auto:verdict rdf:resource=\\\"http://open-services.net/ns/auto#passed\\\"/>\");",
													"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#error\\\"/>\");",
													"});",
													"pm.test(\"AutomationResult analysis stdout should have the expected value\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"<rdf:value rdf:parseType=\\\"Literal\\\"># Executing: \");",
													"    pm.expect(pm.response.text()).to.include(\"# Analysis completed successfully\\nDummy tool!\");",
													"});",
													"pm.test(\"AutomationResult analysis stderr be empty (~)\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"<rdf:value rdf:parseType=\\\"Literal\\\"></rdf:value>\");",
													"});",
													"",
													"pm.test(\"AutomationResult does not contain regex match file contributions\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"This is a ZIP of all other file contributions. To download the file directly send a GET accepting application/octet-stream to the URI in the fit:fileURI property.\");",
													"    pm.expect(pm.response.text()).to.include(\".zip</dcterms:title>\");",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "18342492-ccc8-45b5-b2f1-6266c99b39a8",
												"exec": [
													"// wait for the request execution to finish",
													" var result_wait_time = pm.variables.get('result_wait_time');",
													" setTimeout(function(){}, [6000]);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/serviceProviders/A0/resources/automationResults/{{requestId}}",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"serviceProviders",
												"A0",
												"resources",
												"automationResults",
												"{{requestId}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Automation Service Provider",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a468ffe6-7139-42ef-8294-fa30c1724d8b",
								"exec": [
									"pm.test(\"Response code should be 200 (OK)\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "80af8363-be02-4be7-8b2e-fa59b144d09a",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/rdf+xml"
							}
						],
						"url": {
							"raw": "{{server_address}}/{{server_context}}/services/serviceProviders/A0",
							"host": [
								"{{server_address}}"
							],
							"path": [
								"{{server_context}}",
								"services",
								"serviceProviders",
								"A0"
							]
						}
					},
					"response": []
				},
				{
					"name": "Service Provider Catologue",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c5460f3e-6a8a-4a91-9c25-f4a51a23e823",
								"exec": [
									"pm.test(\"Response code should be 200 (OK)\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/rdf+xml",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{server_address}}/{{server_context}}/services/catalog/singleton",
							"host": [
								"{{server_address}}"
							],
							"path": [
								"{{server_context}}",
								"services",
								"catalog",
								"singleton"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "1e0de945-487d-495e-b9e7-52f23ee31f14",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "e7dfbe50-1eb8-41c9-add3-753aaaabdc83",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Error Handeling",
			"item": [
				{
					"name": "SUT invalid launchCommand TODO",
					"item": [],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "General",
					"item": [
						{
							"name": "pre init",
							"item": [
								{
									"name": "create SUT using the compilation provider",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "28eb1cf1-a957-444a-b541-0affedf688d7",
												"exec": [
													"// save the request ID as a global variable for later tests to use -- used as SUT ID",
													"const response = xml2Json(pm.response.text());",
													"var resrouceAbout = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"].$[\"rdf:about\"];",
													"var resourceAboutSplit = resrouceAbout.split(\"/\");",
													"var requestId = resourceAboutSplit[resourceAboutSplit.length-1];",
													"pm.globals.set('sutId', requestId);",
													"",
													"pm.test(\"Response code should be 201 (created)\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"// wait for the request execution to finish",
													"var result_wait_time = pm.variables.get('result_wait_time');",
													"setTimeout(function(){}, [result_wait_time]);",
													"",
													"",
													"var compilation_provider = pm.variables.get(\"compilation_provider\");",
													"var sutId = pm.globals.get(\"sutId\");",
													"pm.globals.set(\"SUT\", compilation_provider + \"/services/serviceProviders/A0/resources/sUTs/\" + sutId);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "53694edb-628d-4044-b35a-1fec5eecd915",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/xml"
											},
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>analysis test</dcterms:title>\n\t<dcterms:description>analysis test</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{compilation_provider}}/services/serviceProviders/A0/resources/automationPlans/0\" />\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>sourceGit</oslc:name>\n\t\t\t<rdf:value>https://github.com/od42/test.git</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>buildCommand</oslc:name>\n\t\t\t<rdf:value>gcc -g TestEchoProgram.cpp -o my_echo</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>launchCommand</oslc:name>\n\t\t\t<rdf:value>./my_echo</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>"
										},
										"url": {
											"raw": "{{compilation_provider}}/services/serviceProviders/A0/resources/createAutoRequest",
											"host": [
												"{{compilation_provider}}"
											],
											"path": [
												"services",
												"serviceProviders",
												"A0",
												"resources",
												"createAutoRequest"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "empty POST request",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "28eb1cf1-a957-444a-b541-0affedf688d7",
										"exec": [
											"pm.test(\"Response code should be 400 (bad request)\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Error msg should be - empty creation POST\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<oslc:message>AutomationRequest NOT created - empty creation POST</oslc:message>\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "cb0e422a-5939-4a63-8ed7-877fe30f5ebf",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n</rdf:RDF>"
								},
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/serviceProviders/A0/resources/createAutoRequest",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"serviceProviders",
										"A0",
										"resources",
										"createAutoRequest"
									]
								}
							},
							"response": []
						},
						{
							"name": "title property missing",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "28eb1cf1-a957-444a-b541-0affedf688d7",
										"exec": [
											"pm.test(\"Response code should be 400 (bad request)\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"",
											"pm.test(\"Error msg should be - executesAutomationPlan property missing\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<oslc:message>AutomationRequest NOT created - title property missing</oslc:message>\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:description>Test</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{server_address}}/{{server_context}}/services/serviceProviders/A0/resources/automationPlans/0\" />\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>analyser</oslc:name>\n\t\t\t<rdf:value>atomrace</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>executionParameters</oslc:name>\n\t\t\t<rdf:value>\"Hello World!\"</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>SUT</oslc:name>\n\t\t\t<rdf:value>{{SUT}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>"
								},
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/serviceProviders/A0/resources/createAutoRequest",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"serviceProviders",
										"A0",
										"resources",
										"createAutoRequest"
									]
								}
							},
							"response": []
						},
						{
							"name": "executesAutomationPlan property missing",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "28eb1cf1-a957-444a-b541-0affedf688d7",
										"exec": [
											"pm.test(\"Response code should be 400 (bad request)\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"",
											"pm.test(\"Error msg should be - executesAutomationPlan property missing\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<oslc:message>AutomationRequest NOT created - executesAutomationPlan property missing</oslc:message>\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>First prototype request</dcterms:title>\n\t<dcterms:description>Test</dcterms:description>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>analyser</oslc:name>\n\t\t\t<rdf:value>atomrace</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>executionParameters</oslc:name>\n\t\t\t<rdf:value>\"Hello World!\"</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>SUT</oslc:name>\n\t\t\t<rdf:value>{{SUT}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>"
								},
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/serviceProviders/A0/resources/createAutoRequest",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"serviceProviders",
										"A0",
										"resources",
										"createAutoRequest"
									]
								}
							},
							"response": []
						},
						{
							"name": "executed AutomationPlan not found",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "28eb1cf1-a957-444a-b541-0affedf688d7",
										"exec": [
											"pm.test(\"Response code should be 400 (bad request)\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"",
											"pm.test(\"Error msg should be - AutomationPlan not found\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<oslc:message>AutomationRequest NOT created - AutomationPlan not found\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>First prototype request</dcterms:title>\n\t<dcterms:description>Test</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{server_address}}/{{server_context}}/services/serviceProviders/A0/resources/automationPlans/132523465\" />\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>arguments</oslc:name>\n\t\t\t<rdf:value>HelloWorld</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>SUT</oslc:name>\n\t\t\t<rdf:value>{{SUT}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>"
								},
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/serviceProviders/A0/resources/createAutoRequest",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"serviceProviders",
										"A0",
										"resources",
										"createAutoRequest"
									]
								}
							},
							"response": []
						},
						{
							"name": "unknown input parameter",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "21c4bb39-da9e-47d6-847e-208290d64fe6",
										"exec": [
											"pm.test(\"Response code should be 400 (bad request)\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Error msg should be - AutomationRequest NOT created - unrecognized input parameters\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<oslc:message>AutomationRequest NOT created - 'invalid input' input parameter not recognized</oslc:message>\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>First prototype request</dcterms:title>\n\t<dcterms:description>Test</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{server_address}}/{{server_context}}/services/serviceProviders/A0/resources/automationPlans/dummy\" />\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>invalid input</oslc:name>\n\t\t\t<rdf:value>invalid value</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>arguments</oslc:name>\n\t\t\t<rdf:value>HelloWorld</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>SUT</oslc:name>\n\t\t\t<rdf:value>{{SUT}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>"
								},
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/serviceProviders/A0/resources/createAutoRequest",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"serviceProviders",
										"A0",
										"resources",
										"createAutoRequest"
									]
								}
							},
							"response": []
						},
						{
							"name": "SUT input param missing",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "21c4bb39-da9e-47d6-847e-208290d64fe6",
										"exec": [
											"pm.test(\"Response code should be 400 (bad request)\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Error msg should be - AutomationRequest NOT created - unrecognized input parameters\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<oslc:message>AutomationRequest NOT created - 'SUT' input parameter missing</oslc:message>\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>First prototype request</dcterms:title>\n\t<dcterms:description>Test</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{server_address}}/{{server_context}}/services/serviceProviders/A0/resources/automationPlans/dummy\" />\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>arguments</oslc:name>\n\t\t\t<rdf:value>HelloWorld</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>"
								},
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/serviceProviders/A0/resources/createAutoRequest",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"serviceProviders",
										"A0",
										"resources",
										"createAutoRequest"
									]
								}
							},
							"response": []
						},
						{
							"name": "SUT non existent resource",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "21c4bb39-da9e-47d6-847e-208290d64fe6",
										"exec": [
											"pm.test(\"Response code should be 400 (bad request)\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Error msg should be - AutomationRequest NOT created - unrecognized input parameters\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<oslc:message>AutomationRequest NOT created - Failed to get refferenced SUT\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>First prototype request</dcterms:title>\n\t<dcterms:description>Test</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{server_address}}/{{server_context}}/services/serviceProviders/A0/resources/automationPlans/dummy\" />\n\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>arguments</oslc:name>\n\t\t\t<rdf:value>HelloWorld</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>SUT</oslc:name>\n\t\t\t<rdf:value>{{compilation_provider}}/services/serviceProviders/A0/resources/sUTs/234523</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/serviceProviders/A0/resources/createAutoRequest",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"serviceProviders",
										"A0",
										"resources",
										"createAutoRequest"
									]
								}
							},
							"response": []
						},
						{
							"name": "SUT resource provider unreachable",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "21c4bb39-da9e-47d6-847e-208290d64fe6",
										"exec": [
											"pm.test(\"Response code should be 400 (bad request)\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Error msg should be - AutomationRequest NOT created - connection refused\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Connection refused\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>First prototype request</dcterms:title>\n\t<dcterms:description>Test</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{server_address}}/{{server_context}}/services/serviceProviders/A0/resources/automationPlans/dummy\" />\n\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>arguments</oslc:name>\n\t\t\t<rdf:value>HelloWorld</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>SUT</oslc:name>\n\t\t\t<rdf:value>http://localhost:8085/compilation/services/serviceProviders/A0/resources/sUTs/234523</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/serviceProviders/A0/resources/createAutoRequest",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"serviceProviders",
										"A0",
										"resources",
										"createAutoRequest"
									]
								}
							},
							"response": []
						},
						{
							"name": "resource not found",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "32ef67f8-fd0e-4d76-aab9-7f4d00263c0c",
										"exec": [
											"pm.test(\"Response code should be 404 (not found)\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/serviceProviders/A0/resources/automationPlans/123456789",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"serviceProviders",
										"A0",
										"resources",
										"automationPlans",
										"123456789"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "f9928b88-3e2e-47ac-83a4-0c3ca9342e63",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "e7cc3f5e-3e4b-4bda-bf8f-ea5524f9b7dc",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Tools",
			"item": [
				{
					"name": "pre init",
					"item": [
						{
							"name": "create SUT using the compilation provider",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "28eb1cf1-a957-444a-b541-0affedf688d7",
										"exec": [
											"// save the request ID as a global variable for later tests to use -- used as SUT ID",
											"const response = xml2Json(pm.response.text());",
											"var resrouceAbout = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"].$[\"rdf:about\"];",
											"var resourceAboutSplit = resrouceAbout.split(\"/\");",
											"var requestId = resourceAboutSplit[resourceAboutSplit.length-1];",
											"pm.globals.set('sutId', requestId);",
											"",
											"pm.test(\"Response code should be 201 (created)\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"// wait for the request execution to finish",
											"var result_wait_time = pm.variables.get('result_wait_time');",
											"setTimeout(function(){}, [result_wait_time]);",
											"",
											"",
											"var compilation_provider = pm.variables.get(\"compilation_provider\");",
											"var sutId = pm.globals.get(\"sutId\");",
											"pm.globals.set(\"SUT\", compilation_provider + \"/services/serviceProviders/A0/resources/sUTs/\" + sutId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "53694edb-628d-4044-b35a-1fec5eecd915",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/xml"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>analysis test</dcterms:title>\n\t<dcterms:description>analysis test</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{compilation_provider}}/services/serviceProviders/A0/resources/automationPlans/0\" />\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>sourceGit</oslc:name>\n\t\t\t<rdf:value>https://github.com/od42/test.git</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>buildCommand</oslc:name>\n\t\t\t<rdf:value>gcc -g TestEchoProgram.cpp -o my_echo</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>launchCommand</oslc:name>\n\t\t\t<rdf:value>./my_echo</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{compilation_provider}}/services/serviceProviders/A0/resources/createAutoRequest",
									"host": [
										"{{compilation_provider}}"
									],
									"path": [
										"services",
										"serviceProviders",
										"A0",
										"resources",
										"createAutoRequest"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "anaconda",
					"item": [
						{
							"name": "predefined AutomationPlan",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b90f0f63-ae63-4d69-b69f-c4b78b7cdc4c",
										"exec": [
											"var serverAddr = pm.variables.get(\"server_address\");",
											"var server_context = pm.variables.get(\"server_context\");",
											"",
											"pm.test(\"Response code should be 200 (OK)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Response body should contain an AutomationPlan (id:anaconda)\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:AutomationPlan rdf:about=\\\"\" + serverAddr + \"/\" + server_context + \"/services/serviceProviders/A0/resources/automationPlans/anaconda\");",
											"});",
											"pm.test(\"AutomationPlan should contain a dcterms:title property\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:title\");",
											"});",
											"pm.test(\"AutomationPlan should contain a dcterms:created property\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:created\");",
											"});",
											"pm.test(\"AutomationPlan should contain a dcterms:modified property\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:modified\");",
											"});",
											"pm.test(\"AutomationPlan should contain a <dcterms:creator property\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:creator\");",
											"});",
											"pm.test(\"AutomationPlan should contain a analyser parameter definition\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<oslc:name>analyser</oslc:name>\");",
											"});",
											"pm.test(\"AutomationPlan should contain a SUT parameter definition\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<oslc:name>SUT</oslc:name>\");",
											"});",
											"pm.test(\"AutomationPlan should contain a executionParameters parameter definition\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<oslc:name>executionParameters</oslc:name>\");",
											"});",
											"pm.test(\"AutomationPlan should contain a launchSUT parameter definition\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<oslc:name>launchSUT</oslc:name>\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e6fe23e0-f4b8-4069-a695-0e4b9871790e",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/serviceProviders/A0/resources/automationPlans/anaconda",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"serviceProviders",
										"A0",
										"resources",
										"automationPlans",
										"anaconda"
									]
								}
							},
							"response": []
						},
						{
							"name": "analyse",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "28eb1cf1-a957-444a-b541-0affedf688d7",
										"exec": [
											"pm.test(\"Response code should be 201 (created)\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"",
											"// save the request ID as a global variable for later tests to use",
											"const response = xml2Json(pm.response.text());",
											"var resrouceAbout = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"].$[\"rdf:about\"];",
											"var resourceAboutSplit = resrouceAbout.split(\"/\");",
											"var requestId = resourceAboutSplit[resourceAboutSplit.length-1];",
											"pm.globals.set('requestId', requestId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "53694edb-628d-4044-b35a-1fec5eecd915",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/xml"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>First prototype request</dcterms:title>\n\t<dcterms:description>Test</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{server_address}}/{{server_context}}/services/serviceProviders/A0/resources/automationPlans/anaconda\" />\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>analyser</oslc:name>\n\t\t\t<rdf:value>atomrace</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>executionParameters</oslc:name>\n\t\t\t<rdf:value>\"Hello World!\"</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>SUT</oslc:name>\n\t\t\t<rdf:value>{{SUT}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>"
								},
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/serviceProviders/A0/resources/createAutoRequest",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"serviceProviders",
										"A0",
										"resources",
										"createAutoRequest"
									]
								}
							},
							"response": []
						},
						{
							"name": "check result",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2ac8143a-00b8-4352-9f49-a6cfaba6f982",
										"exec": [
											"// get global variable to use in this test",
											"var requestId = pm.globals.get('requestId');",
											"var serverAddr = pm.variables.get(\"server_address\");",
											"var server_context = pm.variables.get(\"server_context\");",
											"var AutoPlanId = pm.variables.get(\"AutoPlanId\");",
											"var analyser = pm.variables.get(\"analyser\");",
											"var executionParameters= pm.variables.get(\"executionParameters\");",
											"var SUT = pm.variables.get(\"SUT\");",
											"",
											"",
											"pm.test(\"Response code should be 200 (OK)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"AutomationResult desiredState should be #complete\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:desiredState rdf:resource=\\\"http://open-services.net/ns/auto#complete\\\"/>\");",
											"});",
											"// the only difference compared to the last request (below)",
											"pm.test(\"AutomationResult state should be #complete\", function () {",
											"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#new\\\"/>\");",
											"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#inProgress\\\"/>\");",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#complete\\\"/>\");",
											"});",
											"pm.test(\"AutomationResult verdict should be #passed\", function () {",
											"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:verdict rdf:resource=\\\"http://open-services.net/ns/auto#unavailable\\\"/>\");",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:verdict rdf:resource=\\\"http://open-services.net/ns/auto#passed\\\"/>\");",
											"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#error\\\"/>\");",
											"});",
											"",
											"pm.test(\"AutomationResult should contain analysis stdout\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:title rdf:parseType=\\\"Literal\\\">Analysis stdout</dcterms:title>\");",
											"});",
											"pm.test(\"AutomationResult analysis stdout should have the expected value\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"# Analysis completed successfully\\nANaConDA \");",
											"    pm.expect(pm.response.text()).to.include(\"Hello World!\\n</rdf:value>\");",
											"});",
											"pm.test(\"AutomationResult should contain analysis stderr\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:title rdf:parseType=\\\"Literal\\\">Analysis stderr</dcterms:title>\");",
											"});",
											"pm.test(\"AutomationResult analysis stderr be empty (~)\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<rdf:value rdf:parseType=\\\"Literal\\\"></rdf:value>\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "0e22f9d0-a6e8-43bc-8f87-b0861919c0de",
										"exec": [
											"// wait for the request execution to finish",
											" var result_wait_time = pm.variables.get('result_wait_time');",
											" setTimeout(function(){}, [result_wait_time]);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/serviceProviders/A0/resources/automationResults/{{requestId}}",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"serviceProviders",
										"A0",
										"resources",
										"automationResults",
										"{{requestId}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "perun",
					"item": [
						{
							"name": "predefined AutomationPlan",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "27f5c75c-e4a0-44b4-ba20-cc9e7bc5b879",
										"exec": [
											"var serverAddr = pm.variables.get(\"server_address\");",
											"var server_context = pm.variables.get(\"server_context\");",
											"",
											"pm.test(\"Response code should be 200 (OK)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Response body should contain an AutomationPlan (id:perun)\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:AutomationPlan rdf:about=\\\"\" + serverAddr + \"/\" + server_context + \"/services/serviceProviders/A0/resources/automationPlans/perun\");",
											"});",
											"pm.test(\"AutomationPlan should contain a dcterms:title property\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:title\");",
											"});",
											"pm.test(\"AutomationPlan should contain a dcterms:created property\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:created\");",
											"});",
											"pm.test(\"AutomationPlan should contain a dcterms:modified property\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:modified\");",
											"});",
											"pm.test(\"AutomationPlan should contain a <dcterms:creator property\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:creator\");",
											"});",
											"pm.test(\"AutomationPlan should contain a command parameter definition\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<oslc:name>command</oslc:name>\");",
											"});",
											"pm.test(\"AutomationPlan should contain a SUT parameter definition\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<oslc:name>SUT</oslc:name>\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f910fa21-29b3-4fd1-9e99-9ae8b785a9fb",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/serviceProviders/A0/resources/automationPlans/perun",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"serviceProviders",
										"A0",
										"resources",
										"automationPlans",
										"perun"
									]
								}
							},
							"response": []
						},
						{
							"name": "init",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "34ba5e63-62aa-4317-88fa-b52d363bd52d",
										"exec": [
											"pm.test(\"Response code should be 201 (created)\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"",
											"// save the request ID as a global variable for later tests to use",
											"const response = xml2Json(pm.response.text());",
											"var resrouceAbout = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"].$[\"rdf:about\"];",
											"var resourceAboutSplit = resrouceAbout.split(\"/\");",
											"var requestId = resourceAboutSplit[resourceAboutSplit.length-1];",
											"pm.globals.set('requestId', requestId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>First prototype request</dcterms:title>\n\t<dcterms:description>Test</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{server_address}}/{{server_context}}/services/serviceProviders/A0/resources/automationPlans/perun\" />\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>command</oslc:name>\n\t\t\t<rdf:value>init</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>SUT</oslc:name>\n\t\t\t<rdf:value>{{SUT}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>outputFileRegex</oslc:name>\n\t\t\t<rdf:value>.*\\.yml</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>"
								},
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/serviceProviders/A0/resources/createAutoRequest",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"serviceProviders",
										"A0",
										"resources",
										"createAutoRequest"
									]
								}
							},
							"response": []
						},
						{
							"name": "check result",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "098e48b0-8a12-4535-bfc8-260402f837c0",
										"exec": [
											"// wait for the request execution to finish",
											" var result_wait_time = pm.variables.get('result_wait_time');",
											" setTimeout(function(){}, [result_wait_time]);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "54d0a38c-9619-4f73-85a9-dc03c76e5667",
										"exec": [
											"// get global variable to use in this test",
											"var requestId = pm.globals.get('requestId');",
											"var serverAddr = pm.variables.get(\"server_address\");",
											"var server_context = pm.variables.get(\"server_context\");",
											"var AutoPlanId = pm.variables.get(\"AutoPlanId\");",
											"var analyser = pm.variables.get(\"analyser\");",
											"var executionParameters= pm.variables.get(\"executionParameters\");",
											"var SUT = pm.variables.get(\"SUT\");",
											"",
											"",
											"pm.test(\"Response code should be 200 (OK)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"AutomationResult desiredState should be #complete\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:desiredState rdf:resource=\\\"http://open-services.net/ns/auto#complete\\\"/>\");",
											"});",
											"// the only difference compared to the last request (below)",
											"pm.test(\"AutomationResult state should be #complete\", function () {",
											"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#new\\\"/>\");",
											"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#inProgress\\\"/>\");",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#complete\\\"/>\");",
											"});",
											"pm.test(\"AutomationResult verdict should be #passed\", function () {",
											"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:verdict rdf:resource=\\\"http://open-services.net/ns/auto#unavailable\\\"/>\");",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:verdict rdf:resource=\\\"http://open-services.net/ns/auto#passed\\\"/>\");",
											"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#error\\\"/>\");",
											"});",
											"",
											"pm.test(\"AutomationResult should contain analysis stdout\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:title rdf:parseType=\\\"Literal\\\">Analysis stdout</dcterms:title>\");",
											"});",
											"pm.test(\"AutomationResult analysis stdout should have the expected value\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"# Analysis completed successfully\")",
											"    pm.expect(pm.response.text()).to.include(\"In order to automatically run jobs configure the matrix at:\\n\\n    .perun/local.yml\");",
											"});",
											"pm.test(\"AutomationResult should contain analysis stderr\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:title rdf:parseType=\\\"Literal\\\">Analysis stderr</dcterms:title>\");",
											"});",
											"pm.test(\"AutomationResult analysis stderr be empty (~)\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<rdf:value rdf:parseType=\\\"Literal\\\"></rdf:value>\");",
											"});",
											"pm.test(\"AutomationResult should contain contributions for new files\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:title rdf:parseType=\\\"Literal\\\">local.yml</dcterms:title>\");",
											"",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/serviceProviders/A0/resources/automationResults/{{requestId}}",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"serviceProviders",
										"A0",
										"resources",
										"automationResults",
										"{{requestId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "collect",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f4519f03-161f-46ed-9a30-32a34367d96d",
										"exec": [
											"pm.test(\"Response code should be 201 (created)\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"",
											"// save the request ID as a global variable for later tests to use",
											"const response = xml2Json(pm.response.text());",
											"var resrouceAbout = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"].$[\"rdf:about\"];",
											"var resourceAboutSplit = resrouceAbout.split(\"/\");",
											"var requestId = resourceAboutSplit[resourceAboutSplit.length-1];",
											"pm.globals.set('requestId', requestId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>First prototype request</dcterms:title>\n\t<dcterms:description>Test</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{server_address}}/{{server_context}}/services/serviceProviders/A0/resources/automationPlans/perun\" />\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>command</oslc:name>\n\t\t\t<rdf:value>collect -c ./my_echo -w \"text\" time -w 0 -r 1</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>SUT</oslc:name>\n\t\t\t<rdf:value>{{SUT}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>outputFileRegex</oslc:name>\n\t\t\t<rdf:value>.*\\.perf</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>"
								},
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/serviceProviders/A0/resources/createAutoRequest",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"serviceProviders",
										"A0",
										"resources",
										"createAutoRequest"
									]
								}
							},
							"response": []
						},
						{
							"name": "check result",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "de6a2c75-1da4-47c8-ad4a-e7c58d2461e4",
										"exec": [
											"// wait for the request execution to finish",
											" var result_wait_time = pm.variables.get('result_wait_time');",
											" setTimeout(function(){}, [result_wait_time]);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "90b34172-05b2-4712-bba0-d7691a63d115",
										"exec": [
											"// get global variable to use in this test",
											"var requestId = pm.globals.get('requestId');",
											"var serverAddr = pm.variables.get(\"server_address\");",
											"var server_context = pm.variables.get(\"server_context\");",
											"var AutoPlanId = pm.variables.get(\"AutoPlanId\");",
											"var analyser = pm.variables.get(\"analyser\");",
											"var executionParameters = pm.variables.get(\"executionParameters\");",
											"var SUT = pm.variables.get(\"SUT\");",
											"",
											"",
											"pm.test(\"Response code should be 200 (OK)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"AutomationResult desiredState should be #complete\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:desiredState rdf:resource=\\\"http://open-services.net/ns/auto#complete\\\"/>\");",
											"});",
											"// the only difference compared to the last request (below)",
											"pm.test(\"AutomationResult state should be #complete\", function () {",
											"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#new\\\"/>\");",
											"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#inProgress\\\"/>\");",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#complete\\\"/>\");",
											"});",
											"pm.test(\"AutomationResult verdict should be #passed\", function () {",
											"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:verdict rdf:resource=\\\"http://open-services.net/ns/auto#unavailable\\\"/>\");",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:verdict rdf:resource=\\\"http://open-services.net/ns/auto#passed\\\"/>\");",
											"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#error\\\"/>\");",
											"});",
											"",
											"pm.test(\"AutomationResult should contain analysis stdout\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:title rdf:parseType=\\\"Literal\\\">Analysis stdout</dcterms:title>\");",
											"});",
											"pm.test(\"AutomationResult analysis stdout should have the expected value\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"# Analysis completed successfully\")",
											"    pm.expect(pm.response.text()).to.include(\"[!] Overall Profiling [DONE] in 0.00s [!]\\n[!] Prerun [DONE] in 0.00s [!]\\n[!] Batch Job Run [DONE] in 0.00s [!]\\nLoading workload generator specifications ...[DONE]\\n\\nCollecting profiles for ./my_echo\\n = processing generator \\\"text\\\"\\n[100%] Collecting data by time\\nExecuting the warmup-phase \\nBegin timing of ./my_echo time.\\nSuccessfully collected data from ./my_echo\");",
											"});",
											"pm.test(\"AutomationResult should contain analysis stderr\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:title rdf:parseType=\\\"Literal\\\">Analysis stderr</dcterms:title>\");",
											"});",
											"pm.test(\"AutomationResult analysis stderr be empty (~)\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<rdf:value rdf:parseType=\\\"Literal\\\"></rdf:value>\");",
											"});",
											"pm.test(\"AutomationResult should contain a perf profile contribution\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:title rdf:parseType=\\\"Literal\\\">time-my_echo-\");",
											"    pm.expect(pm.response.text()).to.include(\".perf</dcterms:title>\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/rdf+xml",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/serviceProviders/A0/resources/automationResults/{{requestId}}?Accept=application/rdf+xml",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"serviceProviders",
										"A0",
										"resources",
										"automationResults",
										"{{requestId}}"
									],
									"query": [
										{
											"key": "Accept",
											"value": "application/rdf+xml"
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "valgrind",
					"item": [
						{
							"name": "predefined AutomationPlan",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8c3a7e5c-1655-4459-94ff-e1c5f622d492",
										"exec": [
											"var serverAddr = pm.variables.get(\"server_address\");",
											"var server_context = pm.variables.get(\"server_context\");",
											"",
											"pm.test(\"Response code should be 200 (OK)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Response body should contain an AutomationPlan (id:valgrind)\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:AutomationPlan rdf:about=\\\"\" + serverAddr + \"/\" + server_context + \"/services/serviceProviders/A0/resources/automationPlans/valgrind\");",
											"});",
											"pm.test(\"AutomationPlan should contain a dcterms:title property\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:title\");",
											"});",
											"pm.test(\"AutomationPlan should contain a dcterms:created property\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:created\");",
											"});",
											"pm.test(\"AutomationPlan should contain a dcterms:modified property\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:modified\");",
											"});",
											"pm.test(\"AutomationPlan should contain a <dcterms:creator property\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:creator\");",
											"});",
											"pm.test(\"AutomationPlan should contain a analyser parameter definition\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<oslc:name>arguments</oslc:name>\");",
											"});",
											"pm.test(\"AutomationPlan should contain a SUT parameter definition\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<oslc:name>SUT</oslc:name>\");",
											"});",
											"pm.test(\"AutomationPlan should contain a executionParameters parameter definition\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<oslc:name>executionParameters</oslc:name>\");",
											"});",
											"pm.test(\"AutomationPlan should contain a launchSUT parameter definition\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<oslc:name>launchSUT</oslc:name>\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c6cbf7cb-791b-44af-9a6d-bbc4c03ef699",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/serviceProviders/A0/resources/automationPlans/valgrind",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"serviceProviders",
										"A0",
										"resources",
										"automationPlans",
										"valgrind"
									]
								}
							},
							"response": []
						},
						{
							"name": "analyse memcheck",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2031ac02-2168-48d3-a922-4c43f5812f06",
										"exec": [
											"pm.test(\"Response code should be 201 (created)\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"",
											"// save the request ID as a global variable for later tests to use",
											"const response = xml2Json(pm.response.text());",
											"var resrouceAbout = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"].$[\"rdf:about\"];",
											"var resourceAboutSplit = resrouceAbout.split(\"/\");",
											"var requestId = resourceAboutSplit[resourceAboutSplit.length-1];",
											"pm.globals.set('requestId', requestId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "21b3090f-424d-40f2-a4f7-320a95727fe3",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/xml"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>First prototype request</dcterms:title>\n\t<dcterms:description>Test</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{server_address}}/{{server_context}}/services/serviceProviders/A0/resources/automationPlans/valgrind\" />\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>arguments</oslc:name>\n\t\t\t<rdf:value></rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>executionParameters</oslc:name>\n\t\t\t<rdf:value>HelloWorld!</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>SUT</oslc:name>\n\t\t\t<rdf:value>{{SUT}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/serviceProviders/A0/resources/createAutoRequest",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"serviceProviders",
										"A0",
										"resources",
										"createAutoRequest"
									]
								}
							},
							"response": []
						},
						{
							"name": "check result",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4d528d25-1dd3-4cb3-a3e5-84888536b417",
										"exec": [
											"// get global variable to use in this test",
											"var requestId = pm.globals.get('requestId');",
											"var serverAddr = pm.variables.get(\"server_address\");",
											"var server_context = pm.variables.get(\"server_context\");",
											"var AutoPlanId = pm.variables.get(\"AutoPlanId\");",
											"var analyser = pm.variables.get(\"analyser\");",
											"var executionParameters= pm.variables.get(\"executionParameters\");",
											"var SUT = pm.variables.get(\"SUT\");",
											"",
											"",
											"pm.test(\"Response code should be 200 (OK)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"AutomationResult desiredState should be #complete\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:desiredState rdf:resource=\\\"http://open-services.net/ns/auto#complete\\\"/>\");",
											"});",
											"",
											"pm.test(\"AutomationResult state should be #complete\", function () {",
											"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#new\\\"/>\");",
											"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#inProgress\\\"/>\");",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#complete\\\"/>\");",
											"});",
											"pm.test(\"AutomationResult verdict should be #passed\", function () {",
											"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:verdict rdf:resource=\\\"http://open-services.net/ns/auto#unavailable\\\"/>\");",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:verdict rdf:resource=\\\"http://open-services.net/ns/auto#passed\\\"/>\");",
											"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#error\\\"/>\");",
											"});",
											"",
											"pm.test(\"AutomationResult should contain analysis stdout\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:title rdf:parseType=\\\"Literal\\\">Analysis stdout</dcterms:title>\");",
											"});",
											"pm.test(\"AutomationResult analysis stdout should have the expected value\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"# Analysis completed successfully\\nHelloWorld!\\n\");",
											"});",
											"pm.test(\"AutomationResult should contain analysis stderr\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:title rdf:parseType=\\\"Literal\\\">Analysis stderr</dcterms:title>\");",
											"});",
											"pm.test(\"AutomationResult analysis stderr should have the expected value\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Memcheck, a memory error detector\\n\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ef997ce8-d43d-4a80-bb2f-a6e5aa7d3eac",
										"exec": [
											"// wait for the request execution to finish",
											" var result_wait_time = pm.variables.get('result_wait_time');",
											" setTimeout(function(){}, [result_wait_time]);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/serviceProviders/A0/resources/automationResults/{{requestId}}",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"serviceProviders",
										"A0",
										"resources",
										"automationResults",
										"{{requestId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "analyse helgrind",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "54d81f2f-9417-4e85-85e7-9a5193e750e0",
										"exec": [
											"pm.test(\"Response code should be 201 (created)\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"",
											"// save the request ID as a global variable for later tests to use",
											"const response = xml2Json(pm.response.text());",
											"var resrouceAbout = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"].$[\"rdf:about\"];",
											"var resourceAboutSplit = resrouceAbout.split(\"/\");",
											"var requestId = resourceAboutSplit[resourceAboutSplit.length-1];",
											"pm.globals.set('requestId', requestId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "20b0eff7-04fc-439a-8e5f-1ec28f5fe930",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/xml"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>First prototype request</dcterms:title>\n\t<dcterms:description>Test</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{server_address}}/{{server_context}}/services/serviceProviders/A0/resources/automationPlans/valgrind\" />\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>arguments</oslc:name>\n\t\t\t<rdf:value>--tool=helgrind</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>executionParameters</oslc:name>\n\t\t\t<rdf:value>HelloWorld!</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>SUT</oslc:name>\n\t\t\t<rdf:value>{{SUT}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/serviceProviders/A0/resources/createAutoRequest",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"serviceProviders",
										"A0",
										"resources",
										"createAutoRequest"
									]
								}
							},
							"response": []
						},
						{
							"name": "check result",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b8871ff4-b0ff-4cbc-b415-0fd5582070a7",
										"exec": [
											"// get global variable to use in this test",
											"var requestId = pm.globals.get('requestId');",
											"var serverAddr = pm.variables.get(\"server_address\");",
											"var server_context = pm.variables.get(\"server_context\");",
											"var AutoPlanId = pm.variables.get(\"AutoPlanId\");",
											"var analyser = pm.variables.get(\"analyser\");",
											"var executionParameters= pm.variables.get(\"executionParameters\");",
											"var SUT = pm.variables.get(\"SUT\");",
											"",
											"",
											"pm.test(\"Response code should be 200 (OK)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"AutomationResult desiredState should be #complete\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:desiredState rdf:resource=\\\"http://open-services.net/ns/auto#complete\\\"/>\");",
											"});",
											"",
											"pm.test(\"AutomationResult state should be #complete\", function () {",
											"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#new\\\"/>\");",
											"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#inProgress\\\"/>\");",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#complete\\\"/>\");",
											"});",
											"pm.test(\"AutomationResult verdict should be #passed\", function () {",
											"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:verdict rdf:resource=\\\"http://open-services.net/ns/auto#unavailable\\\"/>\");",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:verdict rdf:resource=\\\"http://open-services.net/ns/auto#passed\\\"/>\");",
											"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#error\\\"/>\");",
											"});",
											"",
											"pm.test(\"AutomationResult should contain analysis stdout\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:title rdf:parseType=\\\"Literal\\\">Analysis stdout</dcterms:title>\");",
											"});",
											"pm.test(\"AutomationResult analysis stdout should have the expected value\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"# Analysis completed successfully\\nHelloWorld!\\n\");",
											"});",
											"pm.test(\"AutomationResult should contain analysis stderr\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:title rdf:parseType=\\\"Literal\\\">Analysis stderr</dcterms:title>\");",
											"});",
											"pm.test(\"AutomationResult analysis stderr should have the expected value\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Helgrind, a thread error detector\\n\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "0c6f0db3-b432-4c5b-beb0-5d4cba36b1e4",
										"exec": [
											"// wait for the request execution to finish",
											" var result_wait_time = pm.variables.get('result_wait_time');",
											" setTimeout(function(){}, [result_wait_time]);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/serviceProviders/A0/resources/automationResults/{{requestId}}",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"serviceProviders",
										"A0",
										"resources",
										"automationResults",
										"{{requestId}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "grep",
					"item": [
						{
							"name": "predefined AutomationPlan",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bba89520-2f1b-4be4-a6fe-2bb824dfb29c",
										"exec": [
											"var serverAddr = pm.variables.get(\"server_address\");",
											"var server_context = pm.variables.get(\"server_context\");",
											"",
											"pm.test(\"Response code should be 200 (OK)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Response body should contain an AutomationPlan (id:grep)\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:AutomationPlan rdf:about=\\\"\" + serverAddr + \"/\" + server_context + \"/services/serviceProviders/A0/resources/automationPlans/grep\");",
											"});",
											"pm.test(\"AutomationPlan should contain a dcterms:title property\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:title\");",
											"});",
											"pm.test(\"AutomationPlan should contain a dcterms:created property\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:created\");",
											"});",
											"pm.test(\"AutomationPlan should contain a dcterms:modified property\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:modified\");",
											"});",
											"pm.test(\"AutomationPlan should contain a <dcterms:creator property\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:creator\");",
											"});",
											"pm.test(\"AutomationPlan should contain an options parameter definition\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<oslc:name>options</oslc:name>\");",
											"});",
											"pm.test(\"AutomationPlan should contain a SUT parameter definition\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<oslc:name>SUT</oslc:name>\");",
											"});",
											"pm.test(\"AutomationPlan should contain a pattern parameter definition\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<oslc:name>pattern</oslc:name>\");",
											"});",
											"pm.test(\"AutomationPlan should contain a file parameter definition\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<oslc:name>file</oslc:name>\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "7aa54183-7db8-4127-9931-79dfd8a1b73d",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/serviceProviders/A0/resources/automationPlans/grep",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"serviceProviders",
										"A0",
										"resources",
										"automationPlans",
										"grep"
									]
								}
							},
							"response": []
						},
						{
							"name": "analyse",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "18086adc-7645-4d39-b64a-792c901abc85",
										"exec": [
											"pm.test(\"Response code should be 201 (created)\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"",
											"// save the request ID as a global variable for later tests to use",
											"const response = xml2Json(pm.response.text());",
											"var resrouceAbout = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"].$[\"rdf:about\"];",
											"var resourceAboutSplit = resrouceAbout.split(\"/\");",
											"var requestId = resourceAboutSplit[resourceAboutSplit.length-1];",
											"pm.globals.set('requestId', requestId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c92297f7-6f33-4e67-b190-35c2a64acf64",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/xml"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>First prototype request</dcterms:title>\n\t<dcterms:description>Test</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{server_address}}/{{server_context}}/services/serviceProviders/A0/resources/automationPlans/grep\" />\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>pattern</oslc:name>\n\t\t\t<rdf:value>i</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>file</oslc:name>\n\t\t\t<rdf:value>TestEchoProgram.cpp</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>SUT</oslc:name>\n\t\t\t<rdf:value>{{SUT}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>"
								},
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/serviceProviders/A0/resources/createAutoRequest",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"serviceProviders",
										"A0",
										"resources",
										"createAutoRequest"
									]
								}
							},
							"response": []
						},
						{
							"name": "check result",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d7f5696b-e63b-449f-b1f0-072b81628dad",
										"exec": [
											"// get global variable to use in this test",
											"var requestId = pm.globals.get('requestId');",
											"var serverAddr = pm.variables.get(\"server_address\");",
											"var server_context = pm.variables.get(\"server_context\");",
											"var AutoPlanId = pm.variables.get(\"AutoPlanId\");",
											"var analyser = pm.variables.get(\"analyser\");",
											"var executionParameters= pm.variables.get(\"executionParameters\");",
											"var SUT = pm.variables.get(\"SUT\");",
											"",
											"",
											"pm.test(\"Response code should be 200 (OK)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"AutomationResult desiredState should be #complete\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:desiredState rdf:resource=\\\"http://open-services.net/ns/auto#complete\\\"/>\");",
											"});",
											"// the only difference compared to the last request (below)",
											"pm.test(\"AutomationResult state should be #complete\", function () {",
											"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#new\\\"/>\");",
											"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#inProgress\\\"/>\");",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#complete\\\"/>\");",
											"});",
											"pm.test(\"AutomationResult verdict should be #passed\", function () {",
											"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:verdict rdf:resource=\\\"http://open-services.net/ns/auto#unavailable\\\"/>\");",
											"    pm.expect(pm.response.text()).to.include(\"oslc_auto:verdict rdf:resource=\\\"http://open-services.net/ns/auto#passed\\\"/>\");",
											"    pm.expect(pm.response.text()).to.not.include(\"oslc_auto:state rdf:resource=\\\"http://open-services.net/ns/auto#error\\\"/>\");",
											"});",
											"",
											"pm.test(\"AutomationResult should contain analysis stdout\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:title rdf:parseType=\\\"Literal\\\">Analysis stdout</dcterms:title>\");",
											"});",
											"pm.test(\"AutomationResult analysis stdout should have the expected value\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"int main(int argc, char** argv)\\n\");",
											"});",
											"pm.test(\"AutomationResult should contain analysis stderr\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<dcterms:title rdf:parseType=\\\"Literal\\\">Analysis stderr</dcterms:title>\");",
											"});",
											"pm.test(\"AutomationResult analysis stderr be empty (~)\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"<rdf:value rdf:parseType=\\\"Literal\\\"></rdf:value>\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c802813d-12f9-400c-9176-3b098c9b0ae7",
										"exec": [
											"// wait for the request execution to finish",
											" var result_wait_time = pm.variables.get('result_wait_time');",
											" setTimeout(function(){}, [result_wait_time]);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/serviceProviders/A0/resources/automationResults/{{requestId}}",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"serviceProviders",
										"A0",
										"resources",
										"automationResults",
										"{{requestId}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "82165468-821b-43c9-a083-7db86b5abe8f",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "fe116260-53f4-44e4-9180-7f288ccc399e",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Query Capability",
			"item": [
				{
					"name": "pre init some resources",
					"item": [
						{
							"name": "create SUT using the compilation provider",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "28eb1cf1-a957-444a-b541-0affedf688d7",
										"exec": [
											"// save the request ID as a global variable for later tests to use -- used as SUT ID",
											"const response = xml2Json(pm.response.text());",
											"var resrouceAbout = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"].$[\"rdf:about\"];",
											"var resourceAboutSplit = resrouceAbout.split(\"/\");",
											"var requestId = resourceAboutSplit[resourceAboutSplit.length-1];",
											"pm.globals.set('sutId', requestId);",
											"",
											"pm.test(\"Response code should be 201 (created)\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"// wait for the request execution to finish",
											"var result_wait_time = pm.variables.get('result_wait_time');",
											"setTimeout(function(){}, [result_wait_time]);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "53694edb-628d-4044-b35a-1fec5eecd915",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/xml"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>analysis test</dcterms:title>\n\t<dcterms:description>analysis test</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{compilation_provider}}/services/serviceProviders/A0/resources/automationPlans/0\" />\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>sourceGit</oslc:name>\n\t\t\t<rdf:value>https://github.com/od42/test.git</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>buildCommand</oslc:name>\n\t\t\t<rdf:value>gcc -g TestEchoProgram.cpp -o my_echo</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>launchCommand</oslc:name>\n\t\t\t<rdf:value>./my_echo</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>"
								},
								"url": {
									"raw": "{{compilation_provider}}/services/serviceProviders/A0/resources/createAutoRequest",
									"host": [
										"{{compilation_provider}}"
									],
									"path": [
										"services",
										"serviceProviders",
										"A0",
										"resources",
										"createAutoRequest"
									]
								}
							},
							"response": []
						},
						{
							"name": "create AutomationRequest",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "28eb1cf1-a957-444a-b541-0affedf688d7",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "53694edb-628d-4044-b35a-1fec5eecd915",
										"exec": [
											"// setup global variables for future requests (GETs)",
											"// attempt to make this sequence of requests into a template that can then be change in this place to change the test",
											"",
											"pm.globals.set(\"AutoPlanId\", \"dummy\");",
											"",
											"pm.globals.set(\"arguments\", \"test_arguments\");",
											"",
											"var compilation_provider = pm.variables.get(\"compilation_provider\");",
											"var sutId = pm.globals.get(\"sutId\");",
											"pm.globals.set(\"SUT\", compilation_provider + \"/services/serviceProviders/A0/resources/sUTs/\" + sutId);",
											"",
											"pm.globals.set(\"reqCreator\", \"https://pajda.fit.vutbr.cz/xvasic\");",
											"pm.globals.set(\"reqTitle\", \"Test title\");",
											"pm.globals.set(\"reqDescription\", \"Test description\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/xml"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>special title for search term query</dcterms:title>\n\t<dcterms:description>{{reqDescription}}</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{server_address}}/{{server_context}}/services/serviceProviders/A0/resources/automationPlans/{{AutoPlanId}}\" />\n\t<dcterms:creator rdf:resource=\"{{reqCreator}}\"/>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>arguments</oslc:name>\n\t\t\t<rdf:value>{{arguments}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>SUT</oslc:name>\n\t\t\t<rdf:value>{{SUT}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>"
								},
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/serviceProviders/A0/resources/createAutoRequest",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"serviceProviders",
										"A0",
										"resources",
										"createAutoRequest"
									]
								}
							},
							"response": []
						},
						{
							"name": "create AutomationRequest Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "05f22e88-2c19-4a9f-a414-339c103ac10e",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5bf31efb-dc17-4e88-9cd0-7e1a11338d6c",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/xml"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>special title for search term query</dcterms:title>\n\t<dcterms:description>{{reqDescription}}</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{server_address}}/{{server_context}}/services/serviceProviders/A0/resources/automationPlans/{{AutoPlanId}}\" />\n\t<dcterms:creator rdf:resource=\"{{reqCreator}}\"/>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>arguments</oslc:name>\n\t\t\t<rdf:value>{{arguments}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>SUT</oslc:name>\n\t\t\t<rdf:value>{{SUT}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>"
								},
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/serviceProviders/A0/resources/createAutoRequest",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"serviceProviders",
										"A0",
										"resources",
										"createAutoRequest"
									]
								}
							},
							"response": []
						},
						{
							"name": "create AutomationRequest Copy 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0c49f109-7840-43d2-a941-1f3be0b9648b",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "72b10d0e-3e06-49c7-855b-20c0aa904b75",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/xml"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>special title for search term query</dcterms:title>\n\t<dcterms:description>{{reqDescription}}</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{server_address}}/{{server_context}}/services/serviceProviders/A0/resources/automationPlans/{{AutoPlanId}}\" />\n\t<dcterms:creator rdf:resource=\"{{reqCreator}}\"/>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>arguments</oslc:name>\n\t\t\t<rdf:value>{{arguments}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>SUT</oslc:name>\n\t\t\t<rdf:value>{{SUT}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>"
								},
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/serviceProviders/A0/resources/createAutoRequest",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"serviceProviders",
										"A0",
										"resources",
										"createAutoRequest"
									]
								}
							},
							"response": []
						},
						{
							"name": "create AutomationRequest Copy 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e7aec208-c1b0-4717-bb08-1a0cc986bdf4",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "bbc007a6-3550-4010-9f6d-337502bd4b6c",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/xml"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>special title for search term query</dcterms:title>\n\t<dcterms:description>{{reqDescription}}</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{server_address}}/{{server_context}}/services/serviceProviders/A0/resources/automationPlans/{{AutoPlanId}}\" />\n\t<dcterms:creator rdf:resource=\"{{reqCreator}}\"/>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>arguments</oslc:name>\n\t\t\t<rdf:value>{{arguments}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>SUT</oslc:name>\n\t\t\t<rdf:value>{{SUT}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>"
								},
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/serviceProviders/A0/resources/createAutoRequest",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"serviceProviders",
										"A0",
										"resources",
										"createAutoRequest"
									]
								}
							},
							"response": []
						},
						{
							"name": "create AutomationRequest Copy 4",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd36a8b8-f67c-48b7-938f-ee5cec46f952",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "9a436b5c-bdeb-45ad-b648-61c62e71c14b",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/xml"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>special title for search term query</dcterms:title>\n\t<dcterms:description>{{reqDescription}}</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{server_address}}/{{server_context}}/services/serviceProviders/A0/resources/automationPlans/{{AutoPlanId}}\" />\n\t<dcterms:creator rdf:resource=\"{{reqCreator}}\"/>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>arguments</oslc:name>\n\t\t\t<rdf:value>{{arguments}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>SUT</oslc:name>\n\t\t\t<rdf:value>{{SUT}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>"
								},
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/serviceProviders/A0/resources/createAutoRequest",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"serviceProviders",
										"A0",
										"resources",
										"createAutoRequest"
									]
								}
							},
							"response": []
						},
						{
							"name": "create AutomationRequest Copy 5",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4fdeb083-9a7a-42ed-b289-bdb13126d58f",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e0b2bc21-6abe-44fe-99f4-9b5bbaf731d8",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/xml"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>special title for search term query</dcterms:title>\n\t<dcterms:description>{{reqDescription}}</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{server_address}}/{{server_context}}/services/serviceProviders/A0/resources/automationPlans/{{AutoPlanId}}\" />\n\t<dcterms:creator rdf:resource=\"{{reqCreator}}\"/>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>arguments</oslc:name>\n\t\t\t<rdf:value>{{arguments}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>SUT</oslc:name>\n\t\t\t<rdf:value>{{SUT}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>"
								},
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/serviceProviders/A0/resources/createAutoRequest",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"serviceProviders",
										"A0",
										"resources",
										"createAutoRequest"
									]
								}
							},
							"response": []
						},
						{
							"name": "create AutomationRequest Copy 6",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "df1f1db6-1c0c-4511-9a8a-d7fe93cb2f3f",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "985bb876-4640-4749-a38a-3275b192ba65",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/xml"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>special title for search term query</dcterms:title>\n\t<dcterms:description>{{reqDescription}}</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{server_address}}/{{server_context}}/services/serviceProviders/A0/resources/automationPlans/{{AutoPlanId}}\" />\n\t<dcterms:creator rdf:resource=\"{{reqCreator}}\"/>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>arguments</oslc:name>\n\t\t\t<rdf:value>{{arguments}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>SUT</oslc:name>\n\t\t\t<rdf:value>{{SUT}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>"
								},
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/serviceProviders/A0/resources/createAutoRequest",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"serviceProviders",
										"A0",
										"resources",
										"createAutoRequest"
									]
								}
							},
							"response": []
						},
						{
							"name": "create AutomationRequest Copy 7",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b62186b6-e427-4281-bfed-a219fbb7e2b2",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "7e1cec01-f97b-4d28-b137-5a80e0edad13",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/xml"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>special title for search term query</dcterms:title>\n\t<dcterms:description>{{reqDescription}}</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{server_address}}/{{server_context}}/services/serviceProviders/A0/resources/automationPlans/{{AutoPlanId}}\" />\n\t<dcterms:creator rdf:resource=\"{{reqCreator}}\"/>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>arguments</oslc:name>\n\t\t\t<rdf:value>{{arguments}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>SUT</oslc:name>\n\t\t\t<rdf:value>{{SUT}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>"
								},
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/serviceProviders/A0/resources/createAutoRequest",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"serviceProviders",
										"A0",
										"resources",
										"createAutoRequest"
									]
								}
							},
							"response": []
						},
						{
							"name": "create AutomationRequest Copy 8",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5fdd3ff0-478b-46a0-8306-72098f8e1bd1",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "023c6f20-c4ea-4b92-81bc-c4b5ec9d345a",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/xml"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>special title for search term query</dcterms:title>\n\t<dcterms:description>{{reqDescription}}</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{server_address}}/{{server_context}}/services/serviceProviders/A0/resources/automationPlans/{{AutoPlanId}}\" />\n\t<dcterms:creator rdf:resource=\"{{reqCreator}}\"/>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>arguments</oslc:name>\n\t\t\t<rdf:value>{{arguments}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>SUT</oslc:name>\n\t\t\t<rdf:value>{{SUT}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>"
								},
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/serviceProviders/A0/resources/createAutoRequest",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"serviceProviders",
										"A0",
										"resources",
										"createAutoRequest"
									]
								}
							},
							"response": []
						},
						{
							"name": "create AutomationRequest Copy 9",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "12965b8f-0f50-4d3e-9453-84c9eaf11c34",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2d5a5a55-de4e-45b3-9774-bb35152a8eb4",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/xml"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>special title for search term query</dcterms:title>\n\t<dcterms:description>{{reqDescription}}</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{server_address}}/{{server_context}}/services/serviceProviders/A0/resources/automationPlans/{{AutoPlanId}}\" />\n\t<dcterms:creator rdf:resource=\"{{reqCreator}}\"/>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>arguments</oslc:name>\n\t\t\t<rdf:value>{{arguments}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>SUT</oslc:name>\n\t\t\t<rdf:value>{{SUT}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>"
								},
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/serviceProviders/A0/resources/createAutoRequest",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"serviceProviders",
										"A0",
										"resources",
										"createAutoRequest"
									]
								}
							},
							"response": []
						},
						{
							"name": "create AutomationRequest Copy 10",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8ffce6b1-85c5-436a-9779-8ef67d0e87e9",
										"exec": [
											"// wait for the compilation to finish",
											"var result_wait_time = pm.variables.get('result_wait_time');",
											"setTimeout(function(){}, [5000]);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "9272ac74-2200-4b5d-9e63-e3f842ac70a9",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/xml"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>special title for search term query</dcterms:title>\n\t<dcterms:description>{{reqDescription}}</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{server_address}}/{{server_context}}/services/serviceProviders/A0/resources/automationPlans/{{AutoPlanId}}\" />\n\t<dcterms:creator rdf:resource=\"{{reqCreator}}\"/>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>arguments</oslc:name>\n\t\t\t<rdf:value>{{arguments}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>SUT</oslc:name>\n\t\t\t<rdf:value>{{SUT}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>"
								},
								"url": {
									"raw": "{{server_address}}/{{server_context}}/services/serviceProviders/A0/resources/createAutoRequest",
									"host": [
										"{{server_address}}"
									],
									"path": [
										"{{server_context}}",
										"services",
										"serviceProviders",
										"A0",
										"resources",
										"createAutoRequest"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Query parameters",
					"item": [
						{
							"name": "limit",
							"item": [
								{
									"name": "query no limit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0a881f7a-ec3c-438d-b7bc-4b56f2a65370",
												"exec": [
													"var requestId = pm.globals.get('requestId');",
													"",
													"pm.test(\"Response code should be 200 (OK)\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Check the query result\", function () {",
													"    pm.expect(pm.response.text()).to.not.include(\">0</oslc:totalCount>\");",
													"    pm.expect(pm.response.text()).to.not.include(\">1</oslc:totalCount>\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/rdf+xml",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/serviceProviders/A0/resources/queryAutoResult",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"serviceProviders",
												"A0",
												"resources",
												"queryAutoResult"
											]
										}
									},
									"response": []
								},
								{
									"name": "query with limit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0a881f7a-ec3c-438d-b7bc-4b56f2a65370",
												"exec": [
													"var requestId = pm.globals.get('requestId');",
													"",
													"pm.test(\"Response code should be 200 (OK)\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Check the query result\", function () {",
													"    pm.expect(pm.response.text()).to.include(\">1</oslc:totalCount>\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/serviceProviders/A0/resources/queryAutoResult?limit=1",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"serviceProviders",
												"A0",
												"resources",
												"queryAutoResult"
											],
											"query": [
												{
													"key": "limit",
													"value": "1"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "page",
							"item": [
								{
									"name": "query no page",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0a881f7a-ec3c-438d-b7bc-4b56f2a65370",
												"exec": [
													"var requestId = pm.globals.get('requestId');",
													"",
													"pm.test(\"Response code should be 200 (OK)\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Check the query result\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"<dcterms:identifier>dummy</dcterms:identifier>\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/serviceProviders/A0/resources/queryAutoPlan",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"serviceProviders",
												"A0",
												"resources",
												"queryAutoPlan"
											]
										}
									},
									"response": []
								},
								{
									"name": "query with page",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0a881f7a-ec3c-438d-b7bc-4b56f2a65370",
												"exec": [
													"var requestId = pm.globals.get('requestId');",
													"",
													"pm.test(\"Response code should be 200 (OK)\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Check the query result\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"5</oslc:totalCount>\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/serviceProviders/A0/resources/queryAutoPlan?page=1",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"serviceProviders",
												"A0",
												"resources",
												"queryAutoPlan"
											],
											"query": [
												{
													"key": "page",
													"value": "1"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "searchTerms",
							"item": [
								{
									"name": "query with searchTerms",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0a881f7a-ec3c-438d-b7bc-4b56f2a65370",
												"exec": [
													"pm.test(\"Response code should be 200 (OK)\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Check the query result\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"special title for search term query\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/rdf+xml",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/serviceProviders/A0/resources/queryAutoResult?oslc.searchTerms=special title for search term query",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"serviceProviders",
												"A0",
												"resources",
												"queryAutoResult"
											],
											"query": [
												{
													"key": "oslc.searchTerms",
													"value": "special title for search term query"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "where",
							"item": [
								{
									"name": "query with where",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0a881f7a-ec3c-438d-b7bc-4b56f2a65370",
												"exec": [
													"pm.test(\"Response code should be 200 (OK)\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Check the query result\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"<dcterms:identifier>dummy</dcterms:identifier>\");",
													"    pm.expect(pm.response.text()).to.include(\">1</oslc:totalCount>\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/rdf+xml"
											}
										],
										"url": {
											"raw": "{{server_address}}/{{server_context}}/services/serviceProviders/A0/resources/queryAutoPlan?oslc.prefix=dcterms=<http://purl.org/dc/terms/>&oslc.where=dcterms:identifier=\"dummy\"",
											"host": [
												"{{server_address}}"
											],
											"path": [
												"{{server_context}}",
												"services",
												"serviceProviders",
												"A0",
												"resources",
												"queryAutoPlan"
											],
											"query": [
												{
													"key": "oslc.prefix",
													"value": "dcterms=<http://purl.org/dc/terms/>"
												},
												{
													"key": "oslc.where",
													"value": "dcterms:identifier=\"dummy\""
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "query AutomationPlans",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0a881f7a-ec3c-438d-b7bc-4b56f2a65370",
								"exec": [
									"pm.test(\"Response code should be 200 (OK)\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"The result should not be empty\", function () {",
									"    pm.expect(pm.response.text()).to.not.include(\">0</oslc:totalCount>\");",
									"});",
									"",
									"pm.test(\"The result should contain AutomationPlans resources\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"oslc_auto:AutomationPlan\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/rdf+xml"
							}
						],
						"url": {
							"raw": "{{server_address}}/{{server_context}}/services/serviceProviders/A0/resources/queryAutoPlan?",
							"host": [
								"{{server_address}}"
							],
							"path": [
								"{{server_context}}",
								"services",
								"serviceProviders",
								"A0",
								"resources",
								"queryAutoPlan"
							],
							"query": [
								{
									"key": "oslc.prefix",
									"value": "dcterms=<http://purl.org/dc/terms/>",
									"disabled": true
								},
								{
									"key": "oslc.where",
									"value": "dcterms:identifier=\"0\"",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "query AutomationRequests",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0a881f7a-ec3c-438d-b7bc-4b56f2a65370",
								"exec": [
									"var requestId = pm.globals.get('requestId');",
									"",
									"pm.test(\"Response code should be 200 (OK)\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"The result should not be empty\", function () {",
									"    pm.expect(pm.response.text()).to.not.include(\">0</oslc:totalCount>\");",
									"});",
									"",
									"pm.test(\"The result should contain AutomationRequest resources\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"oslc_auto:AutomationRequest\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/rdf+xml",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{server_address}}/{{server_context}}/services/serviceProviders/A0/resources/queryAutoRequest",
							"host": [
								"{{server_address}}"
							],
							"path": [
								"{{server_context}}",
								"services",
								"serviceProviders",
								"A0",
								"resources",
								"queryAutoRequest"
							]
						}
					},
					"response": []
				},
				{
					"name": "query AutomationResults",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0a881f7a-ec3c-438d-b7bc-4b56f2a65370",
								"exec": [
									"var requestId = pm.globals.get('requestId');",
									"",
									"pm.test(\"Response code should be 200 (OK)\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"The result should not be empty\", function () {",
									"    pm.expect(pm.response.text()).to.not.include(\">0</oslc:totalCount>\");",
									"});",
									"",
									"pm.test(\"The result should contain AutomationResult resources\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"oslc_auto:AutomationResult\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/rdf+xml",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{server_address}}/{{server_context}}/services/serviceProviders/A0/resources/queryAutoResult",
							"host": [
								"{{server_address}}"
							],
							"path": [
								"{{server_context}}",
								"services",
								"serviceProviders",
								"A0",
								"resources",
								"queryAutoResult"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "ba8e8f6e-107f-4b55-a64c-0a60943b9bbe",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "5cfeaa17-6b34-4068-84be-2d0d2bc6441b",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "75bc4356-09bc-4729-9001-c4de5636de47",
			"key": "server_address",
			"value": "http://localhost:8080"
		},
		{
			"id": "3574c5c3-2d00-46c1-836b-de5d82736724",
			"key": "result_wait_time",
			"value": "5000"
		},
		{
			"id": "55bf02fa-099c-40e6-a9b3-5db5a091ac16",
			"key": "server_context",
			"value": "analysis"
		},
		{
			"id": "c849e59f-2ce7-49d4-823d-f42125a34e1a",
			"key": "compilation_provider",
			"value": "http://localhost:8081/compilation"
		}
	],
	"protocolProfileBehavior": {}
}