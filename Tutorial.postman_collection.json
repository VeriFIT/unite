{
	"info": {
		"_postman_id": "0ba65627-1f78-443d-86bd-f1d6866a87b5",
		"name": "Tutorial",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "0) make sure to configure the collection variables!",
			"item": [
				{
					"name": "right click the collection - edit - variables",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": ""
						}
					},
					"response": []
				},
				{
					"name": "(nothing here! this is just a NOTE)",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": ""
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "1) look at resource shapes",
			"item": [
				{
					"name": "analysis",
					"item": [
						{
							"name": "Automation Plan",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response code should be 200 (OK)\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/rdf+xml",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{server_address}}:{{analysis_port}}/analysis/services/resourceShapes/automationPlan",
									"host": [
										"{{server_address}}"
									],
									"port": "{{analysis_port}}",
									"path": [
										"analysis",
										"services",
										"resourceShapes",
										"automationPlan"
									]
								}
							},
							"response": []
						},
						{
							"name": "Automation Request",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response code should be 200 (OK)\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"url": {
									"raw": "{{server_address}}:{{analysis_port}}/analysis/services/resourceShapes/automationRequest",
									"host": [
										"{{server_address}}"
									],
									"port": "{{analysis_port}}",
									"path": [
										"analysis",
										"services",
										"resourceShapes",
										"automationRequest"
									]
								}
							},
							"response": []
						},
						{
							"name": "Automation Result",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response code should be 200 (OK)\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"url": {
									"raw": "{{server_address}}:{{analysis_port}}/analysis/services/resourceShapes/automationResult",
									"host": [
										"{{server_address}}"
									],
									"port": "{{analysis_port}}",
									"path": [
										"analysis",
										"services",
										"resourceShapes",
										"automationResult"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "compilation",
					"item": [
						{
							"name": "Automation Plan",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response code should be 200 (OK)\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/rdf+xml",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{server_address}}:{{compilation_port}}/compilation/services/resourceShapes/automationPlan",
									"host": [
										"{{server_address}}"
									],
									"port": "{{compilation_port}}",
									"path": [
										"compilation",
										"services",
										"resourceShapes",
										"automationPlan"
									]
								}
							},
							"response": []
						},
						{
							"name": "Automation Request",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response code should be 200 (OK)\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"url": {
									"raw": "{{server_address}}:{{compilation_port}}/compilation/services/resourceShapes/automationRequest",
									"host": [
										"{{server_address}}"
									],
									"port": "{{compilation_port}}",
									"path": [
										"compilation",
										"services",
										"resourceShapes",
										"automationRequest"
									]
								}
							},
							"response": []
						},
						{
							"name": "Automation Result",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response code should be 200 (OK)\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"url": {
									"raw": "{{server_address}}:{{compilation_port}}/compilation/services/resourceShapes/automationResult",
									"host": [
										"{{server_address}}"
									],
									"port": "{{compilation_port}}",
									"path": [
										"compilation",
										"services",
										"resourceShapes",
										"automationResult"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "2) choose an Automation Plan (ie. a tool)",
			"item": [
				{
					"name": "query Automation Plan",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response code should be 200 (OK)\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/rdf+xml"
							}
						],
						"url": {
							"raw": "{{server_address}}:{{analysis_port}}/analysis/services/resources/queryAutomationPlan",
							"host": [
								"{{server_address}}"
							],
							"port": "{{analysis_port}}",
							"path": [
								"analysis",
								"services",
								"resources",
								"queryAutomationPlan"
							],
							"query": [
								{
									"key": "oslc.where",
									"value": "dcterms:identifier=\"0\"",
									"description": "Equality of a certain property (supports INT, String, and URL). Needs to be used with oslc.prefix.",
									"disabled": true
								},
								{
									"key": "oslc.prefix",
									"value": "dcterms=<http://purl.org/dc/terms/>",
									"description": "Define prefixes used in oslc.where",
									"disabled": true
								},
								{
									"key": "limit",
									"value": "20",
									"description": "Number of resources per response",
									"disabled": true
								},
								{
									"key": "page",
									"value": "0",
									"description": "Number of resources to skip (cycle through pages)",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "3) basic usacase (compile - analyse - get result)",
			"item": [
				{
					"name": "0) see Automation Plans to understand input parameters",
					"item": [
						{
							"name": "compilation AutomationPlan definition",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response code should be 200 (OK)\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"url": {
									"raw": "{{server_address}}:{{compilation_port}}/compilation/services/resources/automationPlans/0",
									"host": [
										"{{server_address}}"
									],
									"port": "{{compilation_port}}",
									"path": [
										"compilation",
										"services",
										"resources",
										"automationPlans",
										"0"
									]
								}
							},
							"response": []
						},
						{
							"name": "analysis AutomationPlan definition (dummy tool)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response code should be 200 (OK)\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"url": {
									"raw": "{{server_address}}:{{analysis_port}}/analysis/services/resources/automationPlans/dummy",
									"host": [
										"{{server_address}}"
									],
									"port": "{{analysis_port}}",
									"path": [
										"analysis",
										"services",
										"resources",
										"automationPlans",
										"dummy"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "1) compile the SUT",
					"item": [
						{
							"name": "send request (look at oslc_auto:producedAutomationResult)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// save the request ID as a global variable for later tests to use",
											"const response = xml2Json(pm.response.text());",
											"var resrouceAbout = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"].$[\"rdf:about\"];",
											"var resourceAboutSplit = resrouceAbout.split(\"/\");",
											"var resourceId = resourceAboutSplit[resourceAboutSplit.length-1];",
											"pm.globals.set('compilation_reqId', resourceId);",
											"pm.globals.set('sutId', resourceId);",
											"",
											"pm.test(\"Response code should be 201 (created)\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/xml"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>First prototype request</dcterms:title>\n\t<dcterms:description>Test</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{server_address}}:{{compilation_port}}/compilation/services/resources/automationPlans/0\" />\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>sourceBase64</oslc:name>\n\t\t\t<rdf:value>TestEchoProgram.cpp\nI2luY2x1ZGUgPHN0ZGlvLmg+CgppbnQgbWFpbihpbnQgYXJnYywgY2hhcioqIGFyZ3YpCnsKCXByaW50ZigiJXNcbiIsIGFyZ3ZbMV0pOwoJcmV0dXJuIDA7Cn0K</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>buildCommand</oslc:name>\n\t\t\t<rdf:value>gcc -g TestEchoProgram.cpp -o my_echo</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>launchCommand</oslc:name>\n\t\t\t<rdf:value>./my_echo</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\n\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>"
								},
								"url": {
									"raw": "{{server_address}}:{{compilation_port}}/compilation/services/resources/createAutomationRequest",
									"host": [
										"{{server_address}}"
									],
									"port": "{{compilation_port}}",
									"path": [
										"compilation",
										"services",
										"resources",
										"createAutomationRequest"
									]
								}
							},
							"response": []
						},
						{
							"name": "check the producedAutomationResult (look at fit:createdSUT)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response code should be 200 (OK)\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"url": {
									"raw": "{{server_address}}:{{compilation_port}}/compilation/services/resources/automationResults/{{compilation_reqId}}",
									"host": [
										"{{server_address}}"
									],
									"port": "{{compilation_port}}",
									"path": [
										"compilation",
										"services",
										"resources",
										"automationResults",
										"{{compilation_reqId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "check the SUT",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response code should be 200 (OK)\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"url": {
									"raw": "{{server_address}}:{{compilation_port}}/compilation/services/resources/sUTs/{{compilation_reqId}}",
									"host": [
										"{{server_address}}"
									],
									"port": "{{compilation_port}}",
									"path": [
										"compilation",
										"services",
										"resources",
										"sUTs",
										"{{compilation_reqId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "2) analyse",
					"item": [
						{
							"name": "request analysis (look at oslc_auto:producedAutomationResult)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// save the request ID as a global variable for later tests to use",
											"const response = xml2Json(pm.response.text());",
											"var resrouceAbout = response[\"rdf:RDF\"][\"oslc_auto:AutomationRequest\"].$[\"rdf:about\"];",
											"var resourceAboutSplit = resrouceAbout.split(\"/\");",
											"var resourceId = resourceAboutSplit[resourceAboutSplit.length-1];",
											"pm.globals.set('analysis_reqId', resourceId);",
											"",
											"pm.test(\"Response code should be 201 (created)\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/xml"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:dcterms=\"http://purl.org/dc/terms/\"\n         xmlns:oslc=\"http://open-services.net/ns/core#\"\n\t\t xmlns:oslc_auto=\"http://open-services.net/ns/auto#\">\n\n  <oslc_auto:AutomationRequest>\n\t<dcterms:title>Tutorial title</dcterms:title>\n\t<dcterms:description>Tutorial description</dcterms:description>\n\t<oslc_auto:executesAutomationPlan rdf:resource=\"{{server_address}}/{{analysis_port}}/analysis/services/resources/automationPlans/dummy\" />\n\t<dcterms:creator rdf:resource=\"Title-creator\"/>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>arguments</oslc:name>\n\t\t\t<rdf:value>HelloWorld</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n\t\n\t<oslc_auto:inputParameter>\n\t\t<oslc_auto:ParameterInstance>\n\t\t\t<oslc:name>SUT</oslc:name>\n\t\t\t<rdf:value>{{server_address}}:{{compilation_port}}/compilation/services/resources/sUTs/{{sutId}}</rdf:value>\n\t\t</oslc_auto:ParameterInstance>\n\t</oslc_auto:inputParameter>\n  </oslc_auto:AutomationRequest>\n\n</rdf:RDF>"
								},
								"url": {
									"raw": "{{server_address}}:{{analysis_port}}/analysis/services/resources/createAutomationRequest",
									"host": [
										"{{server_address}}"
									],
									"port": "{{analysis_port}}",
									"path": [
										"analysis",
										"services",
										"resources",
										"createAutomationRequest"
									]
								}
							},
							"response": []
						},
						{
							"name": "poll result till oslc_auto:state is complete (look at \"oslc_auto:contribution\"s)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response code should be 200 (OK)\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"url": {
									"raw": "{{server_address}}:{{analysis_port}}/analysis/services/resources/automationResults/{{analysis_reqId}}",
									"host": [
										"{{server_address}}"
									],
									"port": "{{analysis_port}}",
									"path": [
										"analysis",
										"services",
										"resources",
										"automationResults",
										"{{analysis_reqId}}"
									]
								}
							},
							"response": []
						}
					],
					"description": "Automation plan that only supports single source file cpp programs.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "explore the adapter through OSLC",
			"item": [
				{
					"name": "analysis",
					"item": [
						{
							"name": "see the catalogue of service providers",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response code should be 200 (OK)\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/rdf+xml",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{server_address}}:{{analysis_port}}/analysis/services/catalog/singleton",
									"host": [
										"{{server_address}}"
									],
									"port": "{{analysis_port}}",
									"path": [
										"analysis",
										"services",
										"catalog",
										"singleton"
									]
								}
							},
							"response": []
						},
						{
							"name": "see the Automation service provider's capabilities",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response code should be 200 (OK)\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"url": {
									"raw": "{{server_address}}:{{analysis_port}}/analysis/services/serviceProviders/A0",
									"host": [
										"{{server_address}}"
									],
									"port": "{{analysis_port}}",
									"path": [
										"analysis",
										"services",
										"serviceProviders",
										"A0"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "compilation",
					"item": [
						{
							"name": "see the catalogue of service providers",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response code should be 200 (OK)\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/rdf+xml",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{server_address}}:{{compilation_port}}/compilation/services/catalog/singleton",
									"host": [
										"{{server_address}}"
									],
									"port": "{{compilation_port}}",
									"path": [
										"compilation",
										"services",
										"catalog",
										"singleton"
									]
								}
							},
							"response": []
						},
						{
							"name": "see the Automation service provider's capabilities",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response code should be 200 (OK)\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/rdf+xml"
									}
								],
								"url": {
									"raw": "{{server_address}}:{{compilation_port}}/compilation/services/serviceProviders/A0",
									"host": [
										"{{server_address}}"
									],
									"port": "{{compilation_port}}",
									"path": [
										"compilation",
										"services",
										"serviceProviders",
										"A0"
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "resource query parameters",
			"item": [
				{
					"name": "e.g. analysis results - see parameters",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/rdf+xml",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{server_address}}:{{analysis_port}}/analysis/services/resources/queryAutomationResult",
							"host": [
								"{{server_address}}"
							],
							"port": "{{analysis_port}}",
							"path": [
								"analysis",
								"services",
								"resources",
								"queryAutomationResult"
							],
							"query": [
								{
									"key": "oslc.searchTerms",
									"value": "TextToFind",
									"description": "Full text search in all properties",
									"disabled": true
								},
								{
									"key": "oslc.where",
									"value": "dcterms:identifier=\"0\"",
									"description": "Equality of a certain property (supports INT, String, and URL). Needs to be used with oslc.prefix.",
									"disabled": true
								},
								{
									"key": "oslc.prefix",
									"value": "dcterms=<http://purl.org/dc/terms/>",
									"description": "Define prefixes used in oslc.where",
									"disabled": true
								},
								{
									"key": "limit",
									"value": "20",
									"description": "Number of resources per response",
									"disabled": true
								},
								{
									"key": "page",
									"value": "0",
									"description": "Number of resources to skip (cycle through pages)",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "basic",
		"basic": [
			{
				"key": "password",
				"value": "{{password}}",
				"type": "string"
			},
			{
				"key": "username",
				"value": "{{username}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "server_address",
			"value": "http://localhost"
		},
		{
			"key": "analysis_port",
			"value": "8080"
		},
		{
			"key": "compilation_port",
			"value": "8081"
		},
		{
			"key": "username",
			"value": "user"
		},
		{
			"key": "password",
			"value": "user"
		}
	]
}